<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on The Insane Techie</title>
    <link>https://dhanoopbhaskar.github.io/tags/python/</link>
    <description>Recent content in python on The Insane Techie</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 23 Jan 2022 19:38:00 +0530</lastBuildDate>
    
	<atom:link href="https://dhanoopbhaskar.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Pandas - Using pandas.melt</title>
      <link>https://dhanoopbhaskar.github.io/posts/2022-01-23-python-pandas-melt/</link>
      <pubDate>Sun, 23 Jan 2022 19:38:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/posts/2022-01-23-python-pandas-melt/</guid>
      <description>The pandas.melt(frame, id_vars=None, value_vars=None, var_name=None, value_name=&#39;value&#39;, col_level=None, ignore_index=True) function unpivots a DataFrame from wide to long format, optionally leaving identifiers set.
Click here for the documentation.
import pandas as pd import numpy as np df_to_melt = pd.read_csv(&amp;#39;to_melt.csv&amp;#39;, header=0) df_to_melt.head() 
## The columns to unpivot will form the entries in the &amp;#39;variable&amp;#39; column. ## So better to rename them before doing melt df_to_melt.rename(columns={&amp;#39;BASIC_AMOUNT&amp;#39;:&amp;#39;BASIC&amp;#39;, &amp;#39;DA_AMOUNT&amp;#39;:&amp;#39;DA&amp;#39;, &amp;#39;HRA_AMOUNT&amp;#39;:&amp;#39;HRA&amp;#39;, &amp;#39;SPECIAL_AMOUNT&amp;#39;:&amp;#39;SPECIAL&amp;#39; }, inplace=True) df_to_melt.columns Index([&#39;EMP_NO&#39;, &#39;BASIC&#39;, &#39;DA&#39;, &#39;HRA&#39;, &#39;SPECIAL&#39;], dtype=&#39;object&#39;)  value_cols = df_to_melt.</description>
    </item>
    
    <item>
      <title>Pandas - Using pandas.pivot</title>
      <link>https://dhanoopbhaskar.github.io/posts/2022-01-23-python-pandas-pivot/</link>
      <pubDate>Sun, 23 Jan 2022 19:10:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/posts/2022-01-23-python-pandas-pivot/</guid>
      <description>The pandas.pivot(data, index=None, columns=None, values=None) function returns reshaped DataFrame organized by given index / column values.
Click here for the documentation.
import pandas as pd import numpy as np df_to_pivot = pd.read_csv(&amp;#39;to_pivot.csv&amp;#39;, header=0) df_to_pivot.head() 
df_to_pivot[&amp;#39;HEAD&amp;#39;].unique() array([&#39;BASIC&#39;, &#39;DA&#39;, &#39;HRA&#39;, &#39;SPECIAL&#39;], dtype=object)  df_to_pivot = pd.pivot(df_to_pivot, index=[&amp;#39;EMP_NO&amp;#39;], columns=[&amp;#39;HEAD&amp;#39;], values=[&amp;#39;AMOUNT&amp;#39;]) df_to_pivot.head() 
df_to_pivot.columns = [str(j) + &amp;#39;_&amp;#39; + str(i) for i, j in df_to_pivot.columns] df_to_pivot.head() 
df_to_pivot.reset_index(inplace=True) df_to_pivot</description>
    </item>
    
    <item>
      <title>Pandas - Place Amount into Buckets</title>
      <link>https://dhanoopbhaskar.github.io/posts/2022-01-23-python-pandas-amount-into-buckets/</link>
      <pubDate>Sun, 23 Jan 2022 17:44:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/posts/2022-01-23-python-pandas-amount-into-buckets/</guid>
      <description>import pandas as pd import numpy as np df_salary = pd.read_csv(&amp;#39;bucketing.csv&amp;#39;, header=0) df_salary.head() 
df_salary.shape (109516, 2)  BUCKET_SIZE = 10000 # the difference between lower and upper ranges in each bucket BUCKET_LOWER_LIMIT = 10000 # the bucket starts here BUCKET_UPPER_LIMIT = 250000 # the bucket ends here BUCKET_UNITS = 1000 # the bucket range will be in 1000s BUCKET_STRING_LENGTH = 3 # prepend zeroes to make the label of length 3 col = &amp;#39;SALARY&amp;#39; conditions = [] choices = [] conditions.</description>
    </item>
    
    <item>
      <title>ROS In Docker Container</title>
      <link>https://dhanoopbhaskar.github.io/posts/2020-05-07-ros-in-docker-container/</link>
      <pubDate>Thu, 07 May 2020 14:35:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/posts/2020-05-07-ros-in-docker-container/</guid>
      <description>ROS (Robot Operating System) - Documentation - http://wiki.ros.org/
In this example I use docker image of ROS Melodic and a Dockerfile for creating the required docker container. Python3 (python3.7) is also installed in this example.
Please refer https://docs.docker.com/get-started/ for more information on Dockers.
  Pull the docker image for ROS Melodic
 docker pull ros:melodic    Creating the Dockerfile FROM ros:melodic MAINTAINER dhanoopbhaskar@gmail.com RUN apt-get update &amp;amp;&amp;amp; apt-get upgrade -y \ &amp;amp;&amp;amp; apt-get install -y software-properties-common \ &amp;amp;&amp;amp; add-apt-repository ppa:deadsnakes/ppa \ &amp;amp;&amp;amp; apt-get install -y python3.</description>
    </item>
    
    <item>
      <title>Working With Python 3 In ROS Kinetic Or Melodic</title>
      <link>https://dhanoopbhaskar.github.io/posts/2020-05-07-working-with-python-3-in-ros-kinetic-or-melodic/</link>
      <pubDate>Thu, 07 May 2020 14:07:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/posts/2020-05-07-working-with-python-3-in-ros-kinetic-or-melodic/</guid>
      <description>ROS (Robot Operating System) - Documentation - http://wiki.ros.org/
 The Robot Operating System (ROS) is a flexible framework for writing robot software. It is a collection of tools, libraries, and conventions that aim to simplify the task of creating complex and robust robot behavior across a wide variety of robotic platforms. — https://www.ros.org/ 1 ROS (upto Melodic) officially supports only python2 and NOT python3. However some libraries we use in our projects (eg.</description>
    </item>
    
    <item>
      <title>Python - First Step Towards Programming</title>
      <link>https://dhanoopbhaskar.github.io/posts/2011-09-20-python-first-step-towards-programming/</link>
      <pubDate>Tue, 20 Sep 2011 18:47:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/posts/2011-09-20-python-first-step-towards-programming/</guid>
      <description>Let&amp;rsquo;s start with an example program to find Fibonacci series
&amp;gt;&amp;gt;&amp;gt; # Fibonacci series: ... # the sum of two elements defines the next ... a, b = 0, 1 &amp;gt;&amp;gt;&amp;gt; while b &amp;lt; 10: ... print(b) ... a, b = b, a+b ... 1 1 2 3 5 8  This example introduces several new features.
  The first line contains a multiple assignment: the variables a and b simultaneously get the new values 0 and 1.</description>
    </item>
    
    <item>
      <title>Python - Strings</title>
      <link>https://dhanoopbhaskar.github.io/posts/2011-09-20-python-strings/</link>
      <pubDate>Tue, 20 Sep 2011 17:53:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/posts/2011-09-20-python-strings/</guid>
      <description>Besides numbers, Python can also manipulate strings, which can be expressed in several ways. They can be enclosed in single quotes or double quotes:
&amp;gt;&amp;gt;&amp;gt; &amp;#39;spam eggs&amp;#39; &amp;#39;spam eggs&amp;#39; &amp;gt;&amp;gt;&amp;gt; &amp;#39;doesn\&amp;#39;t&amp;#39; &amp;#34;doesn&amp;#39;t&amp;#34; &amp;gt;&amp;gt;&amp;gt; &amp;#34;doesn&amp;#39;t&amp;#34; &amp;#34;doesn&amp;#39;t&amp;#34; &amp;gt;&amp;gt;&amp;gt; &amp;#39;&amp;#34;Yes,&amp;#34; he said.&amp;#39; &amp;#39;&amp;#34;Yes,&amp;#34; he said.&amp;#39; &amp;gt;&amp;gt;&amp;gt; &amp;#34;\&amp;#34;Yes,\&amp;#34;he said.&amp;#34; &amp;#39;&amp;#34;Yes,&amp;#34; he said.&amp;#39; &amp;gt;&amp;gt;&amp;gt; &amp;#39;&amp;#34;Isn\&amp;#39;t,&amp;#34; she said.&amp;#39; &amp;#39;&amp;#34;Isn\&amp;#39;t,&amp;#34; she said.&amp;#39; The interpreter prints the result of string operations in the same way as they are typed for input: inside quotes, and with quotes and other funny characters escaped by backslashes, to show the precise value.</description>
    </item>
    
    <item>
      <title>Python - An Introduction</title>
      <link>https://dhanoopbhaskar.github.io/posts/2011-09-19-python-an-introduction/</link>
      <pubDate>Mon, 19 Sep 2011 16:31:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/posts/2011-09-19-python-an-introduction/</guid>
      <description>In Python, input and output are distinguished by the presence or absence of prompts (&amp;gt;&amp;gt;&amp;gt; and ...). You must type everything after the prompt, when the prompt appears; lines that do not begin with a prompt are output from the interpreter. The comments in Python starts with an hash(#) character and ends when the physical line ends.
# this is the first comment SPAM = 1 # and this is the second comment # .</description>
    </item>
    
    <item>
      <title>Using the Python Interpreter</title>
      <link>https://dhanoopbhaskar.github.io/posts/2011-09-19-using-the-python-interpreter/</link>
      <pubDate>Mon, 19 Sep 2011 15:57:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/posts/2011-09-19-using-the-python-interpreter/</guid>
      <description>Invoking the Interpreter
The Python interpreter is usually installed as /usr/local/bin/python3.2 on those machines where it is available; putting /usr/local/bin in your Unix shell’s search path makes it possible to start it by typing the command
python3.2  to the shell. Since the choice of the directory where the interpreter lives is an installation option, other places are possible; check with your local Python guru or system administrator. (E.g., /usr/local/python is a popular alternative location.</description>
    </item>
    
    <item>
      <title>Python Programming Language</title>
      <link>https://dhanoopbhaskar.github.io/posts/2011-09-19-python-programming-language/</link>
      <pubDate>Mon, 19 Sep 2011 15:48:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/posts/2011-09-19-python-programming-language/</guid>
      <description>Python is a programming language that lets you work more quickly and integrate your systems more effectively.
 Python runs on Windows, Linux/Unix, Mac OS X, and has been ported to the Java and .NET virtual machines. Python is free to use, even for commercial products, because of its OSI-approved open source license.  Download Python from here &amp;hellip;</description>
    </item>
    
  </channel>
</rss>