<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C/CPP on The Insane Techie</title>
    <link>https://dhanoopbhaskar.github.io/tags/c/cpp/</link>
    <description>Recent content in C/CPP on The Insane Techie</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 14 Feb 2016 01:23:00 +0530</lastBuildDate>
    <atom:link href="https://dhanoopbhaskar.github.io/tags/c/cpp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DNS Lookup - Implementation in C</title>
      <link>https://dhanoopbhaskar.github.io/posts/2016-02-14-dns-lookup-implementation-in-c/</link>
      <pubDate>Sun, 14 Feb 2016 01:23:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2016-02-14-dns-lookup-implementation-in-c/</guid>
      <description>&lt;p&gt;Read about DNS&#xA;&lt;a href=&#34;https://en.wikipedia.org/wiki/Domain_Name_System&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&amp;hellip;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;DNS Lookup - Implementation in C&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/**dnsclient.c**/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;stdio.h&amp;#34;  &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;stdlib.h&amp;#34;  &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;sys/types.h&amp;#34;  &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;sys/socket.h&amp;#34;  &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;string.h&amp;#34;  &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;netinet/in.h&amp;#34;  &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;netdb.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;arpa/inet.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#define BUF_SIZE 512&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#define SERVER &amp;#34;8.8.8.8&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#define PORT 53&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#define WIDTH 16&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;createSocket&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;createRequest&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; url);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hexdump&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;desc, &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;addr, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; len);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lookUp&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; query {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt; length;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; url;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; request[BUF_SIZE];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt; reqType;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; query dnsQuery &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    .length &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    .url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    .reqType &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    .request &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color:#ae81ff&#34;&gt;0xDB&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x42&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; argv) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; url;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (argc &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;fprintf&lt;/span&gt;(stderr,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;usage: %s hostnameToResolve&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;createRequest&lt;/span&gt;(url);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;lookUp&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;createSocket&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sockfd;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        sockfd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;socket&lt;/span&gt;(AF_INET, SOCK_DGRAM, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (sockfd &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error creating socket!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//printf(&amp;#34;Socket created...\n&amp;#34;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sockfd;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;createRequest&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; url) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; word;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Asking DNS server %s about %s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, SERVER, url);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dnsQuery.url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strdup&lt;/span&gt;(url);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dnsQuery.reqType &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        word &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strtok&lt;/span&gt;(url, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (word) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;parsing hostname: &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; is %d characters&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, word, &lt;span style=&#34;color:#a6e22e&#34;&gt;strlen&lt;/span&gt;(word));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            dnsQuery.request[dnsQuery.length&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strlen&lt;/span&gt;(word);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strlen&lt;/span&gt;(word); i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                dnsQuery.request[dnsQuery.length&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; word[i];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            word &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strtok&lt;/span&gt;(NULL, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dnsQuery.request[dnsQuery.length&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// End of the host name&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        dnsQuery.request[dnsQuery.length&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// 0x0001 - Query is a Type A query (host address)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        dnsQuery.request[dnsQuery.length&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dnsQuery.reqType;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dnsQuery.request[dnsQuery.length&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// 0x0001 - Query is class IN (Internet address)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        dnsQuery.request[dnsQuery.length&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// http://stackoverflow.com/questions/7775991/how-to-get-hexdump-of-a-structure-data&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hexdump&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;desc, &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;addr, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; len) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buff[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; addr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Output description if given.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (desc &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; NULL)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, desc);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Process every byte in the data.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// Multiple of 16 means new line (with line offset).&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;// Just don&amp;#39;t print ASCII for the zeroth line.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  %s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, buff);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;// Output the offset.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  %04x &amp;#34;&lt;/span&gt;, i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// Now the hex code for the specific character.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; %02x&amp;#34;&lt;/span&gt;, pc[i]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// And store a printable ASCII character for later.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((pc[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; (pc[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7e&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                buff[i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                buff[i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pc[i];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            buff[(i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Pad out last line if not exactly 16 characters.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ((i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;   &amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// And print the final ASCII bit.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  %s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, buff);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lookUp&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr_in addr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; socket;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ret, rcode, size, i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ip &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, dom &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; length;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buffer[BUF_SIZE];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; tempBuf[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt; QDCOUNT; &lt;span style=&#34;color:#75715e&#34;&gt;//No. of items in Question Section&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt; ANCOUNT; &lt;span style=&#34;color:#75715e&#34;&gt;//No. of items in Answer Section&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt; NSCOUNT; &lt;span style=&#34;color:#75715e&#34;&gt;//No. of items in Authority Section&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt; ARCOUNT; &lt;span style=&#34;color:#75715e&#34;&gt;//No. of items in Additional Section&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt; QCLASS; &lt;span style=&#34;color:#75715e&#34;&gt;//Specifies the class of the query&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt; ATYPE; &lt;span style=&#34;color:#75715e&#34;&gt;//Specifies the meaning of the data in the RDATA field&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt; ACLASS; &lt;span style=&#34;color:#75715e&#34;&gt;//Specifies the class of the data in the RDATA field&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; TTL; &lt;span style=&#34;color:#75715e&#34;&gt;//The number of seconds the results can be cached&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt; RDLENGTH; &lt;span style=&#34;color:#75715e&#34;&gt;//The length of the RDATA field&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt; MSGID;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        socket &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;createSocket&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;memset&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;addr, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(addr));  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        addr.sin_family &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AF_INET;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        addr.sin_addr.s_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;inet_addr&lt;/span&gt;(SERVER);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        addr.sin_port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;htons&lt;/span&gt;(PORT);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(addr);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;hexdump&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sending packet&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;dnsQuery.request, dnsQuery.length);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sendto&lt;/span&gt;(socket, dnsQuery.request, dnsQuery.length, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, (&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;addr, size);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ret &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error Sending Request&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//printf(&amp;#34;Sent\n&amp;#34;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;memset&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;buffer, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, BUF_SIZE);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;recvfrom&lt;/span&gt;(socket, buffer, BUF_SIZE, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, (&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;addr, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;size);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ret &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error Receiving Response&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }   &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;hexdump&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;received packet&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;buffer, ret);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;close&lt;/span&gt;(socket);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        rcode &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (buffer[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0F&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//tempBuf[0] = buffer[4];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//tempBuf[1] = buffer[5];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//tempBuf[2] = &amp;#39;\0&amp;#39;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//printf(&amp;#34;%0x %0x %0x %0x\n&amp;#34;, buffer[4], buffer[5], tempBuf[0], tempBuf[1]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//QDCOUNT = (uint16_t) strtol(tempBuf, NULL, 16);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        QDCOUNT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt;)  buffer[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; buffer[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;entries in question section: %u&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, QDCOUNT);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ANCOUNT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt;)  buffer[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; buffer[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;records in answer section: %u&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, ANCOUNT);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        NSCOUNT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt;)  buffer[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; buffer[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name server resource record count: %u&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, NSCOUNT);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ARCOUNT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt;)  buffer[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; buffer[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;additional records count: %u&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, ARCOUNT);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;query type: %u&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, dnsQuery.reqType);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        QCLASS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt;) dnsQuery.request[dnsQuery.length &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dnsQuery.request[dnsQuery.length &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;query class: %u&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, QCLASS);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        length &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dnsQuery.length &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;    &lt;span style=&#34;color:#75715e&#34;&gt;// to skip 0xc00c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        ATYPE &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt;) buffer[length &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; buffer[length &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;answer type: %u&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, ATYPE);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ACLASS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt;) buffer[length &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; buffer[length &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;answer class: %u&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, ACLASS);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TTL &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt;) buffer[length &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1000000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; buffer[length &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; buffer[length &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; buffer[length &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;seconds to cache: %u&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, TTL);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        RDLENGTH &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt;) buffer[length &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; buffer[length &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bytes in answer: %u&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, RDLENGTH);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        MSGID &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt;) buffer[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; buffer[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;answer msg id: %u&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, MSGID);   &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (rcode &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nameserver %s returned SERVFAIL:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, SERVER);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  the name server was unable to process this query due to a&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  problem with the name server.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (rcode &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nameserver %s returned NXDOMAIN for %s:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, SERVER, dnsQuery.url);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  the domain name referenced in the query does not exist&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;/* search for and print IPv4 addresses */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (dnsQuery.reqType &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DNS server&amp;#39;s answer is: (type#=%u):&amp;#34;&lt;/span&gt;, ATYPE);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;//printf(&amp;#34;IPv4 address(es) for %s:\n&amp;#34;, dnsQuery.url);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; ; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; ret ; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (buffer[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; buffer[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    ip&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* ! += buf[i+1]; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; %u.%u.%u.%u&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, buffer[i], buffer[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], buffer[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;], buffer[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;ip) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  No IPv4 address found in the DNS response!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Sum of Prime Numbers Between 1000000 and 1000100 Using Sieve of Eratosthenes</title>
      <link>https://dhanoopbhaskar.github.io/posts/2014-12-30-sum-of-prime-numbers-between-1000000-and-1000100-using-sieve-of-eratosthenes/</link>
      <pubDate>Tue, 30 Dec 2014 09:36:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2014-12-30-sum-of-prime-numbers-between-1000000-and-1000100-using-sieve-of-eratosthenes/</guid>
      <description>&lt;p&gt;For more information on &lt;code&gt;Sieve of Eratosthenes&lt;/code&gt; please refer &lt;a href=&#34;http://en.wikipedia.org/wiki/Sieve%5c_of%5c_Eratosthenes&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wikipedia page&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;stdio.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;string.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;stdlib.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;assert.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; biggerint;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findPrimeNumbers&lt;/span&gt;(biggerint start, biggerint end) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; primeList &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;malloc&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (end &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     biggerint sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;assert&lt;/span&gt;(primeList &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; NULL);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;/* set prime status */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; end &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(primeList &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; i) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     primeList[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     primeList[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;/* mark all the non-prime numbers */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     biggerint currentFactor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     biggerint lastSquare &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     biggerint currentSquare &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (currentFactor &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; currentFactor &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; end) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;/* mark all the multiples of the current factor */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      biggerint mark &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; currentFactor &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; currentFactor;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (mark &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; end) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(primeList &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; mark) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       mark &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; currentFactor;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;/* set currentFactor to next prime number */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      currentFactor&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(primeList&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;currentFactor) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) currentFactor&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;assert&lt;/span&gt;(currentFactor &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; end);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; start; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; end ; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(primeList &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; i)) sum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;free&lt;/span&gt;(primeList);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%llu&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, sum);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;argv[]) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     biggerint start &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000000&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     biggerint end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000100&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;findPrimeNumbers&lt;/span&gt;(start, end);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>A simple HTTP client and a server in C</title>
      <link>https://dhanoopbhaskar.github.io/posts/2014-02-13-a-simple-http-client-and-a-server-in-c/</link>
      <pubDate>Thu, 13 Feb 2014 23:06:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2014-02-13-a-simple-http-client-and-a-server-in-c/</guid>
      <description>&lt;p&gt;&lt;em&gt;The HTTP server sends the files requested by the client, if it is available at the server. The HTTP client uses GET method for requesting files from the server. Only .html, .txt and .pdf files are implemented. On receiving the file, the client program opens it using firefox or gedit or acrobat reader, as per the file type. Note that the given programs were done in Linux (Debian) environment.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;httpserver.c&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>A simple chat program in C (TCP)</title>
      <link>https://dhanoopbhaskar.github.io/posts/2014-01-22-a-simple-chat-program-in-c-tcp/</link>
      <pubDate>Wed, 22 Jan 2014 20:26:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2014-01-22-a-simple-chat-program-in-c-tcp/</guid>
      <description>&lt;p&gt;&lt;strong&gt;tcpserver.c&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;stdio.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;stdlib.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;sys/types.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;sys/socket.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;string.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;netinet/in.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;pthread.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#define PORT 4444&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#define BUF_SIZE 2000&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#define CLADDR_LEN 100&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;receiveMessage&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; socket) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sockfd, ret;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buffer[BUF_SIZE]; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     sockfd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) socket;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;memset&lt;/span&gt;(buffer, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, BUF_SIZE);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (;;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;recvfrom&lt;/span&gt;(sockfd, buffer, BUF_SIZE, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, NULL, NULL);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ret &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error receiving data!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;client: &amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#a6e22e&#34;&gt;fputs&lt;/span&gt;(buffer, stdout);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#75715e&#34;&gt;//printf(&amp;#34;\n&amp;#34;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      }  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr_in addr, cl_addr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sockfd, len, ret, newsockfd;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buffer[BUF_SIZE];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;pid_t&lt;/span&gt; childpid;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; clientAddr[CLADDR_LEN];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;pthread_t&lt;/span&gt; rThread;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     sockfd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;socket&lt;/span&gt;(AF_INET, SOCK_STREAM, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (sockfd &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error creating socket!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Socket created...&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;memset&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;addr, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(addr));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     addr.sin_family &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AF_INET;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     addr.sin_addr.s_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; INADDR_ANY;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     addr.sin_port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PORT;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bind&lt;/span&gt;(sockfd, (&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;addr, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(addr));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ret &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error binding!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Binding done...&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Waiting for a connection...&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;listen&lt;/span&gt;(sockfd, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(cl_addr);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     newsockfd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;accept&lt;/span&gt;(sockfd, (&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;cl_addr, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;len);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (newsockfd &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error accepting connection!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     } &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;inet_ntop&lt;/span&gt;(AF_INET, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;(cl_addr.sin_addr), clientAddr, CLADDR_LEN);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Connection accepted from %s...&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, clientAddr); &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;memset&lt;/span&gt;(buffer, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, BUF_SIZE);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enter your messages one by one and press return key!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;//creating a new thread for receiving messages from the client&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;     ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pthread_create&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;rThread, NULL, receiveMessage, (&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) newsockfd);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ret) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ERROR: Return Code from pthread_create() is %d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, ret);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;fgets&lt;/span&gt;(buffer, BUF_SIZE, stdin) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; NULL) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sendto&lt;/span&gt;(newsockfd, buffer, BUF_SIZE, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, (&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;cl_addr, len);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ret &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error sending data!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }   &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;close&lt;/span&gt;(newsockfd);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;close&lt;/span&gt;(sockfd);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;pthread_exit&lt;/span&gt;(NULL);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;p&gt;&lt;strong&gt;tcpclient.c&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>TCP in C (one server and multiple clients) </title>
      <link>https://dhanoopbhaskar.github.io/posts/2014-01-16-tcp-in-c-one-server-and-multiple-clients/</link>
      <pubDate>Thu, 16 Jan 2014 21:12:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2014-01-16-tcp-in-c-one-server-and-multiple-clients/</guid>
      <description>&lt;p&gt;&lt;strong&gt;tcpserver.c&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;stdio.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;stdlib.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;sys/types.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;sys/socket.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;string.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;netinet/in.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#define PORT 4444&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#define BUF_SIZE 2000&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#define CLADDR_LEN 100&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr_in addr, cl_addr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sockfd, len, ret, newsockfd;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buffer[BUF_SIZE];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;pid_t&lt;/span&gt; childpid;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; clientAddr[CLADDR_LEN];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     sockfd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;socket&lt;/span&gt;(AF_INET, SOCK_STREAM, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (sockfd &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error creating socket!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Socket created...&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;memset&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;addr, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(addr));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     addr.sin_family &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AF_INET;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     addr.sin_addr.s_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; INADDR_ANY;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     addr.sin_port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PORT;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bind&lt;/span&gt;(sockfd, (&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;addr, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(addr));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ret &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error binding!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Binding done...&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Waiting for a connection...&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;listen&lt;/span&gt;(sockfd, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (;;) { &lt;span style=&#34;color:#75715e&#34;&gt;//infinite loop&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(cl_addr);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      newsockfd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;accept&lt;/span&gt;(sockfd, (&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;cl_addr, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;len);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (newsockfd &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error accepting connection!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Connection accepted...&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;inet_ntop&lt;/span&gt;(AF_INET, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;(cl_addr.sin_addr), clientAddr, CLADDR_LEN);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((childpid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fork&lt;/span&gt;()) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) { &lt;span style=&#34;color:#75715e&#34;&gt;//creating a child process&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#a6e22e&#34;&gt;close&lt;/span&gt;(sockfd); &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//stop listening for new connections by the main process. &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//the child will continue to listen. &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//the main process now handles the connected client.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (;;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;memset&lt;/span&gt;(buffer, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, BUF_SIZE);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;recvfrom&lt;/span&gt;(newsockfd, buffer, BUF_SIZE, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, (&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;cl_addr, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;len);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(ret &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error receiving data!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Received data from %s: %s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, clientAddr, buffer); &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sendto&lt;/span&gt;(newsockfd, buffer, BUF_SIZE, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, (&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;cl_addr, len);   &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ret &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error sending data!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sent data to %s: %s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, clientAddr, buffer);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;close&lt;/span&gt;(newsockfd);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;p&gt;&lt;strong&gt;tcpclient.c&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Socket Programming in C, TCP over a network (2 systems)</title>
      <link>https://dhanoopbhaskar.github.io/posts/2014-01-16-socket-programming-in-c-tcp-over-a-network-2-systems/</link>
      <pubDate>Thu, 16 Jan 2014 20:53:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2014-01-16-socket-programming-in-c-tcp-over-a-network-2-systems/</guid>
      <description>&lt;p&gt;&lt;strong&gt;tcpserver.c&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;stdio.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;stdlib.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;sys/types.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;sys/socket.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;string.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;netinet/in.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#define PORT 4444&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#define BUF_SIZE 2000&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr_in addr, cl_addr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sockfd, len, ret, newsockfd;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buffer[BUF_SIZE];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     sockfd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;socket&lt;/span&gt;(AF_INET, SOCK_STREAM, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (sockfd &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error creating socket!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Socket created...&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;memset&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;addr, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(addr));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     addr.sin_family &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AF_INET;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     addr.sin_addr.s_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; INADDR_ANY;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     addr.sin_port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PORT;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bind&lt;/span&gt;(sockfd, (&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;addr, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(addr));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ret &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error binding!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Binding done...&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Waiting for a connection...&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;listen&lt;/span&gt;(sockfd, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(cl_addr);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     newsockfd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;accept&lt;/span&gt;(sockfd, (&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;cl_addr, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;len);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (newsockfd &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error accepting connection!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Connection accepted...&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;); &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;memset&lt;/span&gt;(buffer, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, BUF_SIZE);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;recv&lt;/span&gt;(newsockfd, buffer, BUF_SIZE, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(ret &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error receiving data!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Received data: %s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, buffer); &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(newsockfd, buffer, &lt;span style=&#34;color:#a6e22e&#34;&gt;strlen&lt;/span&gt;(buffer), &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ret &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error sending data!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sent data: %s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, buffer);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;close&lt;/span&gt;(sockfd);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;close&lt;/span&gt;(newsockfd);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;p&gt;&lt;strong&gt;tcpclient.c&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Socket Programming In C (TCP)</title>
      <link>https://dhanoopbhaskar.github.io/posts/2014-01-05-socket-programming-in-c-tcp/</link>
      <pubDate>Sun, 05 Jan 2014 01:03:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2014-01-05-socket-programming-in-c-tcp/</guid>
      <description>&lt;p&gt;&lt;strong&gt;tcpserver.c&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;stdio.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;stdlib.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;sys/types.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;sys/socket.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;string.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;netinet/in.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#define PORT 4444&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#define BUF_SIZE 20&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr_in addr, cl_addr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sockfd, len, ret, newsockfd;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buffer[BUF_SIZE];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     sockfd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;socket&lt;/span&gt;(AF_INET, SOCK_STREAM, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (sockfd &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error creating socket!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Socket created...&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;memset&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;addr, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(addr));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     addr.sin_family &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AF_INET;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     addr.sin_addr.s_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; INADDR_ANY;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     addr.sin_port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PORT;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bind&lt;/span&gt;(sockfd, (&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;addr, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(addr));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ret &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error binding!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Binding done...&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Waiting for a connection...&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;listen&lt;/span&gt;(sockfd, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(cl_addr);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     newsockfd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;accept&lt;/span&gt;(sockfd, (&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;cl_addr, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;len);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (newsockfd &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error accepting connection!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Connection accepted...&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;); &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;memset&lt;/span&gt;(buffer, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, BUF_SIZE);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;recv&lt;/span&gt;(newsockfd, buffer, BUF_SIZE, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(ret &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error receiving data!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Received data: %s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, buffer); &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;p&gt;&lt;strong&gt;tcpclient.c&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using Turbo C&#43;&#43; in Windows 7 along with graphics support</title>
      <link>https://dhanoopbhaskar.github.io/posts/2010-12-12-using-turbo-c-in-windows-7-along-with-graphics-support/</link>
      <pubDate>Sun, 12 Dec 2010 13:36:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2010-12-12-using-turbo-c-in-windows-7-along-with-graphics-support/</guid>
      <description>&lt;h3 id=&#34;dosbox&#34;&gt;&#xA;  DOSBox&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#dosbox&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Use dosbox to mount and run TC.EXE&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://space.dl.sourceforge.net/project/dosbox/dosbox/0.74/DOSBox0.74-win32-installer.exe&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Download DOSBox here&amp;hellip;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Mounting&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;Z:\&amp;gt;MOUNT C &amp;quot;PATH OF BIN&amp;quot;&#xA;Z:\&amp;gt;C:&#xA;C:\&amp;gt;TC &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;[TURBO C++ IDE opens]&lt;/p&gt;&#xA;&lt;p&gt;NB:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;You can include the codes for mounting and running in -&#xA;&lt;code&gt;C:\\Users\\username\\AppData\\Local\\DOSBox\\dosbox-0.74.conf&lt;/code&gt; - file at its end as autoexecute commands on startup; so that it will be executed automatically on every startup of DOSBox.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;To run in fullscreen mode edit the .conf file mentioned above and&#xA;change &amp;ldquo;fullscreen=false&amp;rdquo; to &amp;ldquo;fullscreen=true&amp;rdquo;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Simulate a car in C</title>
      <link>https://dhanoopbhaskar.github.io/posts/2010-12-12-simulate-a-car-in-c/</link>
      <pubDate>Sun, 12 Dec 2010 12:52:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2010-12-12-simulate-a-car-in-c/</guid>
      <description>&lt;pre&gt;&lt;code&gt;/*&#xA;* Control keys are:&#xA;* f-&amp;gt; forward&#xA;* b-&amp;gt; backward&#xA;* 0-&amp;gt; brake&#xA;* 1,2,3,4-&amp;gt; gears&#xA;*/&#xA;&#xA;#include&amp;lt;stdio.h&amp;gt;&#xA;#include&amp;lt;conio.h&amp;gt;&#xA;#include&amp;lt;graphics.h&amp;gt;&#xA;#include&amp;lt;math.h&amp;gt;&#xA;void main() {&#xA;    int gdriver = DETECT, gmode;&#xA;    int xc = 0, yc = 285, r = 15, a = 0, i, x1, y1, x2, y2, mode = 1, dtime = 75;&#xA;    int x3, x4, y3, y4;&#xA;    int kb = &#39;f&#39;;&#xA;    initgraph( &amp;amp; gdriver, &amp;amp; gmode, &amp;quot;c:\\tc\\bgi&amp;quot;);&#xA;    cleardevice();&#xA;    while (1) {&#xA;        if (kbhit()) {&#xA;            kb = getch();&#xA;            if (kb == &#39;q&#39;) {&#xA;                cleardevice();&#xA;                printf(&amp;quot;\n You are about to quit...press any key...&amp;quot;);&#xA;                getch();&#xA;                exit(0);&#xA;            }&#xA;            if (kb == &#39;b&#39;) {&#xA;                mode = 0;&#xA;            }&#xA;            if (kb == &#39;f&#39;) {&#xA;                mode = 1;&#xA;            }&#xA;            if (kb == &#39;1&#39;) {&#xA;                dtime = 80;&#xA;            }&#xA;            if (kb == &#39;2&#39;) {&#xA;                dtime = 60;&#xA;            }&#xA;            if (kb == &#39;3&#39;) {&#xA;                dtime = 40;&#xA;            }&#xA;            if (kb == &#39;4&#39;) {&#xA;                dtime = 20;&#xA;            }&#xA;            if (kb == &#39;0&#39;) {&#xA;                mode = 2;&#xA;                continue;&#xA;            }&#xA;        }&#xA;&#xA;        if (mode != 2) {&#xA;            cleardevice();&#xA;        }&#xA;&#xA;        line(0, 300, 640, 300);&#xA;&#xA;        if (mode == 0) //reverse&#xA;        {&#xA;            setcolor(9);&#xA;            /*wheels*/&#xA;            circle(xc, yc, r);&#xA;            circle(xc + 100, yc, r);&#xA;            /*body*/&#xA;            line(xc - 35, yc, xc - 15, yc);&#xA;            line(xc + 15, yc, xc + 85, yc);&#xA;            line(xc + 115, yc, xc + 135, yc);&#xA;            line(xc - 35, yc, xc - 35, yc - 25);&#xA;            line(xc + 135, yc, xc + 135, yc - 25);&#xA;&#xA;            line(xc - 35, yc - 25, xc, yc - 30);&#xA;            line(xc + 135, yc - 25, xc + 100, yc - 30);&#xA;&#xA;            line(xc, yc - 30, xc + 15, yc - 50);&#xA;            line(xc + 100, yc - 30, xc + 85, yc - 50);&#xA;&#xA;            line(xc + 15, yc - 50, xc + 85, yc - 50);&#xA;            /*glasses*/&#xA;            line(xc + 6, yc - 30, xc + 18, yc - 47);&#xA;            line(xc + 18, yc - 47, xc + 18, yc - 30);&#xA;            line(xc + 6, yc - 30, xc + 18, yc - 30);&#xA;&#xA;            line(xc + 94, yc - 30, xc + 82, yc - 47);&#xA;            line(xc + 82, yc - 47, xc + 82, yc - 30);&#xA;            line(xc + 94, yc - 30, xc + 82, yc - 30);&#xA;&#xA;            line(xc + 21, yc - 47, xc + 21, yc - 30);&#xA;            line(xc + 21, yc - 47, xc + 48, yc - 47);&#xA;            line(xc + 21, yc - 30, xc + 48, yc - 30);&#xA;            line(xc + 48, yc - 30, xc + 48, yc - 47);&#xA;&#xA;            line(xc + 79, yc - 47, xc + 79, yc - 30);&#xA;            line(xc + 79, yc - 47, xc + 52, yc - 47);&#xA;            line(xc + 79, yc - 30, xc + 52, yc - 30);&#xA;            line(xc + 52, yc - 30, xc + 52, yc - 47);&#xA;&#xA;            for (i = 0; i &amp;lt; 4; i++) {&#xA;                x1 = xc + (r * cos(a));&#xA;                y1 = yc + (r * sin(a));&#xA;                x2 = xc - (r * cos(a));&#xA;                y2 = yc - (r * sin(a));&#xA;                x3 = (xc + 100) + (r * cos(a));&#xA;                y3 = yc + (r * sin(a));&#xA;                x4 = (xc + 100) - (r * cos(a));&#xA;                y4 = yc - (r * sin(a));&#xA;                line(x1, y1, x2, y2);&#xA;                line(x3, y3, x4, y4);&#xA;                a += 90;&#xA;&#xA;            }&#xA;            xc -= 1;&#xA;            delay(dtime);&#xA;        }&#xA;&#xA;        /*forward*/&#xA;        if (mode == 1) {&#xA;            setcolor(9);&#xA;            /*wheels*/&#xA;            circle(xc, yc, r);&#xA;            circle(xc + 100, yc, r);&#xA;            /*body*/&#xA;            line(xc - 35, yc, xc - 15, yc);&#xA;            line(xc + 15, yc, xc + 85, yc);&#xA;            line(xc + 115, yc, xc + 135, yc);&#xA;            line(xc - 35, yc, xc - 35, yc - 25);&#xA;            line(xc + 135, yc, xc + 135, yc - 25);&#xA;&#xA;            line(xc - 35, yc - 25, xc, yc - 30);&#xA;            line(xc + 135, yc - 25, xc + 100, yc - 30);&#xA;&#xA;            line(xc, yc - 30, xc + 15, yc - 50);&#xA;            line(xc + 100, yc - 30, xc + 85, yc - 50);&#xA;&#xA;            line(xc + 15, yc - 50, xc + 85, yc - 50);&#xA;            /*glasses*/&#xA;            line(xc + 6, yc - 30, xc + 18, yc - 47);&#xA;            line(xc + 18, yc - 47, xc + 18, yc - 30);&#xA;            line(xc + 6, yc - 30, xc + 18, yc - 30);&#xA;&#xA;            line(xc + 94, yc - 30, xc + 82, yc - 47);&#xA;            line(xc + 82, yc - 47, xc + 82, yc - 30);&#xA;            line(xc + 94, yc - 30, xc + 82, yc - 30);&#xA;&#xA;            line(xc + 21, yc - 47, xc + 21, yc - 30);&#xA;            line(xc + 21, yc - 47, xc + 48, yc - 47);&#xA;            line(xc + 21, yc - 30, xc + 48, yc - 30);&#xA;            line(xc + 48, yc - 30, xc + 48, yc - 47);&#xA;&#xA;&#xA;            line(xc + 79, yc - 47, xc + 79, yc - 30);&#xA;            line(xc + 79, yc - 47, xc + 52, yc - 47);&#xA;            line(xc + 79, yc - 30, xc + 52, yc - 30);&#xA;            line(xc + 52, yc - 30, xc + 52, yc - 47);&#xA;&#xA;            for (i = 0; i &amp;lt; 4; i++) {&#xA;                x1 = xc + (r * cos(-a));&#xA;                y1 = yc + (r * sin(-a));&#xA;                x2 = xc - (r * cos(-a));&#xA;                y2 = yc - (r * sin(-a));&#xA;                x3 = (xc + 100) + (r * cos(-a));&#xA;                y3 = yc + (r * sin(-a));&#xA;                x4 = (xc + 100) - (r * cos(-a));&#xA;                y4 = yc - (r * sin(-a));&#xA;                line(x1, y1, x2, y2);&#xA;                line(x3, y3, x4, y4);&#xA;                a += 90;&#xA;            }&#xA;            xc += 1;&#xA;            delay(dtime);&#xA;&#xA;        }&#xA;&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Catching a fish in C</title>
      <link>https://dhanoopbhaskar.github.io/posts/2010-11-18-catching-a-fish-in-c/</link>
      <pubDate>Thu, 18 Nov 2010 18:49:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2010-11-18-catching-a-fish-in-c/</guid>
      <description>&lt;pre&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt; &#xA;#include&amp;lt;conio.h&amp;gt; &#xA;#include&amp;lt;graphics.h&amp;gt;&#xA;void fish();&#xA;void fishcatch();&#xA;int fishx = 0, fishy = 460, fishang = 0, tempx, tempy, fishx2 = 350, fishy2 = 400;&#xA;void main() {&#xA;    int gdriver = DETECT, gmode, errorcode;&#xA;    int x, y, ch, yincr = 0;&#xA;    initgraph( &amp;amp; gdriver, &amp;amp; gmode, &amp;quot;&amp;quot;);&#xA;    errorcode = graphresult();&#xA;    if (errorcode != grOk) {&#xA;        printf(&amp;quot;Graphics error: %s\n&amp;quot;, grapherrormsg(errorcode));&#xA;        printf(&amp;quot;Press any key to halt:&amp;quot;);&#xA;        getch();&#xA;        exit(1);&#xA;    }&#xA;    x = 350;&#xA;    y = 240;&#xA;&#xA;    while (!kbhit()) {&#xA;        rectangle(-1, 240, 641, 481);&#xA;        setfillstyle(1, BLUE);&#xA;        floodfill(1, 241, 15);&#xA;        line(x, y, x + 100, y);&#xA;        line(x + 100, y, x + 130, y - 20);&#xA;        line(x, y, x - 30, y - 20);&#xA;        line(x - 30, y - 20, x + 130, y - 20);&#xA;        setfillstyle(1, BROWN);&#xA;        floodfill(x + 1, y - 1, 15);&#xA;        arc(x + 50, y - 20, 0, 180, 15);&#xA;        setfillstyle(1, RED);&#xA;        floodfill(x + 50, y - 21, 15);&#xA;        circle(x + 50, y - 40, 6);&#xA;        setfillstyle(1, LIGHTGRAY);&#xA;        floodfill(x + 50, y - 41, 15);&#xA;        delay(50);&#xA;        cleardevice();&#xA;        if (x &amp;gt;= 300)&#xA;            x = x - 1;&#xA;        else if (y + yincr &amp;lt;= 400) {&#xA;            if (fishx &amp;lt; 330)&#xA;                yincr++;&#xA;        }&#xA;        line(x + 40, y, x + 50, y + yincr);&#xA;&#xA;        if (x &amp;lt;= 350) {&#xA;            fishx++;&#xA;            if (fishx &amp;gt;= 330) {&#xA;                if (yincr &amp;gt;= 0) {&#xA;                    fishcatch();&#xA;                    fishy2--;&#xA;                    yincr--;&#xA;                } else {&#xA;                    cleardevice();&#xA;                    printf(&amp;quot;Fish curry: Rs.15/-&amp;quot;);&#xA;                    getch();&#xA;                    exit(0);&#xA;                }&#xA;            } else {&#xA;                fish();&#xA;&#xA;                if (y + yincr &amp;gt;= 390)&#xA;                    fishy = fishy - 0.5;&#xA;&#xA;                if (fishy &amp;lt;= 400)&#xA;                    fishy = 400;&#xA;&#xA;                if (fishx &amp;gt;= 330)&#xA;                    fishx = 330;&#xA;            }&#xA;        }&#xA;&#xA;    }&#xA;&#xA;&#xA;    if (kbhit()) {&#xA;        //printf(&amp;quot;%c&amp;quot;,getch());&#xA;    }&#xA;    getch();&#xA;}&#xA;&#xA;&#xA;void fish() {&#xA;    line(fishx, fishy, fishx + 10, fishy - 5);&#xA;    line(fishx, fishy, fishx + 10, fishy + 5);&#xA;    line(fishx + 10, fishy - 5, fishx + 20, fishy);&#xA;    line(fishx + 20, fishy, fishx + 10, fishy + 5);&#xA;    line(fishx, fishy, fishx - 3, fishy - 3);&#xA;    line(fishx - 3, fishy - 3, fishx - 3, fishy + 3);&#xA;    line(fishx - 3, fishy + 3, fishx, fishy);&#xA;    setfillstyle(1, BROWN);&#xA;    floodfill(fishx + 2, fishy, 15);&#xA;    floodfill(fishx - 1, fishy, 15);&#xA;}&#xA;&#xA;void fishcatch() {&#xA;    line(fishx2, fishy2, fishx2 + 5, fishy2 + 10);&#xA;    line(fishx2, fishy2, fishx2 - 5, fishy2 + 10);&#xA;    line(fishx2 + 5, fishy2 + 10, fishx2, fishy2 + 20);&#xA;    line(fishx2 - 5, fishy2 + 10, fishx2, fishy2 + 20);&#xA;    line(fishx2, fishy2, fishx2 + 3, fishy2 + 23);&#xA;    line(fishx2, fishy2, fishx2 - 3, fishy2 + 23);&#xA;    line(fishx2 + 3, fishy2 + 23, fishx2 - 3, fishy2 + 23);&#xA;    setfillstyle(1, BROWN);&#xA;    floodfill(fishx2, fishy2 + 2, 15);&#xA;    floodfill(fishx2, fishy2 + 22, 15);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Sinking of Titanic</title>
      <link>https://dhanoopbhaskar.github.io/posts/2010-11-18-sinking-of-titanic/</link>
      <pubDate>Thu, 18 Nov 2010 18:47:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2010-11-18-sinking-of-titanic/</guid>
      <description>&lt;pre&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;&#xA;#include&amp;lt;conio.h&amp;gt; &#xA;#include&amp;lt;graphics.h&amp;gt;&#xA;void titanic(int, int);&#xA;void titanics(int, int);&#xA;void iceberg();&#xA;int poly[] = {&#xA;    0,&#xA;    300,&#xA;    640,&#xA;    300,&#xA;    640,&#xA;    480,&#xA;    0,&#xA;    480,&#xA;    0,&#xA;    300&#xA;};&#xA;int ix = 1, iy = 1;&#xA;void main() {&#xA;    int gdriver = DETECT, gmode, errorcode;&#xA;    int maxx, maxy;&#xA;    int xincr = 1, yincr = 1, i;&#xA;    int tempx = 400, tempy = 300;&#xA;    int sink = 0;&#xA;    initgraph( &amp;amp; gdriver, &amp;amp; gmode, &amp;quot;c:/tc/bgi&amp;quot;);&#xA;&#xA;    errorcode = graphresult();&#xA;    if (errorcode != grOk) {&#xA;        printf(&amp;quot;Graphics error: %s\n&amp;quot;, grapherrormsg(errorcode));&#xA;        printf(&amp;quot;Press any key to halt:&amp;quot;);&#xA;        getch();&#xA;        exit(1);&#xA;    }&#xA;&#xA;    while (1) {&#xA;        delay(30);&#xA;        cleardevice();&#xA;        iceberg();&#xA;&#xA;        if (sink == 1) {&#xA;            tempy += yincr;&#xA;        } else {&#xA;            tempx -= xincr;&#xA;        }&#xA;&#xA;        if (tempx &amp;lt;= 120) {&#xA;            sink = 1;&#xA;            titanics(tempx, tempy);&#xA;        } else {&#xA;            titanic(tempx, tempy);&#xA;        }&#xA;&#xA;        if (tempy &amp;gt;= 600)&#xA;            break;&#xA;    }&#xA;    getch();&#xA;}&#xA;&#xA;void titanic(int x, int y) {&#xA;    setcolor(15);&#xA;    line(x, y, x + 100, y);&#xA;    line(x, y, x - 20, y - 20);&#xA;    line(x - 20, y - 20, x + 120, y - 20);&#xA;    line(x + 120, y - 20, x + 100, y);&#xA;    rectangle(x + 10, y - 30, x + 90, y - 20);&#xA;    rectangle(x + 20, y - 40, x + 80, y - 30);&#xA;    rectangle(x + 60, y - 70, x + 70, y - 40);&#xA;}&#xA;&#xA;void titanics(int x, int y) {&#xA;    setcolor(15);&#xA;    line(x, y, x + 100, y - 10);&#xA;    line(x, y, x - 20, y - 30);&#xA;    line(x - 20, y - 20, x + 120, y - 30);&#xA;    line(x + 120, y - 20, x + 100, y - 10);&#xA;    rectangle(x + 10, y - 30, x + 90, y - 10);&#xA;    rectangle(x + 20, y - 40, x + 80, y - 10);&#xA;    rectangle(x + 60, y - 70, x + 70, y - 10);&#xA;}&#xA;&#xA;void iceberg() {&#xA;    setcolor(BLUE);&#xA;    setfillstyle(1, BLUE);&#xA;    fillpoly(4, poly);&#xA;    setfillstyle(1, WHITE);&#xA;    fillellipse(0, 300, 100, 100);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Sunset in C</title>
      <link>https://dhanoopbhaskar.github.io/posts/2010-11-18-sunset-in-c/</link>
      <pubDate>Thu, 18 Nov 2010 18:46:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2010-11-18-sunset-in-c/</guid>
      <description>&lt;pre&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;&#xA;#include&amp;lt;conio.h&amp;gt;&#xA;#include&amp;lt;graphics.h&amp;gt;&#xA;void main() {&#xA;    int gdriver = DETECT, gmode, errorcode;&#xA;    int midx, midy, radius = 40;&#xA;    initgraph( &amp;amp; gdriver, &amp;amp; gmode, &amp;quot;c:/tc/bgi&amp;quot;);&#xA;    errorcode = graphresult();&#xA;    if (errorcode != grOk) {&#xA;        printf(&amp;quot;Graphics error: %s\n&amp;quot;, grapherrormsg(errorcode));&#xA;        printf(&amp;quot;Press any key to halt:&amp;quot;);&#xA;        getch();&#xA;        exit(1);&#xA;    }&#xA;    midx = getmaxx() / 2;&#xA;    while (radius &amp;gt;= 10) {&#xA;        cleardevice();&#xA;        line(0, 210, 160, 50);&#xA;        setcolor(WHITE);&#xA;        line(160, 50, 320, 210);&#xA;        line(320, 210, 480, 50);&#xA;        line(480, 50, 640, 210);&#xA;        line(0, 210, 640, 210);&#xA;&#xA;        arc(midx, 210, 45, 135, radius);&#xA;        setfillstyle(SOLID_FILL, YELLOW);&#xA;        floodfill(midx, 200, 15);&#xA;        setcolor(BLUE);&#xA;        setfillstyle(SOLID_FILL, LIGHTBLUE);&#xA;        floodfill(2, 2, 15);&#xA;        setfillstyle(SOLID_FILL, BROWN);&#xA;        floodfill(150, 150, 15);&#xA;        floodfill(550, 150, 15);&#xA;        setcolor(15);&#xA;        line(0, 400, 640, 300);&#xA;        setfillstyle(SOLID_FILL, BLUE);&#xA;        floodfill(2, 350, 15);&#xA;        setfillstyle(SOLID_FILL, GREEN);&#xA;        floodfill(2, 410, 15);&#xA;        delay(100);&#xA;        radius -= 1;&#xA;    }&#xA;    if (radius &amp;lt;= 10)&#xA;        cleardevice();&#xA;    getch();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Rotation of Fan in C</title>
      <link>https://dhanoopbhaskar.github.io/posts/2010-11-18-rotation-of-fan-in-c/</link>
      <pubDate>Thu, 18 Nov 2010 18:44:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2010-11-18-rotation-of-fan-in-c/</guid>
      <description>&lt;pre&gt;&lt;code&gt;#include&amp;lt;graphics.h&amp;gt;&#xA;#include&amp;lt;stdio.h&amp;gt;&#xA;#include&amp;lt;stdlib.h&amp;gt;&#xA;#include&amp;lt;conio.h&amp;gt;&#xA;#include&amp;lt;dos.h&amp;gt;&#xA;#include&amp;lt;time.h&amp;gt;&#xA;#include&amp;lt;process.h&amp;gt;&#xA;#include&amp;lt;math.h&amp;gt;&#xA;void user();&#xA;float s1 = 0.0, s2 = 120.0, s3 = 240.0;&#xA;int midx, midy;&#xA;void main() {&#xA;    int gdriver = DETECT, gmode, errorcode;&#xA;    initgraph( &amp;amp; gdriver, &amp;amp; gmode, &amp;quot;C:/TC/BGI&amp;quot;);&#xA;    errorcode = graphresult();&#xA;    if (errorcode != grOk) {&#xA;        printf(&amp;quot;Graphics error: %s\n&amp;quot;, grapherrormsg(errorcode));&#xA;        printf(&amp;quot;Press any key to halt:&amp;quot;);&#xA;        getch();&#xA;        exit(1);&#xA;    }&#xA;    midx = getmaxx() / 2;&#xA;    midy = getmaxy() / 2;&#xA;    loop:&#xA;        cleardevice();&#xA;    circle(midx, midy, 5);&#xA;    setcolor(10);&#xA;    line(midx, midy, (midx + 100 * cos(s1 * 3.14 / 180)), (midy - 95 * sin(s1 * 3.14 / 180)));&#xA;    line(midx, midy, (midx + 100 * cos(s2 * 3.14 / 180)), (midy - 95 * sin(s2 * 3.14 / 180)));&#xA;    line(midx, midy, (midx + 100 * cos(s3 * 3.14 / 180)), (midy - 95 * sin(s3 * 3.14 / 180)));&#xA;    if (!kbhit()) //check for keystroke&#xA;    {&#xA;        s1 += 10;&#xA;        s2 += 10;&#xA;        s3 += 10;&#xA;        delay(25);&#xA;        goto loop;&#xA;    } else //when key press&#xA;    {&#xA;        getch();&#xA;        exit(0);&#xA;    }&#xA;    getch();&#xA;    closegraph();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Sunrise in C</title>
      <link>https://dhanoopbhaskar.github.io/posts/2010-11-18-sunrise-in-c/</link>
      <pubDate>Thu, 18 Nov 2010 18:44:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2010-11-18-sunrise-in-c/</guid>
      <description>&lt;pre&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;&#xA;#include&amp;lt;conio.h&amp;gt;&#xA;#include&amp;lt;graphics.h&amp;gt;&#xA;void main() {&#xA;    int gdriver = DETECT, gmode, errorcode;&#xA;    int midx, midy, radius = 10;&#xA;    initgraph( &amp;amp; gdriver, &amp;amp; gmode, &amp;quot;c:/tc/bgi&amp;quot;);&#xA;    errorcode = graphresult();&#xA;    if (errorcode != grOk) {&#xA;        printf(&amp;quot;Graphics error: %s\n&amp;quot;, grapherrormsg(errorcode));&#xA;        printf(&amp;quot;Press any key to halt:&amp;quot;);&#xA;        getch();&#xA;        exit(1);&#xA;    }&#xA;    midx = getmaxx() / 2;&#xA;    while (radius &amp;lt;= 40) {&#xA;        cleardevice();&#xA;        line(0, 210, 160, 50);&#xA;        setcolor(WHITE);&#xA;        line(160, 50, 320, 210);&#xA;        line(320, 210, 480, 50);&#xA;        line(480, 50, 640, 210);&#xA;        line(0, 210, 640, 210);&#xA;&#xA;        arc(midx, 210, 45, 133, radius);&#xA;        setfillstyle(SOLID_FILL, YELLOW);&#xA;        floodfill(midx, 200, 15);&#xA;        setcolor(BLUE);&#xA;        setfillstyle(SOLID_FILL, LIGHTBLUE);&#xA;        floodfill(2, 2, 15);&#xA;        setfillstyle(SOLID_FILL, BROWN);&#xA;        floodfill(150, 150, 15);&#xA;        floodfill(550, 150, 15);&#xA;        setcolor(15);&#xA;        line(0, 400, 640, 300);&#xA;        setfillstyle(SOLID_FILL, BLUE);&#xA;        floodfill(2, 350, 15);&#xA;        setfillstyle(SOLID_FILL, GREEN);&#xA;        floodfill(2, 410, 15);&#xA;        delay(100);&#xA;        radius += 1;&#xA;    }&#xA;    getch();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Analog Clock in C</title>
      <link>https://dhanoopbhaskar.github.io/posts/2010-11-18-analog-clock-in-c/</link>
      <pubDate>Thu, 18 Nov 2010 18:42:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2010-11-18-analog-clock-in-c/</guid>
      <description>&lt;pre&gt;&lt;code&gt;/*WAP to illustrate an analog clock*/&#xA;#include&amp;lt;graphics.h&amp;gt;&#xA;#include&amp;lt;stdio.h&amp;gt;&#xA;#include&amp;lt;stdlib.h&amp;gt;&#xA;#include&amp;lt;conio.h&amp;gt;&#xA;#include&amp;lt;dos.h&amp;gt;&#xA;#include&amp;lt;time.h&amp;gt;&#xA;#include&amp;lt;process.h&amp;gt;&#xA;#include&amp;lt;math.h&amp;gt;&#xA;void user();&#xA;float h, ma, hour, minute, sec, m, s;&#xA;void main() {&#xA;    int gdriver = DETECT, gmode, errorcode;&#xA;    struct time t;&#xA;    initgraph( &amp;amp; gdriver, &amp;amp; gmode, &amp;quot;C:/TC/BGI&amp;quot;);&#xA;    errorcode = graphresult();&#xA;    if (errorcode != grOk) {&#xA;        printf(&amp;quot;Graphics error: %s\n&amp;quot;, grapherrormsg(errorcode));&#xA;        printf(&amp;quot;Press any key to halt:&amp;quot;);&#xA;        getch();&#xA;        exit(1);&#xA;    }&#xA;    loop:&#xA;        gettime( &amp;amp; t);&#xA;    hour = t.ti_hour;&#xA;    minute = t.ti_min;&#xA;    sec = t.ti_sec;&#xA;    if (hour &amp;gt; 11)&#xA;        hour = hour - 12;&#xA;    h = 90 - (hour * 30 + minute / 12);&#xA;    ma = 90 - (minute * 6);&#xA;    s = 90 - (sec * 6);&#xA;    m = minute - minute / 12;&#xA;    cleardevice();&#xA;    gotoxy(40, 15);&#xA;    printf(&amp;quot;%2.0f:%2.0f:%2.0f&amp;quot;, hour, minute, sec);&#xA;    gotoxy(10, 10);&#xA;    setcolor(15);&#xA;    circle(350, 250, 100);&#xA;    setfillstyle(1, 9);&#xA;    circle(350, 250, 2);&#xA;    circle(350, 250, 10);&#xA;    outtextxy(335, 200, &amp;quot;RADON&amp;quot;);&#xA;    setcolor(RED);&#xA;    outtextxy(346, 160, &amp;quot;12&amp;quot;);&#xA;    outtextxy(346, 340, &amp;quot;6&amp;quot;);&#xA;    outtextxy(425, 247, &amp;quot;3&amp;quot;);&#xA;    outtextxy(260, 247, &amp;quot;9&amp;quot;);&#xA;    setcolor(7);&#xA;    line(350, 250, (350 + 70 * cos(h * 3.14 / 180)), (250 - 70 * sin(h * 3.14 / 180))); //hour hand&#xA;    setcolor(10);&#xA;    line(350, 250, (350 + 90 * cos(s * 3.14 / 180)), (250 - 95 * sin(s * 3.14 / 180))); //second hand&#xA;    setcolor(9);&#xA;    line(350, 250, (350 + 60 * cos(ma * 3.14 / 180)), (250 - 90 * sin(ma * 3.14 / 180))); //minute hand&#xA;    setcolor(8);&#xA;    if (sec &amp;gt; 59) {&#xA;        sec = 0;&#xA;        m++;&#xA;        m = 6;&#xA;        s = s - 90;&#xA;        if (m &amp;gt; 59) {&#xA;            m = 0;&#xA;            h = 6;&#xA;        }&#xA;    }&#xA;    if (!kbhit()) //check for keystroke&#xA;    {&#xA;        sec++;&#xA;        s = s - 6;&#xA;        delay(1000);&#xA;        goto loop;&#xA;    } else //when key press&#xA;    {&#xA;        getch();&#xA;        exit(0);&#xA;    }&#xA;    getch();&#xA;    closegraph();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Mid-point Ellipse Drawing Algorithm</title>
      <link>https://dhanoopbhaskar.github.io/posts/2010-11-18-mid-point-ellipse-drawing-algorithm/</link>
      <pubDate>Thu, 18 Nov 2010 18:41:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2010-11-18-mid-point-ellipse-drawing-algorithm/</guid>
      <description>&lt;pre&gt;&lt;code&gt;#include&amp;lt;graphics.h&amp;gt;&#xA;#include&amp;lt;stdlib.h&amp;gt;&#xA;#include&amp;lt;stdio.h&amp;gt;&#xA;#include&amp;lt;conio.h&amp;gt;&#xA;void ellipsemid(int xcenter, int ycenter, int rx, int ry);&#xA;void point(int x, int xcenter, int ycenter, int y);&#xA;int maxx, maxy, xcenter, ycenter, rx, ry, grok;&#xA;&#xA;void main() {&#xA;    int gdriver = DETECT, errorcode, gmode, a, b, c, d;&#xA;&#xA;    initgraph( &amp;amp; gdriver, &amp;amp; gmode, &amp;quot;c:/tc/bgi&amp;quot;);&#xA;    errorcode = graphresult();&#xA;    if (errorcode != grOk) {&#xA;        printf(&amp;quot;Graphics error: %s\n&amp;quot;, grapherrormsg(errorcode));&#xA;        printf(&amp;quot;Press any key to halt:&amp;quot;);&#xA;        getch();&#xA;        exit(1);&#xA;    }&#xA;&#xA;    clrscr();&#xA;    maxx = getmaxx();&#xA;    maxy = getmaxy();&#xA;    xcenter = 200;&#xA;    ycenter = 200;&#xA;    rx = 50;&#xA;    ry = 50;&#xA;    setcolor(4);&#xA;    ellipsemid(xcenter, ycenter, rx, ry);&#xA;    getch();&#xA;    //closegraph();&#xA;}&#xA;&#xA;&#xA;void ellipsemid(int xcenter, int ycenter, int rx, int ry) {&#xA;    int p, px, py, x, y, ry2, rx2, tworx2, twory2;&#xA;    ry2 = ry * ry;&#xA;    rx2 = rx * rx;&#xA;    twory2 = 2 * ry2;&#xA;    tworx2 = 2 * rx2;&#xA;    x = 0;&#xA;    y = ry;&#xA;    point(x, xcenter, ycenter, y);&#xA;    p = abs(ry2 - ry2 * ry + (0.25 * rx2));&#xA;    px = 0;&#xA;    py = twory2 * y;&#xA;    while (px &amp;lt; py) {&#xA;        x = x + 1;&#xA;        px = px + twory2;&#xA;        if (p &amp;gt;= 0) {&#xA;            y = y - 1;&#xA;            py = py - tworx2;&#xA;        }&#xA;        if (p &amp;lt; 0) {&#xA;            p = p + ry2 + px;&#xA;        } else {&#xA;            p = p + ry2 + px;&#xA;        }&#xA;        point(x, xcenter, ycenter, y);&#xA;    }&#xA;    p = abs(ry2 * (x + 6.5) * (x + 6.5) + rx2 * (y - 1) - rx2 * ry2);&#xA;    while (y &amp;gt; 0) {&#xA;        y = y - 1;&#xA;        py = py - tworx2;&#xA;        if (p &amp;lt; 0) {&#xA;            x = x + 1;&#xA;            px = px + twory2;&#xA;        }&#xA;        if (p &amp;gt; 0) {&#xA;            p = p + rx2 - py;&#xA;        } else {&#xA;            p = p + rx2 - py + px;&#xA;            point(x, xcenter, ycenter, y);&#xA;        }&#xA;    }&#xA;}&#xA;void point(int x, int xcenter, int ycenter, int y) {&#xA;    setcolor(4);&#xA;    putpixel(xcenter + x, ycenter + y, 4);&#xA;    putpixel(xcenter - x, ycenter + y, 4);&#xA;    putpixel(xcenter + x, ycenter - y, 4);&#xA;    putpixel(xcenter - x, ycenter - y, 4);&#xA;    putpixel(xcenter + x, ycenter + y, 4);&#xA;    putpixel(xcenter - x, ycenter + y, 4);&#xA;    putpixel(xcenter + x, ycenter - y, 4);&#xA;    putpixel(xcenter - x, ycenter - y, 4);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Line Clipping in C</title>
      <link>https://dhanoopbhaskar.github.io/posts/2010-11-18-line-clipping-in-c/</link>
      <pubDate>Thu, 18 Nov 2010 18:39:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2010-11-18-line-clipping-in-c/</guid>
      <description>&lt;pre&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;&#xA;#include&amp;lt;conio.h&amp;gt;&#xA;#include&amp;lt;graphics.h&amp;gt;&#xA;int xwmin, ywmin, xwmax, ywmax;&#xA;void rcode(int, int, int[]);&#xA;int check(int[], int[]);&#xA;void main() {&#xA;    int gdriver = DETECT, gmode, errorcode;&#xA;    int x1, y1, x2, y2, code1[4], code2[4], x, y, m;&#xA;    int point[2][2], p = 0;&#xA;    initgraph( &amp;amp; gdriver, &amp;amp; gmode, &amp;quot;c:/tc/bgi&amp;quot;);&#xA;    errorcode = graphresult();&#xA;    if (errorcode != grOk) {&#xA;        printf(&amp;quot;Graphics error: %s\n&amp;quot;, grapherrormsg(errorcode));&#xA;        printf(&amp;quot;Press any key to halt:&amp;quot;);&#xA;        getch();&#xA;        exit(1);&#xA;    }&#xA;    printf(&amp;quot;\n Enter the coordinates of window &amp;quot;);&#xA;    printf(&amp;quot;\n xwmin and ywmin: &amp;quot;);&#xA;    scanf(&amp;quot;%d%d&amp;quot;, &amp;amp; xwmin, &amp;amp; ywmin);&#xA;    printf(&amp;quot;\n xwmax and ywmax: &amp;quot;);&#xA;    scanf(&amp;quot;%d%d&amp;quot;, &amp;amp; xwmax, &amp;amp; ywmax);&#xA;    printf(&amp;quot;\n Enter the coordinates of line &amp;quot;);&#xA;    printf(&amp;quot;\n Enter the coordinate for the first end point of the line: &amp;quot;);&#xA;    scanf(&amp;quot;%d%d&amp;quot;, &amp;amp; x1, &amp;amp; y1);&#xA;    printf(&amp;quot;\n Enter the coordinate for the second end point of the line: &amp;quot;);&#xA;    scanf(&amp;quot;%d%d&amp;quot;, &amp;amp; x2, &amp;amp; y2);&#xA;    rcode(x1, y1, code1);&#xA;    rcode(x2, y2, code2);&#xA;&#xA;    if (check(code1, code2) == 1) {&#xA;        rectangle(xwmin, ywmin, xwmax, ywmax);&#xA;        printf(&amp;quot;1&amp;quot;);&#xA;    } else {&#xA;        m = (y2 - y1) / (x2 - x1);&#xA;        rectangle(xwmin, ywmin, xwmax, ywmax);&#xA;        line(x1, y1, x2, y2);&#xA;        setcolor(4);&#xA;        if (x1 &amp;lt; xwmin) {&#xA;            y = y1 + m * (xwmin - x1);&#xA;            x = xwmin;&#xA;            x1 = x;&#xA;            y1 = y;&#xA;        }&#xA;        if (x2 &amp;gt; xwmax) {&#xA;            y = y2 + m * (xwmax - x2);&#xA;            x = xwmax;&#xA;            x2 = x;&#xA;            y2 = y;&#xA;        }&#xA;        if (y1 &amp;lt; ywmin) {&#xA;            x = x1 + (ywmin - y1) / m;&#xA;            y = ywmin;&#xA;            x1 = x;&#xA;            y1 = y;&#xA;        }&#xA;        if (y2 &amp;gt; ywmax) {&#xA;            x = x2 + (ywmax - y2) / m;&#xA;            y = ywmax;&#xA;            x2 = x;&#xA;            y2 = y;&#xA;        }&#xA;&#xA;&#xA;        line(x1, y1, x2, y2);&#xA;&#xA;    }&#xA;    getch();&#xA;}&#xA;&#xA;int check(int code1[], int code2[]) {&#xA;    int flag = 0;&#xA;    if (code1[3] == 1 &amp;amp;&amp;amp; code2[3] == 1)&#xA;        flag = 1;&#xA;    if (code1[2] == 1 &amp;amp;&amp;amp; code2[2] == 1)&#xA;        flag = 1;&#xA;    if (code1[1] == 1 &amp;amp;&amp;amp; code2[1] == 1)&#xA;        flag = 1;&#xA;    if (code1[0] == 1 &amp;amp;&amp;amp; code2[0] == 1)&#xA;        flag = 1;&#xA;&#xA;    return flag;&#xA;}&#xA;&#xA;void rcode(int x, int y, int code[]) {&#xA;    if (y &amp;gt; ywmax) //bottom&#xA;        code[2] = 1;&#xA;    else&#xA;        code[2] = 0;&#xA;    if (y &amp;lt; ywmin) //top&#xA;        code[3] = 1;&#xA;    else&#xA;        code[3] = 0;&#xA;    if (x &amp;gt; xwmax) //right&#xA;        code[1] = 1;&#xA;    else&#xA;        code[1] = 0;&#xA;    if (x &amp;lt; xwmin) //left&#xA;        code[0] = 1;&#xA;    else&#xA;        code[0] = 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>WAP in C to generate recursive descend parser</title>
      <link>https://dhanoopbhaskar.github.io/posts/2010-05-28-wap-in-c-to-generate-recursive-descend-parser/</link>
      <pubDate>Fri, 28 May 2010 17:40:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2010-05-28-wap-in-c-to-generate-recursive-descend-parser/</guid>
      <description>&lt;pre&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;&#xA;#include&amp;lt;conio.h&amp;gt;&#xA;#include&amp;lt;ctype.h&amp;gt;&#xA;int lptr = 0; //look ahead pointer&#xA;char buff[100]; //buffer to store input string&#xA;int success = 1; //to reflect success or failure&#xA;&#xA;void E();&#xA;void EDASH();&#xA;void T();&#xA;void TDASH();&#xA;void V();&#xA;&#xA;void start() {&#xA;    E();&#xA;}&#xA;&#xA;int isvalid(char ch) {&#xA;    if (isalpha(ch))&#xA;        return 1;&#xA;    else if (toascii(ch) &amp;gt;= 47 &amp;amp;&amp;amp; toascii(ch) &amp;lt;= 57)&#xA;        return 1;&#xA;    else&#xA;        return 0;&#xA;}&#xA;&#xA;void advance() {&#xA;    lptr++;&#xA;}&#xA;&#xA;void E() {&#xA;    T();&#xA;    EDASH();&#xA;}&#xA;&#xA;void EDASH() {&#xA;    if (buff[lptr] == &#39;+&#39;) {&#xA;        advance();&#xA;        T();&#xA;        EDASH();&#xA;    }&#xA;}&#xA;&#xA;void T() {&#xA;    V();&#xA;    TDASH();&#xA;}&#xA;&#xA;void TDASH() {&#xA;    if (buff[lptr] == &#39;*&#39;) {&#xA;        advance();&#xA;        V();&#xA;        TDASH();&#xA;    }&#xA;}&#xA;&#xA;void V() {&#xA;    if (isvalid(buff[lptr])) {&#xA;        advance();&#xA;    } else if (buff[lptr] == &#39;(&#39;) {&#xA;        advance();&#xA;        E();&#xA;        if (buff[lptr] == &#39;)&#39;) {&#xA;            advance();&#xA;        } else {&#xA;            printf(&amp;quot;\n* Right parantheses missing &amp;quot;);&#xA;            success = 0;&#xA;        }&#xA;    } else {&#xA;        printf(&amp;quot;\n* Symbol(s) unidentified&amp;quot;);&#xA;        success = 0;&#xA;        getch();&#xA;        exit(0);&#xA;    }&#xA;}&#xA;&#xA;&#xA;void main() {&#xA;    int n;&#xA;    clrscr();&#xA;    printf(&amp;quot;\n\t----------------&amp;quot;);&#xA;    printf(&amp;quot;\n\t    GRAMMAR&amp;quot;);&#xA;    printf(&amp;quot;\n\t----------------\n&amp;quot;);&#xA;    printf(&amp;quot;\n\t E ::= TE&#39;&amp;quot;);&#xA;    printf(&amp;quot;\n\t E&#39;::= +TE&#39;|$&amp;quot;);&#xA;    printf(&amp;quot;\n\t T ::= VT&#39;&amp;quot;);&#xA;    printf(&amp;quot;\n\t T&#39;::= *VT&#39;|$&amp;quot;);&#xA;    printf(&amp;quot;\n\t V ::= &amp;lt;id&amp;gt;&amp;quot;);&#xA;    printf(&amp;quot;\n\t----------------\n\n&amp;quot;);&#xA;    printf(&amp;quot;\n Enter an expression: &amp;quot;);&#xA;    gets(buff);&#xA;    n = strlen(buff);&#xA;    start();&#xA;&#xA;    if (success == 1 &amp;amp;&amp;amp; lptr &amp;gt;= n) {&#xA;        printf(&amp;quot;\n* Correct syntax of expression&amp;quot;);&#xA;    } else {&#xA;        printf(&amp;quot;\n* Incorrect syntax of expression&amp;quot;);&#xA;    }&#xA;&#xA;    getch();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>WAP to generate symbol table</title>
      <link>https://dhanoopbhaskar.github.io/posts/2010-05-28-wap-to-generate-symbol-table/</link>
      <pubDate>Fri, 28 May 2010 17:38:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2010-05-28-wap-to-generate-symbol-table/</guid>
      <description>&lt;pre&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;&#xA;#include&amp;lt;conio.h&amp;gt;&#xA;int isnum(int n) {&#xA;    if (n &amp;gt; 0 &amp;amp;&amp;amp; n &amp;lt; 100)&#xA;        return 1;&#xA;    else&#xA;        return 0;&#xA;}&#xA;void main() {&#xA;    FILE * fp;&#xA;    char words[50][25], str[25], ch;&#xA;    char name[50][25];&#xA;    int size[50], add[50];&#xA;    int temp, ad = 1000;&#xA;    int i, j, w = 0, d = 0;&#xA;    fp = fopen(&amp;quot;tsym.c&amp;quot;, &amp;quot;r&amp;quot;);&#xA;    clrscr();&#xA;    printf(&amp;quot;\n File: tsym.c\n\n&amp;quot;);&#xA;    if (fp != NULL) {&#xA;        do {&#xA;            j = 0;&#xA;            ch = &#39;d&#39;;&#xA;            strcpy(str, &amp;quot;&amp;quot;);&#xA;&#xA;            while (ch != &#39; &#39;) {&#xA;                ch = getc(fp);&#xA;                printf(&amp;quot;%c&amp;quot;, ch);&#xA;&#xA;                if (ch == EOF) break;&#xA;&#xA;                str[j++] = ch;&#xA;&#xA;&#xA;                if (ch == &#39; &#39; || ch == &#39;\n&#39; || ch == &#39;=&#39; || ch == &#39;[&#39;) {&#xA;                    j--;&#xA;                    break;&#xA;                }&#xA;&#xA;                if (ch == &#39;;&#39; || ch == &#39;,&#39; || ch == &#39;]&#39;) {&#xA;                    j--;&#xA;                    break;&#xA;                }&#xA;&#xA;            }&#xA;&#xA;            str[j] = &#39;\0&#39;;&#xA;&#xA;&#xA;            if (j &amp;gt; 0)&#xA;                strcpy(words[w++], str);&#xA;&#xA;&#xA;&#xA;            if (ch == &#39;;&#39;)&#xA;                strcpy(words[w++], &amp;quot;;&amp;quot;);&#xA;&#xA;            j = 0;&#xA;        } while (ch != EOF);&#xA;    }&#xA;&#xA;&#xA;&#xA;    for (i = 0; i &amp;lt; w; i++) {&#xA;        if (!strcmp(words[i], &amp;quot;int&amp;quot;)) {&#xA;            i++;&#xA;&#xA;            for (; strcmp(words[i], &amp;quot;;&amp;quot;); i++) {&#xA;                temp = atoi(words[i]);&#xA;                if (isnum(temp)) {&#xA;                    d--;&#xA;                    ad = ad - size[d];&#xA;                    size[d] = temp * 2;&#xA;                    ad = ad + size[d];&#xA;                    d++;&#xA;                } else {&#xA;                    strcpy(name[d], words[i]);&#xA;                    size[d] = 2;&#xA;                    add[d] = ad;&#xA;                    ad = ad + size[d];&#xA;                    d++;&#xA;                }&#xA;            }&#xA;        } else if (!strcmp(words[i], &amp;quot;char&amp;quot;)) {&#xA;            i++;&#xA;            for (; strcmp(words[i], &amp;quot;;&amp;quot;); i++) {&#xA;                temp = atoi(words[i]);&#xA;                if (isnum(temp)) {&#xA;                    d--;&#xA;                    ad = ad - size[d];&#xA;                    size[d] = temp * 1;&#xA;                    ad = ad + size[d];&#xA;                    d++;&#xA;                } else {&#xA;                    strcpy(name[d], words[i]);&#xA;                    size[d] = 1;&#xA;                    add[d] = ad;&#xA;                    ad = ad + size[d];&#xA;                    d++;&#xA;                }&#xA;            }&#xA;        } else if (!strcmp(words[i], &amp;quot;float&amp;quot;)) {&#xA;            i++;&#xA;            for (; strcmp(words[i], &amp;quot;;&amp;quot;); i++) {&#xA;                temp = atoi(words[i]);&#xA;                if (isnum(temp)) {&#xA;                    d--;&#xA;                    ad = ad - size[d];&#xA;                    size[d] = temp * 4;&#xA;                    ad = ad + size[d];&#xA;                    d++;&#xA;                } else {&#xA;                    strcpy(name[d], words[i]);&#xA;                    size[d] = 4;&#xA;                    add[d] = ad;&#xA;                    ad = ad + size[d];&#xA;                    d++;&#xA;                }&#xA;            }&#xA;        } else if (!strcmp(words[i], &amp;quot;double&amp;quot;)) {&#xA;            i++;&#xA;            for (; strcmp(words[i], &amp;quot;;&amp;quot;); i++) {&#xA;                temp = atoi(words[i]);&#xA;                if (isnum(temp)) {&#xA;                    d--;&#xA;                    ad = ad - size[d];&#xA;                    size[d] = temp * 8;&#xA;                    ad = ad + size[d];&#xA;                    d++;&#xA;                } else {&#xA;                    strcpy(name[d], words[i]);&#xA;                    size[d] = 8;&#xA;                    add[d] = ad;&#xA;                    ad = ad + size[d];&#xA;                    d++;&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;&#xA;    printf(&amp;quot;\n\n\tSYMBOL TABLE:\n&amp;quot;);&#xA;    printf(&amp;quot;SYMBOL       SIZE      ADDRESS&amp;quot;);&#xA;    for (i = 0; i &amp;lt; d; i++) {&#xA;        printf(&amp;quot;\n%-10s&amp;quot;, name[i]);&#xA;        printf(&amp;quot;%-10d&amp;quot;, size[i]);&#xA;        printf(&amp;quot;%-10d&amp;quot;, add[i]);&#xA;    }&#xA;    getch();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>WAP to print comments in a given program</title>
      <link>https://dhanoopbhaskar.github.io/posts/2010-05-28-wap-to-print-comments-in-a-given-program/</link>
      <pubDate>Fri, 28 May 2010 17:36:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2010-05-28-wap-to-print-comments-in-a-given-program/</guid>
      <description>&lt;pre&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;&#xA;#include&amp;lt;conio.h&amp;gt;&#xA;void main() {&#xA;    char str[25], ch, words[50][25];&#xA;    int i, k, j, w = 0;&#xA;    FILE * fp;&#xA;    clrscr();&#xA;    fp = fopen(&amp;quot;tcom.c&amp;quot;, &amp;quot;r&amp;quot;);&#xA;    printf(&amp;quot;\n File: tcom.c\n\n&amp;quot;);&#xA;    if (fp != NULL) {&#xA;        do {&#xA;            j = 0;&#xA;            ch = &#39;d&#39;;&#xA;            strcpy(str, &amp;quot;&amp;quot;);&#xA;            while (ch != &#39; &#39;) {&#xA;                ch = getc(fp);&#xA;                putchar(ch);&#xA;                if (ch == EOF) break;&#xA;                str[j] = ch;&#xA;                if (ch != &#39; &#39; &amp;amp;&amp;amp; ch != &#39;\n&#39; &amp;amp;&amp;amp; ch != &#39;;&#39; &amp;amp;&amp;amp; ch != &#39;/&#39; &amp;amp;&amp;amp; ch != &#39;*&#39;)&#xA;                    j++;&#xA;                if (ch == &#39; &#39; || ch == &#39;\n&#39; || ch == &#39;;&#39; || ch == &#39;/&#39; || ch == &#39;*&#39;) break;&#xA;            }&#xA;            str[j] = &#39;\0&#39;;&#xA;&#xA;            strcpy(words[w++], str);&#xA;            if (ch == &#39;/&#39;)&#xA;                strcpy(words[w++], &amp;quot;/&amp;quot;);&#xA;&#xA;            if (ch == &#39;*&#39;)&#xA;                strcpy(words[w++], &amp;quot;*&amp;quot;);&#xA;&#xA;            if (ch == &#39;;&#39;)&#xA;                strcpy(words[w++], &amp;quot;;&amp;quot;);&#xA;&#xA;            if (ch == &#39;\n&#39;)&#xA;                strcpy(words[w++], &amp;quot;newline&amp;quot;);&#xA;&#xA;            if (ch == EOF)&#xA;                strcpy(words[w++], &amp;quot;EOF&amp;quot;);&#xA;&#xA;            if (ch == &#39; &#39;)&#xA;                strcpy(words[w++], &amp;quot; &amp;quot;);&#xA;&#xA;            j = 0;&#xA;        }&#xA;        while (ch != EOF);&#xA;    }&#xA;&#xA;&#xA;    printf(&amp;quot;\n\n\n* Single line comments are:\n&amp;quot;);&#xA;    for (i = 0; i &amp;lt; w; i++) { //1&#xA;        if (!strcmp(words[i], &amp;quot;/&amp;quot;)) { //2&#xA;            ++i;&#xA;            /*single line*/&#xA;            if (!strcmp(words[++i], &amp;quot;/&amp;quot;)) { //3&#xA;                do { //4&#xA;                    i = i + 1;&#xA;                    if (strcmp(words[i], &amp;quot;newline&amp;quot;) &amp;amp;&amp;amp; strcmp(words[i], &amp;quot;EOF&amp;quot;))&#xA;                        printf(&amp;quot;%s&amp;quot;, words[i]);&#xA;                    if (!strcmp(words[i], &amp;quot;newline&amp;quot;) || (!strcmp(words[i], &amp;quot;EOF&amp;quot;)))&#xA;                        break;&#xA;                } while (i &amp;lt; w); //4&#xA;                printf(&amp;quot;\n&amp;quot;);&#xA;            } //3&#xA;            /*single line*/&#xA;&#xA;&#xA;        } //2&#xA;&#xA;    } //1&#xA;&#xA;&#xA;    printf(&amp;quot;\n\n\n* Multiple line comments are:\n&amp;quot;);&#xA;    for (i = 0; i &amp;lt; w; i++) { //1&#xA;        if (!strcmp(words[i], &amp;quot;/&amp;quot;)) { //2&#xA;            ++i;&#xA;            /*multiline*/&#xA;            if (!strcmp(words[++i], &amp;quot;*&amp;quot;)) { //5&#xA;                do { //6&#xA;                    if (strcmp(words[++i], &amp;quot;*&amp;quot;))&#xA;                        printf(&amp;quot;%s&amp;quot;, words[i]);&#xA;                    else { //7&#xA;                        if (strcmp(words[++i], &amp;quot;/&amp;quot;)) { //8&#xA;                            printf(&amp;quot;\n&amp;quot;);&#xA;                            break;&#xA;                        } //8&#xA;                        else&#xA;                            printf(&amp;quot;%s&amp;quot;, words[++i]);&#xA;                    } //7&#xA;                } while (i &amp;lt; w); //6&#xA;            } //5&#xA;            /*multi line*/&#xA;        } //2&#xA;    } //1&#xA;    fclose(fp);&#xA;    getch();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>WAP to check the syntax of for loops</title>
      <link>https://dhanoopbhaskar.github.io/posts/2010-05-28-wap-to-check-the-syntax-of-for-loops/</link>
      <pubDate>Fri, 28 May 2010 17:34:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2010-05-28-wap-to-check-the-syntax-of-for-loops/</guid>
      <description>&lt;pre&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;&#xA;#include&amp;lt;conio.h&amp;gt;&#xA;void main() {&#xA;    char str[25], ch, words[25][25];&#xA;    int i, k, j, w = 0, s = 0, cntl = 0, cntr = 0, p = 0, parR = 0, f = 0, parL = 0;&#xA;    FILE * fp;&#xA;    clrscr();&#xA;    fp = fopen(&amp;quot;tnest.c&amp;quot;, &amp;quot;r&amp;quot;);&#xA;    printf(&amp;quot;\n File: tnest.c\n\n&amp;quot;);&#xA;    if (fp != NULL) {&#xA;        do {&#xA;            j = 0;&#xA;            ch = &#39;d&#39;;&#xA;            strcpy(str, &amp;quot;&amp;quot;);&#xA;            while (ch != &#39; &#39;) {&#xA;                ch = getc(fp);&#xA;                putchar(ch);&#xA;                if (ch == EOF) break;&#xA;                if (ch == &#39;{&#39;)&#xA;                    cntl++;&#xA;                else if (ch == &#39;}&#39;)&#xA;                    cntr++;&#xA;                str[j] = ch;&#xA;                if (ch != &#39; &#39; &amp;amp;&amp;amp; ch != &#39;\n&#39; &amp;amp;&amp;amp; ch != &#39;;&#39; &amp;amp;&amp;amp; ch != &#39;(&#39; &amp;amp;&amp;amp; ch != &#39;)&#39;)&#xA;                    j++;&#xA;                if (ch == &#39; &#39; || ch == &#39;\n&#39; || ch == &#39;;&#39; || ch == &#39;(&#39; || ch == &#39;)&#39;) break;&#xA;            }&#xA;            str[j] = &#39;\0&#39;;&#xA;            strcpy(words[w++], str);&#xA;            if (ch == &#39;(&#39;)&#xA;                strcpy(words[w++], &amp;quot;(&amp;quot;);&#xA;            if (ch == &#39;)&#39;)&#xA;                strcpy(words[w++], &amp;quot;)&amp;quot;);&#xA;            if (ch == &#39;;&#39;)&#xA;                strcpy(words[w++], &amp;quot;;&amp;quot;);&#xA;&#xA;            if (ch == &#39;\n&#39;)&#xA;                strcpy(words[w++], &amp;quot;newline&amp;quot;);&#xA;            j = 0;&#xA;        }&#xA;        while (ch != EOF);&#xA;    }&#xA;&#xA;    for (i = 0; i &amp;lt; w; i++) { //for&#xA;&#xA;        if (!strcmp(words[i], &amp;quot;for&amp;quot;)) { //1&#xA;            s = 0;&#xA;            p = 0;&#xA;            parL = 0;&#xA;            if (!strcmp(words[++i], &amp;quot;(&amp;quot;)) { //2&#xA;                f++;&#xA;                parR = 0;&#xA;                parL++;&#xA;&#xA;                for (j = i; j &amp;lt; w; j++) { //3&#xA;                    if (!strcmp(words[j], &amp;quot;;&amp;quot;))&#xA;                        s++;&#xA;                    if (!strcmp(words[j], &amp;quot;)&amp;quot;)) {&#xA;                        parR++;&#xA;                        //p=1;&#xA;                        break;&#xA;                    }&#xA;                    if (!strcmp(words[j], &amp;quot;newline&amp;quot;)) {&#xA;                        break;&#xA;                    }&#xA;                } //3&#xA;&#xA;                if (!strcmp(words[j], &amp;quot;)&amp;quot;)) {&#xA;                    if ((!strcmp(words[++j], &amp;quot;;&amp;quot;)) || (!strcmp(words[++j], &amp;quot;newline&amp;quot;)))&#xA;                        p = 1;&#xA;                }&#xA;            } //2&#xA;        } //1&#xA;        if (p != 1 || parR != 1 || s != 2 || parL != 1) break;&#xA;    }&#xA;&#xA;    if ((parL != 1) || (parR != 1)) {&#xA;        printf(&amp;quot;\n\n* Error in syntax of parantheses &amp;quot;);&#xA;        printf(&amp;quot;of for loop no:%d &amp;quot;, f);&#xA;        getch();&#xA;        exit(0);&#xA;    } else if (cntl != cntr) {&#xA;        printf(&amp;quot;\n\n* Error in syntax of curly braces &amp;quot;);&#xA;        getch();&#xA;        exit(0);&#xA;    } else if (s != 2) {&#xA;        printf(&amp;quot;\n\n* Error in syntax of semicolon &amp;quot;);&#xA;        printf(&amp;quot;of for loop no:%d &amp;quot;, f);&#xA;        getch();&#xA;        exit(0);&#xA;    } else if (p == 1) {&#xA;        printf(&amp;quot;\n\n* Syntax of for is correct&amp;quot;);&#xA;        getch();&#xA;        exit(0);&#xA;    }&#xA;&#xA;    fclose(fp);&#xA;    getch();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>WAP to perform macro expansion</title>
      <link>https://dhanoopbhaskar.github.io/posts/2010-05-28-wap-to-perform-macro-expansion/</link>
      <pubDate>Fri, 28 May 2010 17:31:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2010-05-28-wap-to-perform-macro-expansion/</guid>
      <description>&lt;pre&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;&#xA;#include&amp;lt;conio.h&amp;gt;&#xA;void main() {&#xA;    char words[25][25];&#xA;    char str[25], ch;&#xA;    int i, j, w = 0, m = 0, flag = 0;&#xA;    char macro[10][25];&#xA;    char val[10][25];&#xA;    long l;&#xA;    FILE * fp, * fp1;&#xA;    fp = fopen(&amp;quot;text.c&amp;quot;, &amp;quot;r&amp;quot;);&#xA;    fp1 = fopen(&amp;quot;temp.c&amp;quot;, &amp;quot;w&amp;quot;);&#xA;    clrscr();&#xA;    printf(&amp;quot;\n File: text.c before MACRO EXPANSION\n\n&amp;quot;);&#xA;    if (fp != NULL) {&#xA;        do {&#xA;            j = 0;&#xA;            ch = &#39;d&#39;;&#xA;            strcpy(str, &amp;quot;&amp;quot;);&#xA;            while (ch != &#39; &#39;) {&#xA;                ch = getc(fp);&#xA;                printf(&amp;quot;%c&amp;quot;, ch);&#xA;                if (ch == EOF) break;&#xA;                putc(ch, fp1);&#xA;&#xA;                str[j] = ch;&#xA;                if (ch != &#39; &#39; &amp;amp;&amp;amp; ch != &#39;\n&#39; &amp;amp;&amp;amp; ch != &#39;;&#39; &amp;amp;&amp;amp; ch != &#39;=&#39; &amp;amp;&amp;amp; ch != &#39;+&#39;)&#xA;                    j++;&#xA;                if (ch == &#39; &#39; || ch == &#39;\n&#39;) break;&#xA;                if (ch == &#39;;&#39; || ch == &#39;=&#39; || ch == &#39;+&#39;) break;&#xA;            }&#xA;            str[j] = &#39;\0&#39;;&#xA;            strcpy(words[w++], str);&#xA;            j = 0;&#xA;        } while (ch != EOF);&#xA;    }&#xA;&#xA;    for (i = 0; i &amp;lt; w; i++) {&#xA;        if (!strcmp(words[i], &amp;quot;#define&amp;quot;)) {&#xA;            strcpy(macro[m++], words[++i]);&#xA;        }&#xA;    }&#xA;&#xA;    for (i = 0; i &amp;lt; w; i++) {&#xA;        if (!strcmp(words[i], &amp;quot;main()&amp;quot;))&#xA;            break;&#xA;        for (j = 0; j &amp;lt; m; j++) {&#xA;            if (!strcmp(words[i], macro[j])) {&#xA;                strcpy(val[j], words[++i]);&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    fclose(fp);&#xA;    fclose(fp1);&#xA;    fp = fopen(&amp;quot;text.c&amp;quot;, &amp;quot;w&amp;quot;);&#xA;    fp1 = fopen(&amp;quot;temp.c&amp;quot;, &amp;quot;r&amp;quot;);&#xA;    if (fp1 != NULL) {&#xA;        do {&#xA;            j = 0;&#xA;            ch = &#39;d&#39;;&#xA;            strcpy(str, &amp;quot;&amp;quot;);&#xA;            while (ch != &#39; &#39;) {&#xA;                ch = getc(fp1);&#xA;                if (ch == EOF) break;&#xA;                putc(ch, fp);&#xA;                str[j] = ch;&#xA;&#xA;                if (ch != &#39; &#39; &amp;amp;&amp;amp; ch != &#39;\n&#39; &amp;amp;&amp;amp; ch != &#39;;&#39; &amp;amp;&amp;amp; ch != &#39;=&#39; &amp;amp;&amp;amp; ch != &#39;+&#39;)&#xA;                    j++;&#xA;                if (ch == &#39; &#39; || ch == &#39;\n&#39;) break;&#xA;                if (ch == &#39;;&#39; || ch == &#39;=&#39; || ch == &#39;+&#39;) break;&#xA;            }&#xA;            str[j] = &#39;\0&#39;;&#xA;            if (flag) {&#xA;                for (i = 0; i &amp;lt; m; i++) {&#xA;                    if (!strcmp(str, macro[i])) {&#xA;                        l = strlen(str);&#xA;                        fseek(fp, -(1 * l + 1), SEEK_CUR);&#xA;                        fputs(val[i], fp);&#xA;                    } //if&#xA;                } //for&#xA;            } //if-flag&#xA;&#xA;            if (ch == &#39;;&#39;)&#xA;                putc(ch, fp);&#xA;&#xA;            if (!strcmp(str, &amp;quot;main()&amp;quot;))&#xA;                flag = 1;&#xA;            j = 0;&#xA;        } while (ch != EOF);&#xA;    }&#xA;&#xA;    fclose(fp);&#xA;    fclose(fp1);&#xA;    fp = fopen(&amp;quot;text.c&amp;quot;, &amp;quot;r&amp;quot;);&#xA;    printf(&amp;quot;\n\n\n File: text.c after MACRO EXPANSION\n\n&amp;quot;);&#xA;    if (fp != NULL) {&#xA;        do {&#xA;            ch = getc(fp);&#xA;            printf(&amp;quot;%c&amp;quot;, ch);&#xA;        } while (ch != EOF);&#xA;    }&#xA;    fclose(fp);&#xA;    getch();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>WAP to check the correctness of braces</title>
      <link>https://dhanoopbhaskar.github.io/posts/2010-05-28-wap-to-check-the-correctness-of-braces/</link>
      <pubDate>Fri, 28 May 2010 17:30:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2010-05-28-wap-to-check-the-correctness-of-braces/</guid>
      <description>&lt;pre&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;&#xA;#include&amp;lt;conio.h&amp;gt;&#xA;void main() {&#xA;    FILE * fp;&#xA;    char ch;&#xA;    int countL = 0, countR = 0;&#xA;    fp = fopen(&amp;quot;tbraces.c&amp;quot;, &amp;quot;r&amp;quot;);&#xA;    clrscr();&#xA;    printf(&amp;quot;\n File: tbraces.c\n\n&amp;quot;);&#xA;    if (fp != NULL) {&#xA;        do {&#xA;            ch = &#39;d&#39;;&#xA;            while (ch != &#39; &#39;) {&#xA;                ch = getc(fp);&#xA;                printf(&amp;quot;%c&amp;quot;, ch);&#xA;                if (ch == &#39;{&#39;) countL++;&#xA;                if (ch == &#39;}&#39;) countR++;&#xA;                if (ch == EOF) break;&#xA;            }&#xA;        } while (ch != EOF);&#xA;    }&#xA;&#xA;&#xA;    if (countL != countR)&#xA;        printf(&amp;quot;\n\n* ERROR in the syntax of curly braces&amp;quot;);&#xA;    else&#xA;        printf(&amp;quot;\n\n* Curly braces is syntactically correct&amp;quot;);&#xA;&#xA;    fclose(fp);&#xA;    getch();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Write a program in C to perform token separation</title>
      <link>https://dhanoopbhaskar.github.io/posts/2010-05-28-write-a-program-in-c-to-perform-token-separation/</link>
      <pubDate>Fri, 28 May 2010 17:14:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2010-05-28-write-a-program-in-c-to-perform-token-separation/</guid>
      <description>&lt;pre&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;&#xA;#include&amp;lt;conio.h&amp;gt;&#xA;void main() {&#xA;    FILE * fp;&#xA;    char words[50][25], str[25], ch;&#xA;    char key[50][25], op[50][10], id[50][25];&#xA;    int i, j, k = 0, w = 0, p = 0, d = 0;&#xA;    int yes = 0;&#xA;    fp = fopen(&amp;quot;ttoken.c&amp;quot;, &amp;quot;r&amp;quot;);&#xA;    clrscr();&#xA;    printf(&amp;quot;\n File: ttoken.c\n\n&amp;quot;);&#xA;    if (fp != NULL) {&#xA;        do {&#xA;            j = 0;&#xA;            ch = &#39;d&#39;;&#xA;            strcpy(str, &amp;quot;&amp;quot;);&#xA;&#xA;            while (ch != &#39; &#39;) {&#xA;                ch = getc(fp);&#xA;                printf(&amp;quot;%c&amp;quot;, ch);&#xA;&#xA;                if (ch == EOF) break;&#xA;&#xA;                str[j++] = ch;&#xA;&#xA;                switch (ch) {&#xA;                    case &#39;+&#39;:&#xA;                        strcpy(op[p++], &amp;quot;+&amp;quot;);&#xA;                        break;&#xA;                    case &#39;-&#39;:&#xA;                        strcpy(op[p++], &amp;quot;-&amp;quot;);&#xA;                        break;&#xA;                    case &#39;*&#39;:&#xA;                        strcpy(op[p++], &amp;quot;*&amp;quot;);&#xA;                        break;&#xA;                    case &#39;/&#39;:&#xA;                        strcpy(op[p++], &amp;quot;/&amp;quot;);&#xA;                        break;&#xA;                    case &#39;%&#39;:&#xA;                        strcpy(op[p++], &amp;quot;%&amp;quot;);&#xA;                        break;&#xA;                    case &#39;=&#39;:&#xA;                        strcpy(op[p++], &amp;quot;=&amp;quot;);&#xA;                        break;&#xA;                }&#xA;&#xA;                if (ch == &#39; &#39; || ch == &#39;\n&#39; || ch == &#39;=&#39;) {&#xA;                    j--;&#xA;                    break;&#xA;                }&#xA;&#xA;                if (ch == &#39;;&#39; || ch == &#39;(&#39; || ch == &#39;)&#39; || ch == &#39;,&#39;) {&#xA;                    j--;&#xA;                    break;&#xA;                }&#xA;&#xA;            }&#xA;&#xA;            str[j] = &#39;\0&#39;;&#xA;&#xA;            strcpy(words[w++], str);&#xA;&#xA;            if (ch == &#39;(&#39;)&#xA;                strcpy(words[w++], &amp;quot;(&amp;quot;);&#xA;            if (ch == &#39;;&#39;)&#xA;                strcpy(words[w++], &amp;quot;;&amp;quot;);&#xA;            if (ch == &#39;)&#39;)&#xA;                strcpy(words[w++], &amp;quot;)&amp;quot;);&#xA;            if (ch == &#39;=&#39;)&#xA;                strcpy(words[w++], &amp;quot;=&amp;quot;);&#xA;            if (ch == &#39;,&#39;)&#xA;                strcpy(words[w++], &amp;quot;,&amp;quot;);&#xA;&#xA;            j = 0;&#xA;        } while (ch != EOF);&#xA;    }&#xA;&#xA;    for (i = 0; i &amp;lt; w; i++) { //1&#xA;        if ((!strcmp(words[i], &amp;quot;for&amp;quot;)) || (!strcmp(words[i], &amp;quot;if&amp;quot;))) {&#xA;            strcpy(key[k++], words[i]);&#xA;        }&#xA;        if ((!strcmp(words[i], &amp;quot;void&amp;quot;)) || (!strcmp(words[i], &amp;quot;else&amp;quot;))) {&#xA;            strcpy(key[k++], words[i]);&#xA;        }&#xA;        if ((!strcmp(words[i], &amp;quot;char&amp;quot;)) || (!strcmp(words[i], &amp;quot;int&amp;quot;))) {&#xA;            strcpy(key[k++], words[i]);&#xA;            yes = 1;&#xA;            for (j = i + 1; strcmp(words[j], &amp;quot;;&amp;quot;); j++) {&#xA;                if (!strcmp(words[j], &amp;quot;=&amp;quot;)) {&#xA;                    yes = 0;&#xA;                    j++;&#xA;                }&#xA;                if (!strcmp(words[j], &amp;quot;,&amp;quot;)) {&#xA;                    yes = 1;&#xA;                    j++;&#xA;                }&#xA;                if (yes)&#xA;                    strcpy(id[d++], words[j]);&#xA;            }&#xA;        }&#xA;&#xA;        if ((!strcmp(words[i], &amp;quot;float&amp;quot;)) || (!strcmp(words[i], &amp;quot;double&amp;quot;))) {&#xA;            strcpy(key[k++], words[i]);&#xA;            for (j = i + 1; strcmp(words[j], &amp;quot;;&amp;quot;); j++) {&#xA;                if (!strcmp(words[j], &amp;quot;=&amp;quot;)) {&#xA;                    yes = 0;&#xA;                    j++;&#xA;                }&#xA;                if (!strcmp(words[j], &amp;quot;,&amp;quot;)) {&#xA;                    yes = 1;&#xA;                    j++;&#xA;                }&#xA;                if (yes)&#xA;                    strcpy(id[d++], words[j]);&#xA;            }&#xA;        }&#xA;&#xA;    } //1&#xA;&#xA;    printf(&amp;quot;\n\n* Identifiers:\n&amp;quot;);&#xA;    for (i = 0; i &amp;lt; d; i++) {&#xA;        printf(&amp;quot;%s  &amp;quot;, id[i]);&#xA;    }&#xA;&#xA;    printf(&amp;quot;\n\n* Keywords:\n&amp;quot;);&#xA;    for (i = 0; i &amp;lt; k; i++) {&#xA;        printf(&amp;quot;%s  &amp;quot;, key[i]);&#xA;    }&#xA;&#xA;    printf(&amp;quot;\n\n* Operators:\n&amp;quot;);&#xA;    for (i = 0; i &amp;lt; p; i++) {&#xA;        printf(&amp;quot;%s  &amp;quot;, op[i]);&#xA;    }&#xA;&#xA;    fclose(fp);&#xA;    getch();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Some Data Structure Programs in C&#43;&#43;</title>
      <link>https://dhanoopbhaskar.github.io/posts/2009-06-28-some-data-structure-programs/</link>
      <pubDate>Sun, 28 Jun 2009 19:17:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2009-06-28-some-data-structure-programs/</guid>
      <description>&lt;h3 id=&#34;1-wap-to-implement-searching-in-a-linked-list&#34;&gt;&#xA;  1. WAP to implement searching in a linked list&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#1-wap-to-implement-searching-in-a-linked-list&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;lt;iostream.h&amp;gt; &#xA;#include&amp;lt;conio.h&amp;gt; &#xA;#include&amp;lt;process.h&amp;gt;&#xA;&#xA;class node {&#xA;    int data;&#xA;    node * next;&#xA;    public:&#xA;    void insert();&#xA;    void search(int);&#xA;    void display();&#xA;};&#xA;&#xA;node *start, *head, *temp;&#xA;&#xA;void node::insert() {&#xA;    head = new node;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the data item: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;head-&amp;gt;data;&#xA;    head-&amp;gt;next = NULL;&#xA;    if (start == NULL) {&#xA;        start = head;&#xA;    } else {&#xA;        temp = start;&#xA;        while (temp-&amp;gt;next != NULL) {&#xA;            temp = temp-&amp;gt;next;&#xA;        }&#xA;        temp-&amp;gt;next = head;&#xA;    }&#xA;}&#xA;&#xA;void node::display() {&#xA;    temp = start;&#xA;    if (start == NULL)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Data list is empty &amp;quot;;&#xA;    else {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n DATA LIST: &amp;quot;;&#xA;        while (temp != NULL) {&#xA;            cout&amp;lt;&amp;lt;temp-&amp;gt;data&amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;            temp = temp-&amp;gt;next;&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;void node::search(int data) {&#xA;    temp = start;&#xA;    if (start == NULL)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Data list is empty &amp;quot;;&#xA;    else {&#xA;        int flag = 0;&#xA;        while (temp != NULL) {&#xA;            if (data == temp-&amp;gt;data) {&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n The data item is present in the list &amp;quot;;&#xA;                flag = 1;&#xA;                break;&#xA;            }&#xA;            temp = temp-&amp;gt;next;&#xA;        }&#xA;        if (flag != 1)&#xA;            cout&amp;lt;&amp;lt;&amp;quot;\n The data item is not found to be present &amp;quot;;&#xA;    }&#xA;}&#xA;&#xA;void main() {&#xA;    int ch, data;&#xA;    node ob;&#xA;    start = NULL;&#xA;    clrscr();&#xA;    do {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n\n ... SINGLY LINKED LIST - SEARCH ... &amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n 1.Insert\n 2.Display\n 3.Search\n 4. Exit\n &amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter your choice: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;&#xA;        switch (ch) {&#xA;            case 1:&#xA;                ob.insert();&#xA;                break;&#xA;            case 2:&#xA;                ob.display();&#xA;                break;&#xA;            case 3:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n Enter the data item to be searched: &amp;quot;;&#xA;                cin&amp;gt;&amp;gt;data;&#xA;                ob.search(data);&#xA;                break;&#xA;            case 4:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n .... Thanking You! ....&amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            default:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n Invalid key-in &amp;quot;;&#xA;        }&#xA;    } while (1);&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;2-wap-to-implement-sorting-in-a-linked-list&#34;&gt;&#xA;  2. WAP to implement sorting in a linked list&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#2-wap-to-implement-sorting-in-a-linked-list&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;lt;iostream.h&amp;gt; &#xA;#include&amp;lt;conio.h&amp;gt; &#xA;#include&amp;lt;process.h&amp;gt;&#xA;&#xA;class node {&#xA;    int data;&#xA;    node * next;&#xA;    public:&#xA;&#x9;void insert();&#xA;    void sort();&#xA;    void display();&#xA;};&#xA;&#xA;node * start, * head, * temp;&#xA;&#xA;void node::insert() {&#xA;    head = new node;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the data item: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;head-&amp;gt;data;&#xA;    head-&amp;gt;next = NULL;&#xA;    if (start == NULL) {&#xA;        start = head;&#xA;    } else {&#xA;        temp = start;&#xA;        while (temp-&amp;gt;next != NULL) {&#xA;            temp = temp-&amp;gt;next;&#xA;        }&#xA;        temp-&amp;gt;next = head;&#xA;    }&#xA;}&#xA;&#xA;void node::display() {&#xA;    temp = start;&#xA;    if (start == NULL)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Data list is empty &amp;quot;;&#xA;    else {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n DATA LIST: &amp;quot;;&#xA;        while (temp != NULL) {&#xA;            cout&amp;lt;&amp;lt;temp-&amp;gt;data&amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;            temp = temp-&amp;gt;next;&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;void node::sort() {&#xA;    if (start == NULL)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Data list is empty &amp;quot;;&#xA;    else {&#xA;        node * t1, * t2, * temp;&#xA;        for (t1 = start; t1 != NULL; t1 = t1-&amp;gt;next) {&#xA;            for (t2 = t1-&amp;gt;next; t2 != NULL; t2 = t2-&amp;gt;next) {&#xA;                if (t1-&amp;gt;data &amp;gt; t2-&amp;gt;data) {&#xA;                    temp-&amp;gt;data = t1-&amp;gt;data;&#xA;                    t1-&amp;gt;data = t2-&amp;gt;data;&#xA;                    t2-&amp;gt;data = temp-&amp;gt;data;&#xA;                }&#xA;            }&#xA;        }&#xA;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n List is sorted &amp;quot;;&#xA;    }&#xA;}&#xA;&#xA;void main() {&#xA;    int ch, data;&#xA;    node ob;&#xA;    start = NULL;&#xA;    clrscr();&#xA;    do {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n\n ... SINGLY LINKED LIST - SORT ... &amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n 1.Insert\n 2.Display\n 3.Sort\n 4. Exit\n &amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter your choice: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;&#xA;        switch (ch) {&#xA;            case 1:&#xA;                ob.insert();&#xA;                break;&#xA;            case 2:&#xA;                ob.display();&#xA;                break;&#xA;            case 3:&#xA;                ob.sort();&#xA;                break;&#xA;            case 4:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n .... Thanking You! ....&amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            default:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n Invalid key-in &amp;quot;;&#xA;        }&#xA;    } while (1);&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;3wap-to-reverse-a-linked-list-start-pointer-is-given&#34;&gt;&#xA;  3.WAP to reverse a linked list, start pointer is given&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#3wap-to-reverse-a-linked-list-start-pointer-is-given&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;lt;iostream.h&amp;gt; &#xA;#include&amp;lt;conio.h&amp;gt; &#xA;#include&amp;lt;process.h&amp;gt;&#xA;&#xA;class node {&#xA;    int data;&#xA;    node * next;&#xA;    public:&#xA;    void insert();&#xA;    void reverse(node * );&#xA;    void display();&#xA;};&#xA;&#xA;node * start, * head, * temp;&#xA;&#xA;void node::insert() {&#xA;    head = new node;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the data item: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;head-&amp;gt;data;&#xA;    head-&amp;gt;next = NULL;&#xA;    if (start == NULL) {&#xA;        start = head;&#xA;    } else {&#xA;        temp = start;&#xA;        while (temp-&amp;gt;next != NULL) {&#xA;            temp = temp-&amp;gt;next;&#xA;        }&#xA;        temp-&amp;gt;next = head;&#xA;    }&#xA;}&#xA;&#xA;void node::display() {&#xA;    temp = start;&#xA;    if (start == NULL)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Data list is empty &amp;quot;;&#xA;    else {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n DATA LIST: &amp;quot;;&#xA;        while (temp != NULL) {&#xA;            cout&amp;lt;&amp;lt;temp-&amp;gt;data&amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;            temp = temp-&amp;gt;next;&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;void node::reverse(node * start) {&#xA;    if (start == NULL)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Data list is empty &amp;quot;;&#xA;    else {&#xA;        int a[50], i = 0, n;&#xA;        temp = start;&#xA;        //storing the data items to an array&#xA;        while (temp != NULL) {&#xA;            a[i] = temp-&amp;gt;data;&#xA;            temp = temp-&amp;gt;next;&#xA;            n = i++;&#xA;        }&#xA;        i = n;&#xA;        temp = start;&#xA;        //forming linked list in reversed order&#xA;        while (temp != NULL) {&#xA;            temp-&amp;gt;data = a[i];&#xA;            temp = temp-&amp;gt;next;&#xA;            i--;&#xA;        }&#xA;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n List is reversed &amp;quot;;&#xA;    }&#xA;}&#xA;&#xA;void main() {&#xA;    int ch, data;&#xA;    node ob;&#xA;    start = NULL;&#xA;    clrscr();&#xA;    do {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n\n ... SINGLY LINKED LIST - REVERSE ... &amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n 1.Insert\n 2.Display\n 3.Reverse\n 4. Exit\n &amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter your choice: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;&#xA;        switch (ch) {&#xA;            case 1:&#xA;                ob.insert();&#xA;                break;&#xA;            case 2:&#xA;                ob.display();&#xA;                break;&#xA;            case 3:&#xA;                ob.reverse(start);&#xA;                break;&#xA;            case 4:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n .... Thanking You! ....&amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            default:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n Invalid key-in &amp;quot;;&#xA;        }&#xA;    } while (1);&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;4-wap-to-reverse-a-linked-list-within-the-list&#34;&gt;&#xA;  4. WAP to reverse a linked list within the list&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#4-wap-to-reverse-a-linked-list-within-the-list&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;lt;iostream.h&amp;gt; &#xA;#include&amp;lt;conio.h&amp;gt; &#xA;#include&amp;lt;process.h&amp;gt;&#xA;&#xA;class node {&#xA;    int data;&#xA;    node * next;&#xA;    node * prev;&#xA;    public:&#xA;    void insert();&#xA;    void reverse();&#xA;    void display();&#xA;};&#xA;&#xA;node * start, * head, * temp, * last;&#xA;&#xA;void node::insert() {&#xA;    head = new node;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the data item: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;head-&amp;gt;data;&#xA;    head-&amp;gt;next = head-&amp;gt;prev = NULL;&#xA;    if (start == NULL) {&#xA;        start = head;&#xA;        last = head;&#xA;    } else {&#xA;        last-&amp;gt;next = head;&#xA;        head-&amp;gt;prev = last;&#xA;        last = head;&#xA;    }&#xA;}&#xA;&#xA;void node::display() {&#xA;    temp = start;&#xA;    if (start == NULL)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Data list is empty &amp;quot;;&#xA;    else {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n DATA LIST: &amp;quot;;&#xA;        while (temp != NULL) {&#xA;            cout&amp;lt;&amp;lt;temp-&amp;gt;data&amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;            temp = temp-&amp;gt;next;&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;void node::reverse() {&#xA;    if (start == NULL)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Data list is empty &amp;quot;;&#xA;    else {&#xA;        int len = 0, lenM = 0;&#xA;        temp = start;&#xA;        while (temp != NULL) {&#xA;            len++;&#xA;            temp = temp-&amp;gt;next;&#xA;        }&#xA;        node * t1, * t2, * temp;&#xA;        t1 = start;&#xA;        t2 = last;&#xA;        while (lenM &amp;lt; len / 2) {&#xA;            temp-&amp;gt;data = t1-&amp;gt;data;&#xA;            t1-&amp;gt;data = t2-&amp;gt;data;&#xA;            t2-&amp;gt;data = temp-&amp;gt;data;&#xA;            t1 = t1-&amp;gt;next;&#xA;            t2 = t2-&amp;gt;prev;&#xA;            lenM++;&#xA;        }&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n List is reversed &amp;quot;;&#xA;    }&#xA;}&#xA;&#xA;void main() {&#xA;    int ch, data;&#xA;    node ob;&#xA;    start = last = NULL;&#xA;    clrscr();&#xA;    do {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n\n ... SINGLY LINKED LIST - REVERSE WITHIN THE LIST ... &amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n 1.Insert\n 2.Display\n 3.Reverse\n 4.Exit\n &amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter your choice: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;&#xA;        switch (ch) {&#xA;            case 1:&#xA;                ob.insert();&#xA;                break;&#xA;            case 2:&#xA;                ob.display();&#xA;                break;&#xA;            case 3:&#xA;                ob.reverse();&#xA;                break;&#xA;            case 4:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n .... Thanking You! ....&amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            default:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n Invalid key-in &amp;quot;;&#xA;        }&#xA;    } while (1);&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;5-wap-to-remove-first--last-occurence-of-an-element-in-a-linked-list&#34;&gt;&#xA;  5. WAP to remove first &amp;amp; last occurence of an element in a linked list&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#5-wap-to-remove-first--last-occurence-of-an-element-in-a-linked-list&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;lt;iostream.h&amp;gt; &#xA;#include&amp;lt;conio.h&amp;gt; &#xA;#include&amp;lt;process.h&amp;gt;&#xA;&#xA;class node {&#xA;    int data;&#xA;    node * next;&#xA;    public:&#xA;    void insert();&#xA;    void delet(int);&#xA;    void display();&#xA;};&#xA;&#xA;node * start, * head, * temp;&#xA;&#xA;void node::insert() {&#xA;    head = new node;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the data item: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;head-&amp;gt;data;&#xA;    head-&amp;gt;next = NULL;&#xA;    if (start == NULL) {&#xA;        start = head;&#xA;    } else {&#xA;        temp = start;&#xA;        while (temp-&amp;gt;next != NULL) {&#xA;            temp = temp-&amp;gt;next;&#xA;        }&#xA;        temp-&amp;gt;next = head;&#xA;    }&#xA;}&#xA;&#xA;void node::display() {&#xA;    temp = start;&#xA;    if (start == NULL)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Data list is empty &amp;quot;;&#xA;    else {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n DATA LIST: &amp;quot;;&#xA;        while (temp != NULL) {&#xA;            cout&amp;lt;&amp;lt;temp-&amp;gt;data&amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;            temp = temp-&amp;gt;next;&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;void node::delet(int data) {&#xA;    temp = start;&#xA;    if (start == NULL)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Data list is empty &amp;quot;;&#xA;    else {&#xA;        //counting no. of occurence&#xA;        int count = 0;&#xA;        while (temp != NULL) {&#xA;            if (data == temp-&amp;gt;data) {&#xA;                count++;&#xA;            }&#xA;            temp = temp-&amp;gt;next;&#xA;        }&#xA;&#xA;        //storing the position of occurence into an array&#xA;        int a[50], i = 1, n, p = 0;&#xA;        int pos[20];&#xA;        temp = start;&#xA;        while (temp != NULL) {&#xA;            if (data == temp-&amp;gt;data &amp;amp;&amp;amp; i &amp;lt;= count) {&#xA;                pos[i] = p;&#xA;                i++;&#xA;            }&#xA;            temp = temp-&amp;gt;next;&#xA;            p++;&#xA;        }&#xA;&#xA;        //deleting first and last occurence&#xA;        int fst = pos[1];&#xA;        int lst = pos[count];&#xA;        node * t;&#xA;        temp = start;&#xA;        p = 0;&#xA;        while (temp != NULL) {&#xA;            if (data == temp-&amp;gt;data &amp;amp;&amp;amp; (fst == p || lst == p)) {&#xA;                if (temp == start) {&#xA;                    start = temp-&amp;gt;next;&#xA;                } else {&#xA;                    t-&amp;gt;next = temp-&amp;gt;next;&#xA;                }&#xA;            }&#xA;            t = temp;&#xA;            temp = temp-&amp;gt;next;&#xA;            p++;&#xA;        }&#xA;&#xA;    }&#xA;}&#xA;&#xA;void main() {&#xA;    int ch, data;&#xA;    node ob;&#xA;    start = NULL;&#xA;    clrscr();&#xA;    do {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n\n ... SINGLY LINKED LIST - DELETE ... &amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n 1.Insert\n 2.Display\n 3.Delete\n 4.Exit\n &amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter your choice: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;&#xA;        switch (ch) {&#xA;            case 1:&#xA;                ob.insert();&#xA;                break;&#xA;            case 2:&#xA;                ob.display();&#xA;                break;&#xA;            case 3:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n Enter the data item to be deleted: &amp;quot;;&#xA;                cin&amp;gt;&amp;gt;data;&#xA;                ob.delet(data);&#xA;                break;&#xA;            case 4:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n .... Thanking You! ....&amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            default:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n Invalid key-in &amp;quot;;&#xA;        }&#xA;    } while (1);&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;6wap-to-create-a-tree-from-inorder--preorder-traversal-sequences&#34;&gt;&#xA;  6.WAP to create a tree from inorder &amp;amp; preorder traversal sequences&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#6wap-to-create-a-tree-from-inorder--preorder-traversal-sequences&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;lt;iostream.h&amp;gt; &#xA;#include&amp;lt;conio.h&amp;gt; &#xA;#include&amp;lt;process.h&amp;gt;&#xA;&#xA;char inorder[20];&#xA;struct node {&#xA;    char data;&#xA;    int num;&#xA;    node * left;&#xA;    node * right;&#xA;};&#xA;&#xA;node * root;&#xA;&#xA;class bst {&#xA;    public:&#xA;    bst() {&#xA;        root = NULL;&#xA;    }&#xA;    node * insert(node * , int, char);&#xA;    node * create(char[]);&#xA;    void postorder(node * );&#xA;&#xA;};&#xA;&#xA;int pos(char a) {&#xA;    int p;&#xA;    for (int i = 0; inorder[i] != &#39;\0&#39;; i++) {&#xA;        if (inorder[i] == a) {&#xA;            p = i;&#xA;            break;&#xA;        }&#xA;    }&#xA;    return p;&#xA;}&#xA;&#xA;&#xA;node * bst::insert(node * root, int num, char data) {&#xA;    if (root == NULL) {&#xA;        root = new node;&#xA;        root-&amp;gt;data = data;&#xA;        root-&amp;gt;num = num;&#xA;        root-&amp;gt;left = root-&amp;gt;right = NULL;&#xA;    } else if (num &amp;lt; root-&amp;gt;num)&#xA;        root-&amp;gt;left = insert(root-&amp;gt;left, num, data);&#xA;    else&#xA;        root-&amp;gt;right = insert(root-&amp;gt;right, num, data);&#xA;&#xA;    return root;&#xA;&#xA;}&#xA;&#xA;node * bst::create(char pre[]) {&#xA;    const len = strlen(pre);&#xA;    char data;&#xA;    int num;&#xA;    for (int i = 0; i &amp;lt; len; i++) {&#xA;        data = pre[i];&#xA;        num = pos(pre[i]);&#xA;        root = this-&amp;gt;insert(root, num, data);&#xA;    }&#xA;    return root;&#xA;}&#xA;&#xA;&#xA;void bst::postorder(node * root) {&#xA;    if (root != NULL) {&#xA;        postorder(root-&amp;gt;left);&#xA;        postorder(root-&amp;gt;right);&#xA;        cout&amp;lt;&amp;lt;root-&amp;gt;data&amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;    }&#xA;}&#xA;&#xA;&#xA;void main() {&#xA;    clrscr();&#xA;    bst ob;&#xA;    char ino[25], pre[25];&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the inorder sequence: &amp;quot;;&#xA;    gets(ino);&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the preorder sequence: &amp;quot;;&#xA;    gets(pre);&#xA;    strcpy(inorder, ino);&#xA;    root = ob.create(pre);&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n The tree is created and the post order sequence is: &amp;quot;;&#xA;    ob.postorder(root);&#xA;    getch();&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;7wap-to-exchange-right-and-left-subtree-of-each-node-or-to-produce-mirror-image-of-the-tree&#34;&gt;&#xA;  7.WAP to exchange right and left subtree of each node OR to produce mirror image of the tree&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#7wap-to-exchange-right-and-left-subtree-of-each-node-or-to-produce-mirror-image-of-the-tree&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;lt;iostream.h&amp;gt; &#xA;#include&amp;lt;conio.h&amp;gt; &#xA;#include&amp;lt;process.h&amp;gt;&#xA;&#xA;struct node {&#xA;    char data;&#xA;    node * lchild, * rchild;&#xA;};&#xA;&#xA;node * head;&#xA;&#xA;class tree {&#xA;    node * root;&#xA;    public:&#xA;    tree() {&#xA;        root = NULL;&#xA;    }&#xA;    node * read();&#xA;    node * makenode(char);&#xA;    void createtree(node * );&#xA;    void inorder(node * );&#xA;    void preorder(node * );&#xA;    void postorder(node * );&#xA;    void exchange(node * );&#xA;};&#xA;&#xA;node * tree::read() {&#xA;    char item;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter data: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;item;&#xA;    root = makenode(item);&#xA;    createtree(root);&#xA;    return root;&#xA;}&#xA;&#xA;node * tree::makenode(char x) {&#xA;    head = new node;&#xA;    head-&amp;gt;data = x;&#xA;    head-&amp;gt;lchild = head-&amp;gt;rchild = NULL;&#xA;    return head;&#xA;}&#xA;&#xA;void tree::createtree(node * root) {&#xA;    int ch;&#xA;    char item;&#xA;    if (root != NULL) {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Create left child for &amp;quot;&amp;lt;&amp;lt;root-&amp;gt;data&amp;lt;&amp;lt;&amp;quot; (if so press \&amp;quot;1\&amp;quot;)&amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;        if (ch == 1) {&#xA;            cout&amp;lt;&amp;lt;&amp;quot;\n Enter data: &amp;quot;;&#xA;            cin&amp;gt;&amp;gt;item;&#xA;            root-&amp;gt;lchild = makenode(item);&#xA;            createtree(root-&amp;gt;lchild);&#xA;        }&#xA;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Create right child for &amp;quot;&amp;lt;&amp;lt;root-&amp;gt;data&amp;lt;&amp;lt;&amp;quot; (if so press \&amp;quot;1\&amp;quot;)&amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;        if (ch == 1) {&#xA;            cout&amp;lt;&amp;lt;&amp;quot;\n Enter data: &amp;quot;;&#xA;            cin&amp;gt;&amp;gt;item;&#xA;            root-&amp;gt;rchild = makenode(item);&#xA;            createtree(root-&amp;gt;rchild);&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;void tree::inorder(node * root) {&#xA;    if (root != NULL) {&#xA;        inorder(root-&amp;gt;lchild);&#xA;        cout&amp;lt;&amp;lt;root-&amp;gt;data&amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;        inorder(root-&amp;gt;rchild);&#xA;    }&#xA;}&#xA;&#xA;void tree::preorder(node * root) {&#xA;    if (root != NULL) {&#xA;        cout&amp;lt;&amp;lt;root-&amp;gt;data&amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;        preorder(root-&amp;gt;lchild);&#xA;        preorder(root-&amp;gt;rchild);&#xA;    }&#xA;}&#xA;&#xA;void tree::postorder(node * root) {&#xA;    if (root != NULL) {&#xA;        postorder(root-&amp;gt;lchild);&#xA;        postorder(root-&amp;gt;rchild);&#xA;        cout&amp;lt;&amp;lt;root-&amp;gt;data&amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;    }&#xA;}&#xA;&#xA;void tree::exchange(node * root) {&#xA;    if (root != NULL) {&#xA;        exchange(root-&amp;gt;lchild);&#xA;        exchange(root-&amp;gt;rchild);&#xA;        node * temp;&#xA;        temp = root-&amp;gt;lchild;&#xA;        root-&amp;gt;lchild = root-&amp;gt;rchild;&#xA;        root-&amp;gt;rchild = temp;&#xA;    }&#xA;}&#xA;&#xA;void main() {&#xA;    tree ob;&#xA;    node * root;&#xA;    int ch;&#xA;    clrscr();&#xA;    do {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n.... BINARY TREE ....\n\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n1.Creation\n2.Inorder Traversal\n3.Preorder Traversal&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n4.Postorder Traversal\n5.Exchange\n6.Exit&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\t Enter your choice: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;        switch (ch) {&#xA;            case 1:&#xA;                root = ob.read();&#xA;                break;&#xA;            case 2:&#xA;                ob.inorder(root);&#xA;                break;&#xA;            case 3:&#xA;                ob.preorder(root);&#xA;                break;&#xA;            case 4:&#xA;                ob.postorder(root);&#xA;                break;&#xA;            case 5:&#xA;                ob.exchange(root);&#xA;                break;&#xA;            case 6:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\n\t... Thanking You ...&amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            default:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n Invalid key-in &amp;quot;;&#xA;        }&#xA;&#xA;    } while (1);&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43; - Scientific Calculator</title>
      <link>https://dhanoopbhaskar.github.io/posts/2009-04-30-c-scientific-calculator/</link>
      <pubDate>Thu, 30 Apr 2009 18:54:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2009-04-30-c-scientific-calculator/</guid>
      <description>&lt;pre&gt;&lt;code&gt;#include&amp;lt;iostream.h&amp;gt;&#xA;#include&amp;lt;conio.h&amp;gt;&#xA;#include&amp;lt;math.h&amp;gt;&#xA;#include&amp;lt;stdio.h&amp;gt;&#xA;#include&amp;lt;process.h&amp;gt;&#xA;#include&amp;lt;graphics.h&amp;gt;&#xA;#include&amp;lt;ctype.h&amp;gt;&#xA;&#xA;double rfact(double);&#xA;void main() {&#xA;    int ch;&#xA;    int k, n, choice;&#xA;    float sinx, cosx, tanx, cotx, secx, cosecx;&#xA;    float x, j, i;&#xA;    clrscr();&#xA;    cin&amp;gt;&amp;gt;ch;&#xA;    if (ch == 4444) {&#xA;        int gdriver = DETECT, gmode, errorcode;&#xA;        initgraph( &amp;amp;gdriver, &amp;amp;gmode, &amp;quot;e:\\tc\\bgi&amp;quot;);&#xA;        setbkcolor(LIGHTRED);&#xA;        settextstyle(7, 0, 9);&#xA;        outtextxy(45, 160, &amp;quot;..WELCOME!..&amp;quot;); //page1&#xA;        getch();&#xA;        closegraph();&#xA;    }&#xA;    getch();&#xA;    clrscr();&#xA;    textcolor(YELLOW + 128);&#xA;    gotoxy(30, 12);&#xA;    cprintf(&amp;quot;COMPUTER EXHIBITION\n\r&amp;quot;); //page2&#xA;    textcolor(GREEN);&#xA;    gotoxy(30, 14);&#xA;    cprintf(&amp;quot;  Dhanoop Bhaskar \n\r&amp;quot;);&#xA;    textcolor(BLUE);&#xA;    gotoxy(30, 15);&#xA;    cprintf(&amp;quot;      C2 Batch\n\r&amp;quot;);&#xA;    textcolor(CYAN);&#xA;    gotoxy(30, 16);&#xA;    cprintf(&amp;quot;   CARDINAL .HSS\n\r &amp;quot;);&#xA;    textcolor(RED + 128);&#xA;    gotoxy(33, 19);&#xA;    cprintf(&amp;quot;INSTRUCTIONS:\n\r&amp;quot;);&#xA;    textcolor(YELLOW);&#xA;    gotoxy(22, 20);&#xA;    cprintf(&amp;quot;\(The Scientific Calculator enables to\n\r&amp;quot;);&#xA;    gotoxy(22, 21);&#xA;    cprintf(&amp;quot;Find the values of trigonometric funtions\)\n\r &amp;quot;);&#xA;    textcolor(LIGHTGREEN);&#xA;    gotoxy(22, 22);&#xA;    cprintf(&amp;quot;:Please try to give appropiate values only\n\r &amp;quot;);&#xA;    gotoxy(22, 23);&#xA;    cprintf(&amp;quot;:Follow the instructions given in brackets\n\r&amp;quot;);&#xA;    gotoxy(22, 24);&#xA;    cprintf(&amp;quot;:Donot attempt malpractices\n\r&amp;quot;);&#xA;    gotoxy(22, 25);&#xA;    cprintf(&amp;quot;:Use only numerical values\n\r&amp;quot;);&#xA;    getch();&#xA;    do {&#xA;        clrscr();&#xA;        gotoxy(30, 9);&#xA;        textcolor(YELLOW + 128);&#xA;        textbackground(RED);&#xA;        cprintf(&amp;quot; SCIENTIFIC CALCULATOR \n\r&amp;quot;); //page3&#xA;        textcolor(YELLOW);&#xA;        textbackground(BLACK);&#xA;        gotoxy(30, 13);&#xA;        cprintf(&amp;quot;       MAIN MENU       \n\r&amp;quot;);&#xA;        gotoxy(30, 15);&#xA;        cprintf(&amp;quot;1.SINE:               \n\r&amp;quot;);&#xA;        gotoxy(30, 16);&#xA;        cprintf(&amp;quot;2.COSINE:             \n\r&amp;quot;);&#xA;        gotoxy(30, 17);&#xA;        cprintf(&amp;quot;3.TANGENT:            \n\r&amp;quot;);&#xA;        gotoxy(30, 18);&#xA;        cprintf(&amp;quot;4.COTANGENT:          \n\r&amp;quot;);&#xA;        gotoxy(30, 19);&#xA;        cprintf(&amp;quot;5.SECANT:             \n\r&amp;quot;);&#xA;        gotoxy(30, 20);&#xA;        cprintf(&amp;quot;6.COSECANT:           \n\r&amp;quot;);&#xA;        gotoxy(30, 21);&#xA;        cprintf(&amp;quot;7.EXIT:               \n\r&amp;quot;);&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter your choice &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;choice;&#xA;        if (choice &amp;lt; 7) {&#xA;            cout&amp;lt;&amp;lt;&amp;quot;\n Enter the angle in degrees &amp;quot;;&#xA;            cout&amp;lt;&amp;lt;&amp;quot;\n (Please enter angle between -360&amp;amp;+360 ) &amp;quot;;&#xA;            cin&amp;gt;&amp;gt;i;&#xA;            if (i &amp;gt; 360 || i &amp;lt; -360) {&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n Sorry!!!!... cannot find the values at present &amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            }&#xA;            x = i * 0.01745;&#xA;        }&#xA;&#xA;        switch (choice) {&#xA;            case 1:&#xA;                sinx = 0; //sine&#xA;                for (j = 1, k = 1; j &amp;lt; 50; j += 2, k++) {&#xA;                    if (k % 2 == 0)&#xA;                        n = -1;&#xA;                    else&#xA;                        n = 1;&#xA;                    sinx = (sinx) + ((n * pow(x, j)) / (rfact(j)));&#xA;                }&#xA;                if (i == 0 || i == 180 || i == 360)&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n sinx=&amp;quot; &amp;lt;&amp;lt;0;&#xA;                else if (i == 90)&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n sinx=&amp;quot; &amp;lt;&amp;lt;1;&#xA;                else if (i == 270)&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n sinx=&amp;quot; &amp;lt;&amp;lt;-1;&#xA;                else&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n sin x=&amp;quot; &amp;lt;&amp;lt;sinx;&#xA;                getch();&#xA;                break;&#xA;            case 2:&#xA;                cosx = 1; //cosine&#xA;                for (j = 2, k = 1; j &amp;lt; 50; j += 2, k++) {&#xA;                    if (k % 2 == 0)&#xA;                        n = 1;&#xA;                    else&#xA;                        n = -1;&#xA;                    cosx = (cosx) + ((n * pow(x, j)) / (rfact(j)));&#xA;                }&#xA;                if (i == 0 || i == 360)&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n cosx=&amp;quot; &amp;lt;&amp;lt;1;&#xA;                else if (i == 180)&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n cosx=&amp;quot; &amp;lt;&amp;lt;-1;&#xA;                else if (i == 90 || i == 270)&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n cosx=&amp;quot; &amp;lt;&amp;lt;0;&#xA;                else&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n cos x=&amp;quot; &amp;lt;&amp;lt;cosx;&#xA;                getch();&#xA;                break;&#xA;            case 3:&#xA;                sinx = 0; //tangent&#xA;                for (j = 1, k = 1; j &amp;lt; 50; j += 2, k++) {&#xA;                    if (k % 2 == 0)&#xA;                        n = -1;&#xA;                    else&#xA;                        n = 1;&#xA;                    sinx = (sinx) + ((n * pow(x, j)) / (rfact(j)));&#xA;                }&#xA;                cosx = 1;&#xA;                for (j = 2, k = 1; j &amp;lt; 50; j += 2, k++) {&#xA;                    if (k % 2 == 0)&#xA;                        n = 1;&#xA;                    else&#xA;                        n = -1;&#xA;                    cosx = (cosx) + ((n * pow(x, j)) / (rfact(j)));&#xA;                }&#xA;                if (i == 90 || i == 270 || cosx == 0) {&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n tan x is not defined &amp;quot;;&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n\( cosx=&amp;quot; &amp;lt;&amp;lt;0 &amp;lt;&amp;lt;&amp;quot; appro\)&amp;quot;;&#xA;                } else if (i == 0 || i == 180 || i == 360)&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n tanx=&amp;quot; &amp;lt;&amp;lt;0;&#xA;                else {&#xA;                    tanx = sinx / cosx;&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n tan x=&amp;quot; &amp;lt;&amp;lt;tanx;&#xA;                    getch();&#xA;                }&#xA;                break;&#xA;            case 4:&#xA;                sinx = 0; //cotangent&#xA;                for (j = 1, k = 1; j &amp;lt; 50; j += 2, k++) {&#xA;                    if (k % 2 == 0)&#xA;                        n = -1;&#xA;                    else&#xA;                        n = 1;&#xA;                    sinx = (sinx) + ((n * pow(x, j)) / (rfact(j)));&#xA;                }&#xA;                cosx = 1;&#xA;                for (j = 2, k = 1; j &amp;lt; 50; j += 2, k++) {&#xA;                    if (k % 2 == 0)&#xA;                        n = 1;&#xA;                    else&#xA;                        n = -1;&#xA;                    cosx = (cosx) + ((n * pow(x, j)) / (rfact(j)));&#xA;                }&#xA;                if (i == 0 || i == 90 || i == 180 || i == 270 || i == 360 || sinx == 0) {&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n cot x is not defined &amp;quot;;&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n\( sinx=&amp;quot; &amp;lt;&amp;lt;0 &amp;lt;&amp;lt;&amp;quot; appro\)&amp;quot;;&#xA;                } else {&#xA;                    cotx = cosx / sinx;&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n cot x=&amp;quot; &amp;lt;&amp;lt;cotx;&#xA;                    getch();&#xA;                }&#xA;                break;&#xA;            case 5:&#xA;                cosx = 1; //secant&#xA;                for (j = 2, k = 1; j &amp;lt; 50; j += 2, k++) {&#xA;                    if (k % 2 == 0)&#xA;                        n = 1;&#xA;                    else&#xA;                        n = -1;&#xA;                    cosx = (cosx) + ((n * pow(x, j)) / (rfact(j)));&#xA;                }&#xA;                if (i == 90 || i == 270 || cosx == 0) {&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n sec x is not defined &amp;quot;;&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n\( cosx=&amp;quot; &amp;lt;&amp;lt;0 &amp;lt;&amp;lt;&amp;quot; appro\)&amp;quot;;&#xA;                } else if (i == 0 || i == 360)&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n secx=&amp;quot; &amp;lt;&amp;lt;1;&#xA;                else if (i == 180)&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n secx=&amp;quot; &amp;lt;&amp;lt;-1;&#xA;                else {&#xA;                    secx = 1 / cosx;&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n sec x=&amp;quot; &amp;lt;&amp;lt;secx;&#xA;                    getch();&#xA;                }&#xA;                break;&#xA;            case 6:&#xA;                sinx = 0; //cosecant&#xA;                for (j = 1, k = 1; j &amp;lt; 50; j += 2, k++) {&#xA;                    if (k % 2 == 0)&#xA;                        n = -1;&#xA;                    else&#xA;                        n = 1;&#xA;                    sinx = (sinx) + ((n * pow(x, j)) / (rfact(j)));&#xA;                }&#xA;                if (i == 0 || i == 180 || i == 360 || sinx == 0) {&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n cosec x is not defined &amp;quot;;&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n\( sinx=&amp;quot; &amp;lt;&amp;lt;0 &amp;lt;&amp;lt;&amp;quot; appro\)&amp;quot;;&#xA;                } else if (i == 90)&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n cosecx=&amp;quot; &amp;lt;&amp;lt;1;&#xA;                else if (i == 270)&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n cosecx=&amp;quot; &amp;lt;&amp;lt;-1;&#xA;                else {&#xA;                    cosecx = 1 / sinx;&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n cosec x=&amp;quot; &amp;lt;&amp;lt;cosecx;&#xA;                    getch();&#xA;                }&#xA;                break;&#xA;            case 7:&#xA;                exit(0);&#xA;            default:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n Invalid choice &amp;quot;;&#xA;        }&#xA;        getch();&#xA;    } while (1);&#xA;}&#xA;&#xA;double rfact(double d) {&#xA;    if (d &amp;lt; 2)&#xA;        return (1);&#xA;    else&#xA;        return (d * rfact(d - 1));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>DATA STRUCTURE PROGRAMS IN C&#43;&#43;</title>
      <link>https://dhanoopbhaskar.github.io/posts/2009-04-23-data-structure-programs-in-c/</link>
      <pubDate>Thu, 23 Apr 2009 19:10:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2009-04-23-data-structure-programs-in-c/</guid>
      <description>&lt;h3 id=&#34;write-a-c-program-to-find-the-sparse-of-a-matrix&#34;&gt;&#xA;  Write a C++ program to find the sparse of a matrix&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-find-the-sparse-of-a-matrix&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;lt;iostream.h&amp;gt;&#xA;#include&amp;lt;conio.h&amp;gt;&#xA;&#xA;void main() {&#xA;    int a[50][50], sp[50][50], i, j, k = 0, m, n;&#xA;    clrscr();&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the order of matrix: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;m&amp;gt;&amp;gt;n;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the elements: &amp;quot;;&#xA;    for (i = 0; i &amp;lt; m; i++) {&#xA;        for (j = 0; j &amp;lt; n; j++) {&#xA;            cin&amp;gt;&amp;gt;a[i][j];&#xA;            if (a[i][j] != 0) {&#xA;                k++;&#xA;                sp[k][0] = i;&#xA;                sp[k][1] = j;&#xA;                sp[k][2] = a[i][j];&#xA;            }&#xA;        }&#xA;    }&#xA;    sp[0][0] = m;&#xA;    sp[0][1] = n;&#xA;    sp[0][2] = k;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n The sparse matrix is:\n&amp;quot;;&#xA;    for (i = 0; i &amp;lt;= k; i++) {&#xA;        for (j = 0; j &amp;lt; 3; j++)&#xA;            cout&amp;lt;&amp;lt;sp[i][j] &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n&amp;quot;;&#xA;    }&#xA;    getch();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;Enter the order of matrix: 3 3  &#xA;  &#xA;Enter the elements:  &#xA;0 1 0  &#xA;2 0 0  &#xA;0 0 3  &#xA;  &#xA;The sparse matrix is:  &#xA;3 3 3  &#xA;0 1 1  &#xA;1 0 2  &#xA;2 2 3  &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-find-the-transpose-of-a-matrix-using-the-given-sparse-matrix&#34;&gt;&#xA;  Write a C++ program to find the transpose of a matrix using the given sparse matrix&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-find-the-transpose-of-a-matrix-using-the-given-sparse-matrix&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;lt;iostream.h&amp;gt;&#xA;#include&amp;lt;conio.h&amp;gt;&#xA;void main() {&#xA;    int a[50][50], sp[50][50], i, j, k = 0, m, n, tsp[50][50], p = 0;&#xA;    clrscr();&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the order of matrix: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;m&amp;gt;&amp;gt;n;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the elements: &amp;quot;;&#xA;    for (i = 0; i &amp;lt; m; i++) {&#xA;        for (j = 0; j &amp;lt; n; j++) {&#xA;            cin&amp;gt;&amp;gt;a[i][j];&#xA;            if (a[i][j] != 0) {&#xA;                k++;&#xA;                sp[k][0] = i;&#xA;                sp[k][1] = j;&#xA;                sp[k][2] = a[i][j];&#xA;            }&#xA;        }&#xA;    }&#xA;    sp[0][0] = m;&#xA;    sp[0][1] = n;&#xA;    sp[0][2] = k;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n The sparse matrix is:\n&amp;quot;;&#xA;    for (i = 0; i &amp;lt;= k; i++) {&#xA;        for (j = 0; j &amp;lt; 3; j++)&#xA;            cout&amp;lt;&amp;lt;sp[i][j] &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n&amp;quot;;&#xA;    }&#xA;    p = 0;&#xA;    for (j = 0; j &amp;lt; n; j++) {&#xA;        for (i = 1; i &amp;lt;= k; i++) {&#xA;            if (sp[i][1] == j) {&#xA;                p++;&#xA;                tsp[p][0] = sp[i][1];&#xA;                tsp[p][1] = sp[i][0];&#xA;                tsp[p][2] = sp[i][2];&#xA;            }&#xA;        }&#xA;    }&#xA;    tsp[0][0] = sp[0][1];&#xA;    tsp[0][1] = sp[0][0];&#xA;    tsp[0][2] = p;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Transpose of sparse \n&amp;quot;;&#xA;    for (i = 0; i &amp;lt;= p; i++) {&#xA;        for (j = 0; j &amp;lt; 3; j++)&#xA;            cout&amp;lt;&amp;lt;tsp[i][j] &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n&amp;quot;;&#xA;    }&#xA;&#xA;    getch();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-1&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-1&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;Enter the order of matrix: 3 3  &#xA;  &#xA;Enter the elements:  &#xA;1 0 0  &#xA;0 0 2  &#xA;0 3 0  &#xA;  &#xA;The sparse matrix is:  &#xA;3 3 3  &#xA;0 0 1  &#xA;1 2 2  &#xA;2 1 3  &#xA;  &#xA;Transpose of sparse  &#xA;3 3 3  &#xA;0 0 1  &#xA;1 2 3  &#xA;2 1 2  &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-find-transpose-of-a-matrix-using-fast-transpose-method&#34;&gt;&#xA;  Write a C++ program to find transpose of a matrix using fast transpose method&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-find-transpose-of-a-matrix-using-fast-transpose-method&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;lt;iostream.h&amp;gt;&#xA;#include&amp;lt;conio.h&amp;gt;&#xA;void main() {&#xA;    int a[50][50], sp[50][50], i, j, k = 0, m, n, t, tsp[50][50];&#xA;    int start[50], size[50];&#xA;    clrscr();&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the order of matrix: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;m&amp;gt;&amp;gt;n;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the elements: &amp;quot;;&#xA;    for (i = 0; i &amp;lt; m; i++) {&#xA;        for (j = 0; j &amp;lt; n; j++) {&#xA;            cin&amp;gt;&amp;gt;a[i][j];&#xA;            if (a[i][j] != 0) {&#xA;                k++;&#xA;                sp[k][0] = i;&#xA;                sp[k][1] = j;&#xA;                sp[k][2] = a[i][j];&#xA;            }&#xA;        }&#xA;    }&#xA;    sp[0][0] = m;&#xA;    sp[0][1] = n;&#xA;    sp[0][2] = k;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n The sparse matrix is:\n&amp;quot;;&#xA;    for (i = 0; i &amp;lt;= k; i++) {&#xA;        for (j = 0; j &amp;lt; 3; j++)&#xA;            cout&amp;lt;&amp;lt;sp[i][j] &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n&amp;quot;;&#xA;    }&#xA;    for (i = 0; i &amp;lt; n; i++)&#xA;        size[i] = 0;&#xA;&#xA;    for (i = 1; i &amp;lt;= k; i++) {&#xA;        t = sp[i][1];&#xA;        size[t]++;&#xA;    }&#xA;    start[0] = 1;&#xA;    for (i = 1; i &amp;lt; n; i++)&#xA;        start[i] = start[i - 1] + size[i - 1];&#xA;&#xA;&#xA;    for (i = 1; i &amp;lt;= k; i++) {&#xA;        j = sp[i][1];&#xA;        t = start[j];&#xA;        tsp[t][0] = sp[i][1];&#xA;        tsp[t][1] = sp[i][0];&#xA;        tsp[t][2] = sp[i][2];&#xA;        start[j]++;&#xA;    }&#xA;&#xA;    tsp[0][0] = sp[0][1];&#xA;    tsp[0][1] = sp[0][0];&#xA;    tsp[0][2] = sp[0][2];&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Transpose \n&amp;quot;;&#xA;    for (i = 0; i &amp;lt;= k; i++) {&#xA;        for (j = 0; j &amp;lt; 3; j++)&#xA;            cout&amp;lt;&amp;lt;tsp[i][j] &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n&amp;quot;;&#xA;    }&#xA;    getch();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-2&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-2&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;Enter the order of matrix: 3 3  &#xA;  &#xA;Enter the elements:  &#xA;0 1 0  &#xA;2 0 0  &#xA;0 0 5  &#xA;  &#xA;The sparse matrix is:  &#xA;3 3 3  &#xA;0 1 1  &#xA;1 0 2  &#xA;2 2 5  &#xA;  &#xA;Transpose  &#xA;3 3 3  &#xA;0 1 2  &#xA;1 0 1  &#xA;2 2 5  &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-convert-the-given-sparse-to-original-matrix&#34;&gt;&#xA;  Write a C++ program to convert the given sparse to original matrix&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-convert-the-given-sparse-to-original-matrix&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;lt;iostream.h&amp;gt;&#xA;#include&amp;lt;conio.h&amp;gt;&#xA;#include&amp;lt;process.h&amp;gt;&#xA;&#xA;void main() {&#xA;    int sp[50][50], a[40][40], k, i, j, m, n, r, c;&#xA;    clrscr();&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the order of sparse matrix: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;n;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the sparse matrix: &amp;quot;;&#xA;    for (i = 0; i &amp;lt; n; i++)&#xA;        for (j = 0; j &amp;lt; 3; j++)&#xA;            cin&amp;gt;&amp;gt;sp[i][j];&#xA;&#xA;    if (sp[0][2] != (n - 1)) {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Error &amp;quot;;&#xA;        getch();&#xA;        exit(0);&#xA;    }&#xA;&#xA;    for (i = 0; i &amp;lt; 40; i++)&#xA;        for (j = 0; j &amp;lt; 40; j++)&#xA;            a[i][j] = 0;&#xA;&#xA;    m = sp[0][0];&#xA;    n = sp[0][1];&#xA;    k = sp[0][2];&#xA;&#xA;    for (i = 1; i &amp;lt;= k; i++) {&#xA;        r = sp[i][0];&#xA;        c = sp[i][1];&#xA;        a[r][c] = sp[i][2];&#xA;    }&#xA;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n The original matrix is: \n&amp;quot;;&#xA;    for (i = 0; i &amp;lt; m; i++) {&#xA;        for (j = 0; j &amp;lt; n; j++)&#xA;            cout&amp;lt;&amp;lt;a[i][j] &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n&amp;quot;;&#xA;    }&#xA;    getch();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-3&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-3&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;Enter the order of sparse matrix: 4  &#xA;  &#xA;Enter the sparse matrix:  &#xA;3 3 3  &#xA;0 1 2  &#xA;1 0 1  &#xA;2 1 3  &#xA;  &#xA;The original matrix is:  &#xA;0 2 0  &#xA;1 0 0  &#xA;0 3 0  &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-perform-sparse-matrix-addition&#34;&gt;&#xA;  Write a C++ program to perform sparse matrix addition&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-perform-sparse-matrix-addition&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;quot;iostream.h&amp;quot;&#xA;#include&amp;quot;conio.h&amp;quot;&#xA;&#xA;void main() {&#xA;    int num, sp1[50][50], i, j, k1 = 0, k2 = 0, k = 0, m1, n1, m2, n2, sp2[50][50], sp[50][50];&#xA;    int m, n;&#xA;    clrscr();&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the order of matrix1: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;m1&amp;gt;&amp;gt;n1;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the elements: &amp;quot;;&#xA;    for (i = 0; i &amp;lt; m1; i++) {&#xA;        for (j = 0; j &amp;lt; n1; j++) {&#xA;            cin&amp;gt;&amp;gt;num;&#xA;            if (num != 0) {&#xA;                k1++;&#xA;                sp1[k1][0] = i;&#xA;                sp1[k1][1] = j;&#xA;                sp1[k1][2] = num;&#xA;            }&#xA;        }&#xA;    }&#xA;    sp1[0][0] = m1;&#xA;    sp1[0][1] = n1;&#xA;    sp1[0][2] = k1;&#xA;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the order of matrix2: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;m2&amp;gt;&amp;gt;n2;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the elements: &amp;quot;;&#xA;    for (i = 0; i &amp;lt; m2; i++) {&#xA;        for (j = 0; j &amp;lt; n2; j++) {&#xA;            cin&amp;gt;&amp;gt;num;&#xA;            if (num != 0) {&#xA;                k2++;&#xA;                sp2[k2][0] = i;&#xA;                sp2[k2][1] = j;&#xA;                sp2[k2][2] = num;&#xA;            }&#xA;        }&#xA;    }&#xA;    sp2[0][0] = m2;&#xA;    sp2[0][1] = n2;&#xA;    sp2[0][2] = k2;&#xA;    i = 1;&#xA;    j = 1;&#xA;    k = 0;&#xA;    while (i &amp;lt;= k1 &amp;amp;&amp;amp; j &amp;lt;= k2) {&#xA;        if (sp1[i][0] == sp2[j][0]) {&#xA;            if (sp1[i][1] &amp;lt; sp2[j][1]) {&#xA;                k++;&#xA;                sp[k][0] = sp1[i][0];&#xA;                sp[k][1] = sp1[i][1];&#xA;                sp[k][2] = sp1[i][2];&#xA;                i++;&#xA;            } else if (sp1[i][1] &amp;gt; sp2[j][1]) {&#xA;                k++;&#xA;                sp[k][0] = sp2[j][0];&#xA;                sp[k][1] = sp2[j][1];&#xA;                sp[k][2] = sp2[j][2];&#xA;                j++;&#xA;            } else {&#xA;                k++;&#xA;                sp[k][0] = sp2[j][0];&#xA;                sp[k][1] = sp2[j][1];&#xA;                sp[k][2] = sp2[j][2] + sp1[i][2];&#xA;                j++;&#xA;                i++;&#xA;            }&#xA;        } else if (sp1[i][0] &amp;lt; sp2[j][0]) {&#xA;            k++;&#xA;            sp[k][0] = sp1[i][0];&#xA;            sp[k][1] = sp1[i][1];&#xA;            sp[k][2] = sp1[i][2];&#xA;            i++;&#xA;        } else if (sp1[i][0] &amp;gt; sp2[j][0]) {&#xA;            k++;&#xA;            sp[k][0] = sp2[j][0];&#xA;            sp[k][1] = sp2[j][1];&#xA;            sp[k][2] = sp2[j][2];&#xA;            j++;&#xA;        }&#xA;    }&#xA;    while (i &amp;lt;= k1) {&#xA;        k++;&#xA;        sp[k][0] = sp1[i][0];&#xA;        sp[k][1] = sp1[i][1];&#xA;        sp[k][2] = sp1[i][2];&#xA;        i++;&#xA;    }&#xA;    while (j &amp;lt;= k2) {&#xA;        k++;&#xA;        sp[k][0] = sp2[j][0];&#xA;        sp[k][1] = sp2[j][1];&#xA;        sp[k][2] = sp2[j][2];&#xA;        j++;&#xA;    }&#xA;    m = ((m1 &amp;gt; m2) ? m1 : m2);&#xA;    n = ((n1 &amp;gt; n2) ? n1 : n2);&#xA;    sp[0][0] = m;&#xA;    sp[0][1] = n;&#xA;    sp[0][2] = k;&#xA;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n The sparse of sum matrix is:\n&amp;quot;;&#xA;    for (i = 0; i &amp;lt;= k; i++) {&#xA;        for (j = 0; j &amp;lt; 3; j++)&#xA;            cout&amp;lt;&amp;lt;sp[i][j] &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n&amp;quot;;&#xA;    }&#xA;    getch();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-4&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-4&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;Enter the order of matrix1: 3 3&#xA;&#xA;Enter the elements:&#xA;1 0 0&#xA;0 5 0&#xA;0 0 6&#xA;&#xA;Enter the order of matrix2: 3 3&#xA;&#xA;Enter the elements:&#xA;0 5 0&#xA;0 6 0&#xA;0 0 3&#xA;&#xA;The sparse of sum matrix is:&#xA;3 3 4&#xA;0 0 1&#xA;0 1 5&#xA;1 1 11&#xA;2 2 9&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-perform-sparse-multiplication&#34;&gt;&#xA;  Write a C++ program to perform sparse multiplication&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-perform-sparse-multiplication&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;quot;iostream.h&amp;quot;&#xA;#include&amp;quot;conio.h&amp;quot;&#xA;#include&amp;quot;process.h&amp;quot;&#xA;&#xA;void main() {&#xA;    int num, sp1[50][50], mul[50][50], i, j, k1 = 0, k2 = 0, k = 0, m1, n1, m2, n2, sp2[50][50], sp[50][50];&#xA;    int m, n, t;&#xA;    clrscr();&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the order of matrix1: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;m1&amp;gt;&amp;gt;n1;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the elements: &amp;quot;;&#xA;    for (i = 0; i &amp;lt; m1; i++) {&#xA;        for (j = 0; j &amp;lt; n1; j++) {&#xA;            cin&amp;gt;&amp;gt;num;&#xA;            if (num != 0) {&#xA;                k1++;&#xA;                sp1[k1][0] = i;&#xA;                sp1[k1][1] = j;&#xA;                sp1[k1][2] = num;&#xA;            }&#xA;        }&#xA;    }&#xA;    sp1[0][0] = m1;&#xA;    sp1[0][1] = n1;&#xA;    sp1[0][2] = k1;&#xA;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the order of matrix2: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;m2&amp;gt;&amp;gt;n2;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the elements: &amp;quot;;&#xA;    for (i = 0; i &amp;lt; m2; i++) {&#xA;        for (j = 0; j &amp;lt; n2; j++) {&#xA;            cin&amp;gt;&amp;gt;num;&#xA;            if (num != 0) {&#xA;                k2++;&#xA;                sp2[k2][0] = i;&#xA;                sp2[k2][1] = j;&#xA;                sp2[k2][2] = num;&#xA;            }&#xA;        }&#xA;    }&#xA;    sp2[0][0] = m2;&#xA;    sp2[0][1] = n2;&#xA;    sp2[0][2] = k2;&#xA;&#xA;    if (n1 != m2) {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Error &amp;quot;;&#xA;        getch();&#xA;        exit(0);&#xA;    }&#xA;&#xA;    k = 0;&#xA;    for (i = 1; i &amp;lt;= k1; i++) {&#xA;        for (j = 1; j &amp;lt;= k2; j++) {&#xA;            if (sp1[i][1] == sp2[j][0]) {&#xA;                k++;&#xA;                sp[k][0] = sp1[i][0];&#xA;                sp[k][1] = sp2[j][1];&#xA;                sp[k][2] = sp1[i][2] * sp2[j][2];&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    sp[0][2] = k;&#xA;    sp[0][0] = m1;&#xA;    sp[0][1] = n2;&#xA;&#xA;    t = 0;&#xA;    for (i = 0; i &amp;lt; sp[0][0]; i++) {&#xA;        for (j = 0; j &amp;lt; sp[0][1]; j++) {&#xA;            for (k1 = 1; k1 &amp;lt;= sp[0][2]; k1++) {&#xA;                if (sp[k1][0] == i &amp;amp;&amp;amp; sp[k1][1] == j) {&#xA;                    t++;&#xA;                    mul[t][0] = sp[k1][0];&#xA;                    mul[t][1] = sp[k1][1];&#xA;                    mul[t][2] = sp[k1][2];&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    mul[0][2] = k;&#xA;    mul[0][0] = m1;&#xA;    mul[0][1] = n2;&#xA;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n The sparse of product matrix is:\n&amp;quot;;&#xA;    for (i = 0; i &amp;lt;= t; i++) {&#xA;        for (j = 0; j &amp;lt; 3; j++)&#xA;            cout&amp;lt;&amp;lt;mul[i][j] &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n&amp;quot;;&#xA;    }&#xA;&#xA;    getch();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-5&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-5&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;Enter the order of matrix1: 3 3&#xA;&#xA;Enter the elements:&#xA;2 0 9&#xA;0 1 0&#xA;0 0 2&#xA;&#xA;Enter the order of matrix2: 3 3&#xA;&#xA;Enter the elements:&#xA;0 0 3&#xA;1 0 1&#xA;2 1 0&#xA;&#xA;The sparse of product matrix is:&#xA;3 3 7&#xA;0 0 18&#xA;0 1 9&#xA;0 2 6&#xA;1 0 1&#xA;1 2 1&#xA;2 0 4&#xA;2 1 2&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-convert-an-infix-expression-to-postfix-and-evaluate&#34;&gt;&#xA;  Write a C++ program to convert an infix expression to postfix and evaluate&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-convert-an-infix-expression-to-postfix-and-evaluate&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;quot;iostream.h&amp;quot;&#xA;#include&amp;quot;conio.h&amp;quot;&#xA;#include&amp;quot;stdio.h&amp;quot;&#xA;#include&amp;quot;ctype.h&amp;quot;&#xA;#include&amp;quot;string.h&amp;quot;&#xA;#include&amp;quot;process.h&amp;quot;&#xA;#include&amp;quot;math.h&amp;quot;&#xA;&#xA;int top = -1;&#xA;int stack[50];&#xA;int p;&#xA;void evaluate(char[], int);&#xA;&#xA;void display(char a[], int n) {&#xA;    int i;&#xA;    for (i = 0; i &amp;lt;= n; i++) {&#xA;        cout&amp;lt;&amp;lt;a[i];&#xA;    }&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n&amp;quot;;&#xA;}&#xA;&#xA;void inpst(char q[]) {&#xA;        char stk[50], tp[50], op, ot;&#xA;        int s = -1, p = -1, j, k, l, h, flg1, flg2;&#xA;        char pcdn[6] = {&#xA;            &#39;-&#39;,&#xA;            &#39;+&#39;,&#xA;            &#39;/&#39;,&#xA;            &#39;*&#39;,&#xA;            &#39;^&#39;,&#xA;            &#39;\0&#39;&#xA;        };&#xA;        int pval[5] = {&#xA;            1,&#xA;            1,&#xA;            2,&#xA;            2,&#xA;            3&#xA;        };&#xA;&#xA;        for (int i = 0; q[i] != &#39;\0&#39;; i++) {&#xA;            flg1 = flg2 = -1;&#xA;            if (isalpha(q[i])) {&#xA;                p++;&#xA;                tp[p] = q[i];&#xA;&#xA;            } else if (q[i] == &#39;(&#39;) {&#xA;                s++;&#xA;                stk[s] = q[i];&#xA;&#xA;            } else if (q[i] == &#39;)&#39;) {&#xA;                for (j = s; j &amp;gt;= 0; j--) {&#xA;                    if (stk[s] == &#39;(&#39;)&#xA;                        break;&#xA;&#xA;                    if (stk[j] != &#39;(&#39;) {&#xA;                        p++;&#xA;                        tp[p] = stk[j];&#xA;&#xA;                        s--;&#xA;&#xA;                    }&#xA;                }&#xA;&#xA;                s--;&#xA;&#xA;&#xA;            } else {&#xA;                op = q[i];&#xA;                flg1 = -1;&#xA;                /* to find precedence value */&#xA;                for (h = 0; pcdn[h] != &#39;\0&#39;; h++) {&#xA;                    if (op == pcdn[h]) {&#xA;                        flg1 = pval[h];&#xA;                        break;&#xA;                    }&#xA;                }&#xA;&#xA;                /* check for higher precedence operator */&#xA;&#xA;                for (k = s; k &amp;gt;= 0; k--) {&#xA;                    flg2 = -1;&#xA;                    ot = stk[k];&#xA;&#xA;                    for (h = 0; pcdn[h] != &#39;\0&#39;; h++) {&#xA;                        if (ot == pcdn[h]) {&#xA;                            flg2 = pval[h];&#xA;                            break;&#xA;                        }&#xA;                    }&#xA;&#xA;                    if (flg2 &amp;gt; flg1) {&#xA;                        p++;&#xA;                        tp[p] = ot;&#xA;                        for (l = k; l {&#xA;                                stk[k] = stk[k + 1];&#xA;                            }&#xA;                            s--;&#xA;&#xA;                        }&#xA;&#xA;&#xA;                    }&#xA;                    s++;&#xA;                    stk[s] = op;&#xA;                }&#xA;            }&#xA;&#xA;            while (s &amp;gt;= 0) {&#xA;                p++;&#xA;                tp[p] = stk[s];&#xA;                s--;&#xA;            }&#xA;&#xA;            cout&amp;lt;&amp;lt;&amp;quot;\n The post fix expression is: &amp;quot;;&#xA;            display(tp, p);&#xA;&#xA;            evaluate(tp, p);&#xA;        }&#xA;&#xA;        int result(int a, int b, char op) {&#xA;            int c = 0;&#xA;&#xA;            switch (op) {&#xA;                case &#39;+&#39;:&#xA;                    c = a + b;&#xA;                    break;&#xA;                case &#39;-&#39;:&#xA;                    c = a - b;&#xA;                    break;&#xA;                case &#39;*&#39;:&#xA;                    c = a * b;&#xA;                    break;&#xA;                case &#39;/&#39;:&#xA;                    if (b != 0)&#xA;                        c = a / b;&#xA;                    else {&#xA;                        cout&amp;lt;&amp;lt;&amp;quot;\n Error: &amp;quot;;&#xA;                        getch();&#xA;                        exit(0);&#xA;                    }&#xA;                    break;&#xA;                case &#39;^&#39;:&#xA;                    c = (int) pow(a, b);&#xA;                    break;&#xA;                case &#39;%&#39;:&#xA;                    c = a % b;&#xA;                    break;&#xA;            }&#xA;            return c;&#xA;        }&#xA;&#xA;        void push(int item) {&#xA;            stack[++top] = item;&#xA;        }&#xA;&#xA;        int pop() {&#xA;            int s;&#xA;            if (top &amp;gt;= 0) {&#xA;                s = stack[top];&#xA;                top--;&#xA;                return s;&#xA;            } else&#xA;                return 0;&#xA;        }&#xA;&#xA;        void evaluate(char post[], int p) {&#xA;            int a, b, v = 0, q;&#xA;            top = -1;&#xA;&#xA;            for (int i = 0; i &amp;lt;= p; i++) {&#xA;                if (isalpha(post[i])) {&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n Enter value for &amp;quot; &amp;lt;&amp;lt;post[i] &amp;lt;&amp;lt;&amp;quot;: &amp;quot;;&#xA;                    cin&amp;gt;&amp;gt;q;&#xA;                    push(q);&#xA;                    continue;&#xA;                } else {&#xA;                    a = pop();&#xA;                    b = pop();&#xA;                    v = result(a, b, post[i]);&#xA;                    push(v);&#xA;                }&#xA;                a = b = 0;&#xA;            }&#xA;&#xA;        }&#xA;&#xA;        void main() {&#xA;            char q[50];&#xA;            clrscr();&#xA;            cout&amp;lt;&amp;lt;&amp;quot;\n Enter the infix expression: &amp;quot;;&#xA;            gets(q);&#xA;            inpst(q);&#xA;            cout&amp;lt;&amp;lt;&amp;quot;\n Value of expression &amp;quot; &amp;lt;&amp;lt;stack[top];&#xA;            getch();&#xA;        }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-6&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-6&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;Enter the infix expression: a * b + c * d&#xA;&#xA;The post fix expression is: ab * cd * +&#xA;&#xA;Enter value for a: 2&#xA;&#xA;Enter value for b: 3&#xA;&#xA;Enter value for c: 4&#xA;&#xA;Enter value for d: 5&#xA;&#xA;Value of expression 26&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-implement-stack-operations&#34;&gt;&#xA;  Write a C++ program to implement stack operations&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-implement-stack-operations&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;quot;iostream.h&amp;quot;&#xA;#include&amp;quot;conio.h&amp;quot;&#xA;#include&amp;quot;process.h&amp;quot;&#xA;#include&amp;quot;stdio.h&amp;quot;&#xA;&#xA;int stk[50], top = -1, i, j, max, num, ch;&#xA;&#xA;void push() {&#xA;    top++;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the item: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;num;&#xA;    stk[top] = num;&#xA;}&#xA;&#xA;void pop() {&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Popped &amp;quot; &amp;lt;&amp;lt;stk[top];&#xA;    top--;&#xA;}&#xA;&#xA;void display() {&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n ---------------------\n&amp;quot;;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;TOP&amp;gt;&amp;gt;&amp;quot;;&#xA;    for (i = top; i &amp;gt;= 0; i--)&#xA;        cout&amp;lt;&amp;lt;stk[i] &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n ---------------------&amp;quot;;&#xA;}&#xA;void main() {&#xA;&#xA;    clrscr();&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the limit: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;max;&#xA;    do {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n STACK\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n1.Push\n2.Pop\n3.Display\n4.Exit&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter the choice: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;        switch (ch) {&#xA;            case 1:&#xA;                if (top &amp;gt;= max - 1) {&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n Stack full: &amp;quot;;&#xA;                    continue;&#xA;                }&#xA;                push();&#xA;                break;&#xA;            case 2:&#xA;                if (top == -1) {&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n Stack empty: &amp;quot;;&#xA;                    continue;&#xA;                }&#xA;                pop();&#xA;                break;&#xA;            case 3:&#xA;                display();&#xA;                break;&#xA;            case 4:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;.......Thanking you.......&amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            default:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n INVALID KEY-IN &amp;quot;;&#xA;        }&#xA;    } while (1);&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-7&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-7&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;Enter the limit: 3&#xA;&#xA;&#xA;STACK&#xA;&#xA;1. Push&#xA;2. Pop&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 1&#xA;&#xA;Enter the item: 23&#xA;&#xA;&#xA;STACK&#xA;&#xA;1. Push&#xA;2. Pop&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 1&#xA;&#xA;Enter the item: 96&#xA;&#xA;&#xA;STACK&#xA;&#xA;1. Push&#xA;2. Pop&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 3&#xA;&#xA;    -- -- -- -- -- -- -- -- -- -- -&#xA;    TOP&amp;gt;&amp;gt;96 56 23&#xA;    -- -- -- -- -- -- -- -- -- -- -&#xA;&#xA;    STACK&#xA;&#xA;1. Push&#xA;2. Pop&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 2&#xA;&#xA;Popped 96&#xA;&#xA;STACK&#xA;&#xA;1. Push&#xA;2. Pop&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 3&#xA;&#xA;    -- -- -- -- -- -- -- -- -- -- -&#xA;    TOP&amp;gt;&amp;gt;56 23&#xA;    -- -- -- -- -- -- -- -- -- -- -&#xA;&#xA;    STACK&#xA;&#xA;1. Push&#xA;2. Pop&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 4     &#xA;&#xA;.......Thanking you.......&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-reverse-a-string-using-stack&#34;&gt;&#xA;  Write a C++ program to reverse a string using stack&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-reverse-a-string-using-stack&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;quot;iostream.h&amp;quot;&#xA;#include&amp;quot;conio.h&amp;quot;&#xA;#include&amp;quot;process.h&amp;quot;&#xA;#include&amp;quot;stdio.h&amp;quot;&#xA;#include&amp;quot;string.h&amp;quot;&#xA;&#xA;void revstk(char str[]) {&#xA;    char stk[50];&#xA;    int top, i;&#xA;    for (i = 0; str[i] != &#39;\0&#39;; i++)&#xA;        stk[i] = str[i];&#xA;&#xA;    top = --i;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Reversed string: &amp;quot;;&#xA;    for (i = top; i &amp;gt;= 0; i--)&#xA;        cout&amp;lt;&amp;lt;stk[i];&#xA;&#xA;    return;&#xA;}&#xA;&#xA;void main() {&#xA;    char str[50];&#xA;    clrscr();&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter a string:&amp;quot;;&#xA;    gets(str);&#xA;    revstk(str);&#xA;    getch();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-8&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-8&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;Enter a string: english&#xA;&#xA;Reversed string: hsilgne&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-implement-simple-queue-operations&#34;&gt;&#xA;  Write a C++ program to implement simple queue operations&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-implement-simple-queue-operations&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;quot;iostream.h&amp;quot;&#xA;#include&amp;quot;conio.h&amp;quot;&#xA;#include&amp;quot;process.h&amp;quot;&#xA;#include&amp;quot;stdio.h&amp;quot;&#xA;&#xA;int que[50], rear = -1, front = -1, i, j, max, num, ch;&#xA;&#xA;void insert() {&#xA;    rear++;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the item: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;num;&#xA;    que[rear] = num;&#xA;    if (front == -1)&#xA;        front = 0;&#xA;}&#xA;&#xA;void delet() {&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Deleted &amp;quot; &amp;lt;&amp;lt;que[front];&#xA;    if (front == rear)&#xA;        front = rear = -1;&#xA;    else&#xA;        front++;&#xA;}&#xA;&#xA;void display() {&#xA;    if (front == -1) {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\t\t\t QUEUE EMPTY &amp;quot;;&#xA;        return;&#xA;    }&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n -----------------------------\n&amp;quot;;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;FRONT&amp;gt;&amp;gt;&amp;quot;;&#xA;    for (i = front; i &amp;lt;= rear; i++)&#xA;        cout&amp;lt;&amp;lt;que[i] &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;    cout&amp;lt;&amp;lt;&amp;quot; &amp;lt;&amp;lt;REAR&amp;quot;;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n -----------------------------&amp;quot;;&#xA;}&#xA;void main() {&#xA;&#xA;    clrscr();&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the limit: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;max;&#xA;    do {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n SIMPLE QUEUE\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n1.Insert\n2.Delete\n3.Display\n4.Exit&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter the choice: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;        switch (ch) {&#xA;            case 1:&#xA;                if (rear + 1 &amp;gt; max - 1) {&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n\t\t\t Queue full: &amp;quot;;&#xA;                    continue;&#xA;                }&#xA;                insert();&#xA;                break;&#xA;            case 2:&#xA;                if (front == -1 || front &amp;gt; rear) {&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n\t\t\t Queue empty: &amp;quot;;&#xA;                    continue;&#xA;                }&#xA;                delet();&#xA;                break;&#xA;            case 3:&#xA;                display();&#xA;                break;&#xA;            case 4:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;.......Thanking you.......&amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            default:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\t\t\t INVALID KEY-IN &amp;quot;;&#xA;        }&#xA;    } while (1);&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-9&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-9&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;Enter the limit: 2&#xA;&#xA;&#xA;SIMPLE QUEUE&#xA;&#xA;&#xA;1. Insert&#xA;2. Delete&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 1&#xA;&#xA;Enter the item: 23&#xA;&#xA;&#xA;SIMPLE QUEUE&#xA;&#xA;&#xA;1. Insert&#xA;2. Delete&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 1&#xA;&#xA;Enter the item: 96&#xA;&#xA;&#xA;SIMPLE QUEUE&#xA;&#xA;&#xA;1. Insert&#xA;2. Delete&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 3&#xA;&#xA;    -- -- -- -- -- -- -- -- -- -- -- -- -- -- -&#xA;    FRONT&amp;gt;&amp;gt;23 96 &amp;lt;&amp;lt;REAR&#xA;    -- -- -- -- -- -- -- -- -- -- -- -- -- -- -&#xA;&#xA;&#xA;    SIMPLE QUEUE&#xA;&#xA;&#xA;1. Insert&#xA;2. Delete&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 2&#xA;&#xA;Deleted 23&#xA;&#xA;SIMPLE QUEUE&#xA;&#xA;&#xA;1. Insert&#xA;2. Delete&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 3&#xA;&#xA;    -- -- -- -- -- -- -- -- -- -- -- -- -- -- -&#xA;    FRONT&amp;gt;&amp;gt;96 &amp;lt;&amp;lt;REAR&#xA;    -- -- -- -- -- -- -- -- -- -- -- -- -- -- -&#xA;&#xA;    SIMPLE QUEUE&#xA;&#xA;&#xA;1. Insert&#xA;2. Delete&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 4&#xA;    .......Thanking you.......&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-implement-circular-queue-operations&#34;&gt;&#xA;  Write a C++ program to implement circular queue operations&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-implement-circular-queue-operations&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;quot;iostream.h&amp;quot;&#xA;#include&amp;quot;conio.h&amp;quot;&#xA;#include&amp;quot;process.h&amp;quot;&#xA;#include&amp;quot;stdio.h&amp;quot;&#xA;&#xA;int que[50], rear = -1, front = -1, i, j, max, num, ch;&#xA;&#xA;void insert() {&#xA;    rear = (rear + 1) % max;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the item: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;num;&#xA;    que[rear] = num;&#xA;    if (front == -1)&#xA;        front = 0;&#xA;}&#xA;&#xA;void delet() {&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Deleted &amp;quot; &amp;lt;&amp;lt;que[front];&#xA;    if (front == rear)&#xA;        front = rear = -1;&#xA;    else&#xA;        front = (front + 1) % max;&#xA;}&#xA;&#xA;void display() {&#xA;    if (front == -1) {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n QUEUE EMPTY &amp;quot;;&#xA;        return;&#xA;    }&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n -----------------------------\n&amp;quot;;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;FRONT&amp;gt;&amp;gt;&amp;quot;;&#xA;    if (rear &amp;lt; front) {&#xA;        for (i = front; i &amp;lt; max; i++)&#xA;            cout&amp;lt;&amp;lt;que[i] &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;        for (i = 0; i &amp;lt;= rear; i++)&#xA;            cout&amp;lt;&amp;lt;que[i] &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;    } else&#xA;        for (i = front; i &amp;lt;= rear; i++)&#xA;            cout&amp;lt;&amp;lt;que[i] &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;    cout&amp;lt;&amp;lt;&amp;quot; &amp;lt;&amp;lt;REAR&amp;quot;;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n -----------------------------&amp;quot;;&#xA;}&#xA;void main() {&#xA;    clrscr();&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the limit: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;max;&#xA;    do {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n CIRCULAR QUEUE\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n1.Insert\n2.Delete\n3.Display\n4.Exit&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter the choice: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;        switch (ch) {&#xA;            case 1:&#xA;                if ((front == (rear + 1) % max)) {&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n Queue full: &amp;quot;;&#xA;                    continue;&#xA;                }&#xA;                insert();&#xA;                break;&#xA;            case 2:&#xA;                if (front == -1) {&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n Queue empty: &amp;quot;;&#xA;                    continue;&#xA;                }&#xA;                delet();&#xA;                break;&#xA;            case 3:&#xA;                display();&#xA;                break;&#xA;            case 4:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;.......Thanking you.......&amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            default:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n INVALID KEY-IN &amp;quot;;&#xA;        }&#xA;    } while (1);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-10&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-10&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;Enter the limit: 2&#xA;&#xA;&#xA;CIRCULAR QUEUE&#xA;&#xA;&#xA;1. Insert&#xA;2. Delete&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 1&#xA;&#xA;Enter the item: 44&#xA;&#xA;&#xA;CIRCULAR QUEUE&#xA;&#xA;&#xA;1. Insert&#xA;2. Delete&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 1&#xA;&#xA;Enter the item: 56&#xA;&#xA;&#xA;CIRCULAR QUEUE&#xA;&#xA;&#xA;1. Insert&#xA;2. Delete&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 3&#xA;&#xA;    -- -- -- -- -- -- -- -- -- -- -- -- -- -- -&#xA;    FRONT&amp;gt;&amp;gt;44 56 &amp;lt;&amp;lt;REAR&#xA;    -- -- -- -- -- -- -- -- -- -- -- -- -- -- -&#xA;&#xA;&#xA;CIRCULAR QUEUE&#xA;&#xA;&#xA;1. Insert&#xA;2. Delete&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 2&#xA;&#xA;Deleted 44&#xA;&#xA;CIRCULAR QUEUE&#xA;&#xA;&#xA;1. Insert&#xA;2. Delete&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 1&#xA;&#xA;Enter the item: 99&#xA;&#xA;&#xA;CIRCULAR QUEUE&#xA;&#xA;&#xA;1. Insert&#xA;2. Delete&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 3&#xA;&#xA;    -- -- -- -- -- -- -- -- -- -- -- -- -- -- -&#xA;    FRONT&amp;gt;&amp;gt;56 99 &amp;lt;&amp;lt;REAR&#xA;    -- -- -- -- -- -- -- -- -- -- -- -- -- -- -&#xA;&#xA;CIRCULAR QUEUE&#xA;&#xA;&#xA;1. Insert&#xA;2. Delete&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 4&#xA;    .......Thanking you.......&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-implement-double-ended-queue-operations&#34;&gt;&#xA;  Write a C++ program to implement double ended queue operations&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-implement-double-ended-queue-operations&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;quot;iostream.h&amp;quot;&#xA;#include&amp;quot;conio.h&amp;quot;&#xA;#include&amp;quot;process.h&amp;quot;&#xA;#include&amp;quot;stdio.h&amp;quot;&#xA;&#xA;int que[50], rear = -1, front = -1, i, j, max, num, ch;&#xA;&#xA;void r_insert() {&#xA;    rear++;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the item: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;num;&#xA;    que[rear] = num;&#xA;    if (front == -1)&#xA;        front = 0;&#xA;}&#xA;&#xA;void f_insert() {&#xA;    if (front == -1)&#xA;        front = rear = 0;&#xA;    else if (front &amp;gt; 0)&#xA;        front--;&#xA;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the item: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;num;&#xA;    que[front] = num;&#xA;&#xA;}&#xA;&#xA;void r_delet() {&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Deleted &amp;quot; &amp;lt;&amp;lt;que[rear];&#xA;    if (front == rear)&#xA;        front = rear = -1;&#xA;    else&#xA;        rear--;&#xA;}&#xA;&#xA;void f_delet() {&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Deleted &amp;quot; &amp;lt;&amp;lt;que[front];&#xA;    if (front == rear)&#xA;        front = rear = -1;&#xA;    else&#xA;        front++;&#xA;}&#xA;&#xA;void display() {&#xA;    if (front == -1) {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\t\t\t QUEUE EMPTY &amp;quot;;&#xA;        return;&#xA;    }&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n -----------------------------\n&amp;quot;;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;FRONT&amp;gt;&amp;gt;&amp;quot;;&#xA;    for (i = front; i &amp;lt;= rear; i++)&#xA;        cout&amp;lt;&amp;lt;que[i] &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;    cout&amp;lt;&amp;lt;&amp;quot; &amp;lt;&amp;lt;REAR&amp;quot;;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n -----------------------------&amp;quot;;&#xA;}&#xA;void main() {&#xA;&#xA;    clrscr();&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the limit: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;max;&#xA;    do {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n DE-QUEUE\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n1.Insert at rear\n2.Insert at front\n3.Delete at front\n4.Delete at rear\n5.Display\n6.Exit&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter the choice: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;        switch (ch) {&#xA;            case 1:&#xA;                if (rear + 1 &amp;gt; max - 1) {&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n\t\t\t Queue full: &amp;quot;;&#xA;                    continue;&#xA;                }&#xA;                r_insert();&#xA;                break;&#xA;            case 2:&#xA;                if (front == 0) {&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n\t\t\t Cannot insert: &amp;quot;;&#xA;                    continue;&#xA;                }&#xA;                f_insert();&#xA;                break;&#xA;            case 3:&#xA;                if (front == -1 || front &amp;gt; rear) {&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n\t\t\t Queue empty: &amp;quot;;&#xA;                    continue;&#xA;                }&#xA;                f_delet();&#xA;                break;&#xA;            case 4:&#xA;                if (front == -1 || front &amp;gt; rear) {&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n\t\t\t Queue empty: &amp;quot;;&#xA;                    continue;&#xA;                }&#xA;                r_delet();&#xA;                break;&#xA;            case 5:&#xA;                display();&#xA;                break;&#xA;            case 6:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;.......Thanking you.......&amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            default:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\t\t\t INVALID KEY-IN &amp;quot;;&#xA;        }&#xA;    } while (1);&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-11&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-11&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;Enter the limit: 3&#xA;&#xA;DE - QUEUE&#xA;&#xA;1. Insert at rear&#xA;2. Insert at front&#xA;3. Delete at front&#xA;4. Delete at rear&#xA;5. Display&#xA;6. Exit&#xA;&#xA;Enter the choice: 2&#xA;&#xA;Enter the item: 23&#xA;&#xA;DE - QUEUE&#xA;&#xA;1. Insert at rear&#xA;2. Insert at front&#xA;3. Delete at front&#xA;4. Delete at rear&#xA;5. Display&#xA;6. Exit&#xA;Enter the choice: 1&#xA;&#xA;Enter the item: 44&#xA;&#xA;DE - QUEUE&#xA;&#xA;1. Insert at rear&#xA;2. Insert at front&#xA;3. Delete at front&#xA;4. Delete at rear&#xA;5. Display&#xA;6. Exit&#xA;Enter the choice: 1&#xA;&#xA;Enter the item: 96&#xA;&#xA;DE - QUEUE&#xA;&#xA;1. Insert at rear&#xA;2. Insert at front&#xA;3. Delete at front&#xA;4. Delete at rear&#xA;5. Display&#xA;6. Exit&#xA;Enter the choice: 5&#xA;&#xA;    -- -- -- -- -- -- -- -- -- -- -- -- -- -- -&#xA;    FRONT&amp;gt;&amp;gt;23 44 96 &amp;lt;&amp;lt;REAR&#xA;    -- -- -- -- -- -- -- -- -- -- -- -- -- -- -&#xA;&#xA;    DE - QUEUE&#xA;&#xA;1. Insert at rear&#xA;2. Insert at front&#xA;3. Delete at front&#xA;4. Delete at rear&#xA;5. Display&#xA;6. Exit&#xA;Enter the choice: 3&#xA;&#xA;Deleted 23&#xA;&#xA;DE - QUEUE&#xA;&#xA;1. Insert at rear&#xA;2. Insert at front&#xA;3. Delete at front&#xA;4. Delete at rear&#xA;5. Display&#xA;6. Exit&#xA;Enter the choice: 4&#xA;&#xA;Deleted 96&#xA;&#xA;DE - QUEUE&#xA;&#xA;1. Insert at rear&#xA;2. Insert at front&#xA;3. Delete at front&#xA;4. Delete at rear&#xA;5. Display&#xA;6. Exit&#xA;Enter the choice: 5&#xA;&#xA;    -- -- -- -- -- -- -- -- -- -- -- -- -- -- -&#xA;    FRONT&amp;gt;&amp;gt;44 &amp;lt;&amp;lt;REAR&#xA;    -- -- -- -- -- -- -- -- -- -- -- -- -- -- -&#xA;&#xA;    DE - QUEUE&#xA;&#xA;1. Insert at rear&#xA;2. Insert at front&#xA;3. Delete at front&#xA;4. Delete at rear&#xA;5. Display&#xA;6. Exit&#xA;Enter the choice: 6&#xA;    .......Thanking you.......&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-implement-priority-queue-operations&#34;&gt;&#xA;  Write a C++ program to implement priority queue operations&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-implement-priority-queue-operations&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;quot;iostream.h&amp;quot;&#xA;#include&amp;quot;conio.h&amp;quot;&#xA;#include&amp;quot;process.h&amp;quot;&#xA;#include&amp;quot;stdio.h&amp;quot;&#xA;&#xA;int que[50], rear = -1, front = -1, i, j, max, item, ch;&#xA;struct p_que {&#xA;    int num;&#xA;    int pr;&#xA;};&#xA;class pro {&#xA;    public:&#xA;    void insert(p_que ob[]);&#xA;    void delet(p_que ob[]);&#xA;    void display(p_que ob[]);&#xA;};&#xA;&#xA;&#xA;void pro::insert(p_que ob[]) {&#xA;    rear++;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the item: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;item;&#xA;    ob[rear].num = item;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the priority: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;ob[rear].pr;&#xA;    if (front == -1)&#xA;        front = 0;&#xA;}&#xA;&#xA;void pro::delet(p_que ob[]) {&#xA;    p_que temp;&#xA;    int big = ob[front].pr;&#xA;    int p = 0;&#xA;    for (int i = front + 1; i &amp;lt;= rear; i++) {&#xA;        if (ob[i].pr &amp;gt; big) {&#xA;            big = ob[i].pr;&#xA;            p = i;&#xA;        }&#xA;    }&#xA;&#xA;    for (i = p; i &amp;lt;= rear; i++) {&#xA;        ob[i].num = ob[i + 1].num;&#xA;        ob[i].pr = ob[i + 1].pr;&#xA;    }&#xA;&#xA;    if (front == rear)&#xA;        front = rear = -1;&#xA;    else&#xA;        rear--;&#xA;}&#xA;&#xA;void pro::display(p_que ob[]) {&#xA;    if (front == -1) {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\t\t\t QUEUE EMPTY &amp;quot;;&#xA;        return;&#xA;    }&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n -----------------------------\n\n&amp;quot;;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;FRONT&amp;gt;&amp;gt;Pr &amp;quot;;&#xA;    for (i = front; i &amp;lt;= rear; i++)&#xA;        printf(&amp;quot;%3d&amp;quot;, ob[i].pr);&#xA;    cout&amp;lt;&amp;lt;&amp;quot; &amp;lt;&amp;lt;REAR&amp;quot;;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n\n Data&amp;quot;;&#xA;    for (i = front; i &amp;lt;= rear; i++)&#xA;        printf(&amp;quot;%3d&amp;quot;, ob[i].num);&#xA;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n -----------------------------&amp;quot;;&#xA;}&#xA;&#xA;void main() {&#xA;    p_que o[50];&#xA;    pro pp;&#xA;    clrscr();&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the limit: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;max;&#xA;    do {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n PRIORITY QUEUE\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n1.Insert\n2.Delete\n3.Display\n4.Exit&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter the choice: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;        switch (ch) {&#xA;            case 1:&#xA;                if (rear + 1 &amp;gt; max - 1) {&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n\t\t\t Queue full: &amp;quot;;&#xA;                    continue;&#xA;                }&#xA;                pp.insert(o);&#xA;                break;&#xA;            case 2:&#xA;                if (front == -1 || front &amp;gt; rear) {&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n\t\t\t Queue empty: &amp;quot;;&#xA;                    continue;&#xA;                }&#xA;                pp.delet(o);&#xA;                break;&#xA;            case 3:&#xA;                pp.display(o);&#xA;                break;&#xA;            case 4:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;.......Thanking you.......&amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            default:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\t\t\t INVALID KEY-IN &amp;quot;;&#xA;        }&#xA;    } while (1);&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-12&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-12&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;Enter the limit: 3&#xA;&#xA;&#xA;PRIORITY QUEUE&#xA;&#xA;1. Insert&#xA;2. Delete&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 1&#xA;&#xA;Enter the item: 23&#xA;&#xA;Enter the priority: 5&#xA;&#xA;&#xA;PRIORITY QUEUE&#xA;&#xA;1. Insert&#xA;2. Delete&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 1&#xA;&#xA;Enter the item: 44&#xA;&#xA;Enter the priority: 6&#xA;&#xA;&#xA;PRIORITY QUEUE&#xA;&#xA;1. Insert&#xA;2. Delete&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 1&#xA;&#xA;Enter the item: 96&#xA;&#xA;Enter the priority: 7&#xA;&#xA;&#xA;PRIORITY QUEUE&#xA;&#xA;1. Insert&#xA;2. Delete&#xA;3. Display&#xA;4. Exit&#xA;&#xA;Enter the choice: 3&#xA;&#xA;&#xA;    -- -- -- -- -- -- -- -- -- -- -- -- -- -- -&#xA;&#xA;    FRONT&amp;gt;&amp;gt;Pr 5 6 7 &amp;lt;&amp;lt;REAR&#xA;&#xA;Data 23 44 96&#xA;-- -- -- -- -- -- -- -- -- -- -- -- -- -- -&#xA;&#xA;PRIORITY QUEUE&#xA;&#xA;1. Insert&#xA;2. Delete&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 2&#xA;&#xA;&#xA;PRIORITY QUEUE&#xA;&#xA;1. Insert&#xA;2. Delete&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 3&#xA;&#xA;    -- -- -- -- -- -- -- -- -- -- -- -- -- -- -&#xA;&#xA;    FRONT&amp;gt;&amp;gt;Pr 5 6 &amp;lt;&amp;lt;REAR&#xA;&#xA;Data 23 44&#xA;-- -- -- -- -- -- -- -- -- -- -- -- -- -- -&#xA;&#xA;PRIORITY QUEUE&#xA;&#xA;1. Insert&#xA;2. Delete&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 4&#xA;    .......Thanking you.......&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-represent-a-polynomial&#34;&gt;&#xA;  Write a C++ program to represent a polynomial&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-represent-a-polynomial&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;quot;iostream.h&amp;quot;&#xA;#include&amp;quot;conio.h&amp;quot;&#xA;#include&amp;quot;process.h&amp;quot;&#xA;#include&amp;quot;stdio.h&amp;quot;&#xA;&#xA;class poly {&#xA;    int i, n;&#xA;    struct rep {&#xA;        int co;&#xA;        int ex;&#xA;    }&#xA;    r[10];&#xA;&#xA;    public:&#xA;    void read();&#xA;    void disp();&#xA;};&#xA;&#xA;void poly::read() {&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the number of terms in the polynomial: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;n;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the coefficient and exponent: &amp;quot;;&#xA;&#xA;    for (i = 0; i &amp;lt; n; i++) {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Term &amp;quot; &amp;lt;&amp;lt;i + 1 &amp;lt;&amp;lt;&amp;quot;: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;r[i].co&amp;gt;&amp;gt;r[i].ex;&#xA;    }&#xA;}&#xA;&#xA;void poly::disp() {&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\nThe polynomial is:\n\n&amp;quot;;&#xA;    for (i = 0; i &amp;lt; n - 1; i++) {&#xA;        cout&amp;lt;&amp;lt;r[i].co &amp;lt;&amp;lt;&amp;quot;x^&amp;quot; &amp;lt;&amp;lt;r[i].ex &amp;lt;&amp;lt;&amp;quot;+&amp;quot;;&#xA;    }&#xA;    cout&amp;lt;&amp;lt;r[i].co &amp;lt;&amp;lt;&amp;quot;x^&amp;quot; &amp;lt;&amp;lt;r[i].ex;&#xA;}&#xA;&#xA;void main() {&#xA;    clrscr();&#xA;    poly ob;&#xA;    ob.read();&#xA;    ob.disp();&#xA;    getch();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-13&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-13&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;Enter the number of terms in the polynomial: 3&#xA;&#xA;Enter the coefficient and exponent:&#xA;Term 1: 5 2&#xA;&#xA;Term 2: 6 1&#xA;&#xA;Term 3: 7 0&#xA;&#xA;The polynomial is:&#xA;&#xA;5 x ^ 2 + 6 x ^ 1 + 7 x ^ 0&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-perform-polynomial-addition&#34;&gt;&#xA;  Write a C++ program to perform polynomial addition&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-perform-polynomial-addition&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;quot;iostream.h&amp;quot;&#xA;#include&amp;quot;conio.h&amp;quot;&#xA;#include&amp;quot;process.h&amp;quot;&#xA;#include&amp;quot;stdio.h&amp;quot;&#xA;&#xA;class poly {&#xA;    int i, n;&#xA;    struct rep {&#xA;        int co;&#xA;        int ex;&#xA;    }&#xA;    r[10];&#xA;&#xA;    public:&#xA;    void read();&#xA;    void sum(poly, poly);&#xA;    void disp();&#xA;};&#xA;&#xA;void poly::read() {&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the number of terms in the polynomial: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;n;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the coefficient and exponent: &amp;quot;;&#xA;&#xA;    for (i = 0; i &amp;lt; n; i++) {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Term &amp;quot; &amp;lt;&amp;lt;i + 1 &amp;lt;&amp;lt;&amp;quot;: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;r[i].co&amp;gt;&amp;gt;r[i].ex;&#xA;    }&#xA;}&#xA;&#xA;void poly::disp() {&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n.........................\n&amp;quot;;&#xA;    for (i = 0; i &amp;lt; n - 1; i++) {&#xA;        cout&amp;lt;&amp;lt;r[i].co &amp;lt;&amp;lt;&amp;quot;x^&amp;quot; &amp;lt;&amp;lt;r[i].ex &amp;lt;&amp;lt;&amp;quot;+&amp;quot;;&#xA;    }&#xA;    cout&amp;lt;&amp;lt;r[i].co &amp;lt;&amp;lt;&amp;quot;x^&amp;quot; &amp;lt;&amp;lt;r[i].ex;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n\n&amp;quot;;&#xA;}&#xA;&#xA;void poly::sum(poly c1, poly c2) {&#xA;    int i = 0, j = 0, k = 0, t;&#xA;&#xA;    while (i &amp;lt; c1.n &amp;amp;&amp;amp; j &amp;lt; c2.n) { //1&#xA;        if (c1.r[i].ex == c2.r[j].ex) {&#xA;            r[k].co = c1.r[i].co + c2.r[j].co;&#xA;            r[k].ex = c1.r[i].ex;&#xA;            i++, j++, k++;&#xA;        } else if (c1.r[i].ex &amp;gt; c2.r[j].ex) {&#xA;            r[k].co = c1.r[i].co;&#xA;            r[k].ex = c1.r[i].ex;&#xA;            i++, k++;&#xA;        } else if (c1.r[i].ex &amp;lt; c2.r[j].ex) {&#xA;            r[k].co = c2.r[j].co;&#xA;            r[k].ex = c2.r[j].ex;&#xA;            j++, k++;&#xA;        }&#xA;    } //1&#xA;&#xA;    while (i &amp;lt; c1.n) {&#xA;        r[k].co = c1.r[i].co;&#xA;        r[k].ex = c1.r[i].ex;&#xA;        i++, k++;&#xA;    }&#xA;&#xA;    while (j &amp;lt; c2.n) {&#xA;        r[k].co = c2.r[j].co;&#xA;        r[k].ex = c2.r[j].ex;&#xA;        j++, k++;&#xA;    }&#xA;    n = k--;&#xA;&#xA;&#xA;}&#xA;&#xA;void main() {&#xA;    clrscr();&#xA;    poly c1, c2, c3;&#xA;    c1.read();&#xA;    c2.read();&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Polynomial 1: &amp;quot;;&#xA;    c1.disp();&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Polynomial 2: &amp;quot;;&#xA;    c2.disp();&#xA;    c3.sum(c1, c2);&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Sum polynomial : &amp;quot;;&#xA;    c3.disp();&#xA;    getch();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-14&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-14&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;Enter the number of terms in the polynomial: 3&#xA;&#xA;Enter the coefficient and exponent:&#xA;Term 1: 4 2&#xA;&#xA;Term 2: 5 1&#xA;&#xA;Term 3: 3 0&#xA;&#xA;Enter the number of terms in the polynomial: 2&#xA;&#xA;Enter the coefficient and exponent:&#xA;Term 1: 8 3&#xA;&#xA;Term 2: 5 1&#xA;&#xA;&#xA;Polynomial 1:&#xA;.........................&#xA;4 x ^ 2 + 5 x ^ 1 + 3 x ^ 0&#xA;&#xA;&#xA;Polynomial 2:&#xA;.........................&#xA;8 x ^ 3 + 5 x ^ 1&#xA;&#xA;&#xA;Sum polynomial:&#xA;.........................&#xA;8 x ^ 3 + 4 x ^ 2 + 10 x ^ 1 + 3 x ^ 0&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-implement-a-singly-linked-list&#34;&gt;&#xA;  Write a C++ program to implement a singly linked list&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-implement-a-singly-linked-list&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;quot;iostream.h&amp;quot;&#xA;#include&amp;quot;conio.h&amp;quot;&#xA;#include&amp;quot;process.h&amp;quot;&#xA;#include&amp;quot;stdio.h&amp;quot;&#xA;&#xA;class node {&#xA;    int data;&#xA;    node * next;&#xA;    public:&#xA;    void display();&#xA;    void insertend();&#xA;    void insertbeg();&#xA;    void insertsp();&#xA;    void delbeg();&#xA;    void delend();&#xA;    void delsp();&#xA;};&#xA;node * head, * temp, * start, * t;&#xA;&#xA;void node::display() {&#xA;    temp = start;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Data list: &amp;quot;;&#xA;    while (temp != NULL) {&#xA;        cout&amp;lt;&amp;lt;temp - &amp;gt; data &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;        temp = temp - &amp;gt; next;&#xA;    }&#xA;}&#xA;&#xA;void node::insertbeg() {&#xA;    head = new node;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the data: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;head - &amp;gt; data;&#xA;&#xA;    if (start == NULL) {&#xA;        head - &amp;gt; next = NULL;&#xA;        start = head;&#xA;    } else {&#xA;        head - &amp;gt; next = start;&#xA;        start = head;&#xA;    }&#xA;}&#xA;&#xA;void node::insertend() {&#xA;    head = new node;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the data: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;head - &amp;gt; data;&#xA;&#xA;    if (start == NULL) {&#xA;        start = head;&#xA;    } else {&#xA;        temp = start;&#xA;        while (temp - &amp;gt; next != NULL) {&#xA;            temp = temp - &amp;gt; next;&#xA;        }&#xA;        temp - &amp;gt; next = head;&#xA;        head - &amp;gt; next = NULL;&#xA;    }&#xA;}&#xA;&#xA;void node::insertsp() {&#xA;    int pos, i;&#xA;    head = new node;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the data: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;head - &amp;gt; data;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the position: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;pos;&#xA;    if (pos == 1)&#xA;        insertbeg();&#xA;    else {&#xA;        temp = start;&#xA;        for (i = 1; i &amp;lt; pos - 1; i++) {&#xA;            temp = temp - &amp;gt; next;&#xA;        }&#xA;        head - &amp;gt; next = temp - &amp;gt; next;&#xA;        temp - &amp;gt; next = head;&#xA;&#xA;    }&#xA;}&#xA;&#xA;void node::delbeg() {&#xA;    if (start == NULL)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n LIST EMPTY &amp;quot;;&#xA;    else {&#xA;        //temp=start;&#xA;        cout&amp;lt;&amp;lt;start - &amp;gt; data;&#xA;        start = start - &amp;gt; next;&#xA;        delete temp;&#xA;    }&#xA;}&#xA;&#xA;void node::delend() {&#xA;    temp = start;&#xA;    if (start == NULL)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n LIST EMPTY &amp;quot;;&#xA;&#xA;    else if (temp - &amp;gt; next == NULL) {&#xA;        cout&amp;lt;&amp;lt;temp - &amp;gt; data;&#xA;        start = NULL;&#xA;        delete temp;&#xA;    } else {&#xA;        while (temp - &amp;gt; next != NULL) {&#xA;            t = temp;&#xA;            temp = temp - &amp;gt; next;&#xA;        }&#xA;        cout&amp;lt;&amp;lt;temp - &amp;gt; data;&#xA;        t - &amp;gt; next = NULL;&#xA;        delete temp;&#xA;    }&#xA;}&#xA;&#xA;void node::delsp() {&#xA;&#xA;    if (start == NULL) {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n LIST EMPTY &amp;quot;;&#xA;        return;&#xA;    }&#xA;&#xA;    int num;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the item: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;num;&#xA;    temp = start;&#xA;    while (temp != NULL) {&#xA;        if (temp - &amp;gt; data == num) {&#xA;            if (temp == start)&#xA;                delbeg();&#xA;            else {&#xA;                cout&amp;lt;&amp;lt;temp - &amp;gt; data;&#xA;                t - &amp;gt; next = temp - &amp;gt; next;&#xA;                delete temp;&#xA;            }&#xA;        } else {&#xA;            t = temp;&#xA;            temp = temp - &amp;gt; next;&#xA;        }&#xA;&#xA;    }&#xA;}&#xA;&#xA;void main() {&#xA;    int ch;&#xA;    node ob;&#xA;    start = NULL;&#xA;    clrscr();&#xA;    do {&#xA;        //clrscr();&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n\t...SINGLY LINKED LIST...\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n1.INSERT AT BEGINNING\n2.INSERT AT END\n3.INSERT AT A SPECIFIED POSITION&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n4.DELETION FROM BEGINNING\n5.DELETION FROM END\n6.DELETION FROM A SPECIFIED POSITION&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n7.DISPLAY\n8.EXIT\n\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter your choice: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;        switch (ch) {&#xA;            case 1:&#xA;                ob.insertbeg();&#xA;                break;&#xA;            case 2:&#xA;                ob.insertend();&#xA;                break;&#xA;            case 3:&#xA;                ob.insertsp();&#xA;                break;&#xA;            case 4:&#xA;                ob.delbeg();&#xA;                break;&#xA;            case 5:&#xA;                ob.delend();&#xA;                break;&#xA;            case 6:&#xA;                ob.delsp();&#xA;                break;&#xA;            case 7:&#xA;                ob.display();&#xA;                break;&#xA;            case 8:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\t ....THANKS....&amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            default:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\t INVALID KEY-IN &amp;quot;;&#xA;        }&#xA;    } while (1);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-15&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-15&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;...SINGLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 1&#xA;&#xA;Enter the data: 23&#xA;&#xA;&#xA;...SINGLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 1&#xA;&#xA;Enter the data: 44&#xA;&#xA;&#xA;...SINGLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 2&#xA;&#xA;Enter the data: 56&#xA;&#xA;&#xA;...SINGLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 3&#xA;&#xA;Enter the data: 99&#xA;&#xA;Enter the position: 2&#xA;&#xA;&#xA;...SINGLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 7&#xA;&#xA;Data list: 44 99 23 56&#xA;&#xA;&#xA;&#xA;...SINGLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 4&#xA;44&#xA;&#xA;&#xA;...SINGLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 5&#xA;56&#xA;&#xA;...SINGLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 6&#xA;&#xA;Enter the item: 23&#xA;23&#xA;&#xA;...SINGLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 7&#xA;&#xA;Data list: 99&#xA;&#xA;...SINGLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 8&#xA;&#xA;....THANKS....&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-implement-a-circular-linked-list&#34;&gt;&#xA;  Write a C++ program to implement a circular linked list&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-implement-a-circular-linked-list&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;quot;iostream.h&amp;quot;&#xA;#include&amp;quot;conio.h&amp;quot;&#xA;#include&amp;quot;process.h&amp;quot;&#xA;#include&amp;quot;stdio.h&amp;quot;&#xA;&#xA;#define MAX 25&#xA;&#xA;class node {&#xA;    int data;&#xA;    node * next;&#xA;    public:&#xA;    void display();&#xA;    void insertend();&#xA;    void insertbeg();&#xA;    void insertsp();&#xA;    void delbeg();&#xA;    void delend();&#xA;    void delsp();&#xA;};&#xA;node * head, * temp, * start, * t, * last;&#xA;&#xA;void node::display() {&#xA;    temp = start;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Data list: &amp;quot;;&#xA;    while (temp != last) {&#xA;        cout&amp;lt;&amp;lt;temp - &amp;gt; data &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;        temp = temp - &amp;gt; next;&#xA;    }&#xA;    cout&amp;lt;&amp;lt;last - &amp;gt; data;&#xA;}&#xA;&#xA;void node::insertbeg() {&#xA;    head = new node;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the data: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;head - &amp;gt; data;&#xA;&#xA;    if (start == NULL) {&#xA;        start = last = head;&#xA;        last - &amp;gt; next = NULL;&#xA;    } else {&#xA;        head - &amp;gt; next = start;&#xA;        last - &amp;gt; next = head;&#xA;        start = head;&#xA;    }&#xA;}&#xA;&#xA;void node::insertend() {&#xA;    head = new node;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the data: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;head - &amp;gt; data;&#xA;&#xA;    if (start == NULL) {&#xA;        start = last = head;&#xA;        last - &amp;gt; next = head;&#xA;    } else {&#xA;        last - &amp;gt; next = head;&#xA;        head - &amp;gt; next = start;&#xA;        last = head;&#xA;    }&#xA;}&#xA;&#xA;void node::insertsp() {&#xA;    int pos, i;&#xA;    head = new node;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the data: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;head - &amp;gt; data;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the position: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;pos;&#xA;    if (pos == 1) {&#xA;        insertbeg();&#xA;        return;&#xA;    } else {&#xA;        temp = start;&#xA;        for (i = 1; i &amp;lt; pos - 1; i++) {&#xA;            temp = temp - &amp;gt; next;&#xA;        }&#xA;        head - &amp;gt; next = temp - &amp;gt; next;&#xA;        temp - &amp;gt; next = head;&#xA;&#xA;    }&#xA;}&#xA;&#xA;void node::delbeg() {&#xA;&#xA;    if (start == NULL)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n LIST EMPTY &amp;quot;;&#xA;&#xA;    else if (start - &amp;gt; next == start) {&#xA;        temp = start;&#xA;        cout&amp;lt;&amp;lt;temp - &amp;gt; data;&#xA;        start = last = NULL;&#xA;        delete temp;&#xA;    } else {&#xA;        temp = start;&#xA;        cout&amp;lt;&amp;lt;start - &amp;gt; data;&#xA;        start = start - &amp;gt; next;&#xA;        last - &amp;gt; next = start;&#xA;        delete temp;&#xA;    }&#xA;}&#xA;&#xA;void node::delend() {&#xA;    temp = start;&#xA;    if (start == NULL)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n LIST EMPTY &amp;quot;;&#xA;    else if (start - &amp;gt; next == start) {&#xA;        temp = start;&#xA;        cout&amp;lt;&amp;lt;temp - &amp;gt; data;&#xA;        start = last = NULL;&#xA;        delete temp;&#xA;    } else {&#xA;        temp = start;&#xA;        if (temp - &amp;gt; next != last) {&#xA;            temp = temp - &amp;gt; next;&#xA;        }&#xA;        t = last;&#xA;        cout&amp;lt;&amp;lt;t - &amp;gt; data;&#xA;        temp - &amp;gt; next = start;&#xA;        last = temp;&#xA;        delete t;&#xA;    }&#xA;}&#xA;&#xA;void node::delsp() {&#xA;&#xA;    if (start == NULL) {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n LIST EMPTY &amp;quot;;&#xA;        return;&#xA;    }&#xA;&#xA;    int item;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the item: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;item;&#xA;    int i = 0;&#xA;    for (temp = start; i &amp;lt; MAX; i++, t = temp, temp = temp - &amp;gt; next) {&#xA;        if (temp - &amp;gt; data == item) {&#xA;            if (temp == start) {&#xA;                delbeg();&#xA;                return;&#xA;            } else if (temp == last) {&#xA;                delend();&#xA;                return;&#xA;            } else {&#xA;                t - &amp;gt; next = temp - &amp;gt; next;&#xA;                delete temp;&#xA;                return;&#xA;            }&#xA;        }&#xA;&#xA;&#xA;    }&#xA;}&#xA;&#xA;void main() {&#xA;    int ch;&#xA;    node ob;&#xA;    start = last = NULL;&#xA;    clrscr();&#xA;    do {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n\t...CIRCULAR LINKED LIST...\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n1.INSERT AT BEGINNING\n2.INSERT AT END\n3.INSERT AT A SPECIFIED POSITION&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n4.DELETION FROM BEGINNING\n5.DELETION FROM END\n6.DELETION FROM A SPECIFIED POSITION&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n7.DISPLAY\n8.EXIT\n\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter your choice: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;        switch (ch) {&#xA;            case 1:&#xA;                ob.insertbeg();&#xA;                break;&#xA;            case 2:&#xA;                ob.insertend();&#xA;                break;&#xA;            case 3:&#xA;                ob.insertsp();&#xA;                break;&#xA;            case 4:&#xA;                ob.delbeg();&#xA;                break;&#xA;            case 5:&#xA;                ob.delend();&#xA;                break;&#xA;            case 6:&#xA;                ob.delsp();&#xA;                break;&#xA;            case 7:&#xA;                ob.display();&#xA;                break;&#xA;            case 8:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\t ....THANKS....&amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            default:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\t INVALID KEY-IN &amp;quot;;&#xA;        }&#xA;    } while (1);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-16&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-16&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;...CIRCULAR LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 1&#xA;&#xA;Enter the data: 25&#xA;&#xA;&#xA;...CIRCULAR LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 1&#xA;&#xA;Enter the data: 47&#xA;&#xA;&#xA;...CIRCULAR LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 2&#xA;&#xA;Enter the data: 58&#xA;&#xA;&#xA;...CIRCULAR LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 3&#xA;&#xA;Enter the data: 101&#xA;&#xA;Enter the position: 2&#xA;&#xA;&#xA;...CIRCULAR LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 7&#xA;&#xA;Data list: 47 101 25 58&#xA;&#xA;&#xA;&#xA;...CIRCULAR LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 4&#xA;47&#xA;&#xA;...CIRCULAR LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 5&#xA;58&#xA;&#xA;...CIRCULAR LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 6&#xA;&#xA;Enter the item: 25&#xA;25&#xA;&#xA;...CIRCULAR LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 7&#xA;&#xA;Data list: 101&#xA;&#xA;...CIRCULAR LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 8&#xA;&#xA;....THANKS....&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-implement-a-doubly-linked-list&#34;&gt;&#xA;  Write a C++ program to implement a doubly linked list&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-implement-a-doubly-linked-list&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;quot;iostream.h&amp;quot;&#xA;#include&amp;quot;conio.h&amp;quot;&#xA;#include&amp;quot;process.h&amp;quot;&#xA;#include&amp;quot;stdio.h&amp;quot;&#xA;&#xA;class node {&#xA;    int data;&#xA;    node * next;&#xA;    node * prev;&#xA;    public:&#xA;    void display();&#xA;    void insertend();&#xA;    void insertbeg();&#xA;    void insertsp();&#xA;    void delbeg();&#xA;    void delend();&#xA;    void delsp();&#xA;};&#xA;&#xA;node * head, * temp, * start, * last, * t, * t1, * t2;&#xA;&#xA;void node::display() {&#xA;    temp = start;&#xA;    if (start == NULL) {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n LIST EMPTY &amp;quot;;&#xA;        return;&#xA;    }&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Data list: &amp;quot;;&#xA;    while (temp != last) {&#xA;        cout&amp;lt;&amp;lt;temp - &amp;gt; data &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;        temp = temp - &amp;gt; next;&#xA;    }&#xA;    cout&amp;lt;&amp;lt;last - &amp;gt; data;&#xA;}&#xA;&#xA;void node::insertbeg() {&#xA;    head = new node;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the data: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;head - &amp;gt; data;&#xA;    head - &amp;gt; prev = NULL;&#xA;    if (start == NULL) {&#xA;        head - &amp;gt; next = NULL;&#xA;        start = last = head;&#xA;    } else {&#xA;        head - &amp;gt; next = start;&#xA;        start - &amp;gt; prev = head;&#xA;        start = head;&#xA;    }&#xA;}&#xA;&#xA;void node::insertend() {&#xA;    head = new node;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the data: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;head - &amp;gt; data;&#xA;    head - &amp;gt; next = NULL;&#xA;    if (start == NULL) {&#xA;        start = last = head;&#xA;        head - &amp;gt; prev = NULL;&#xA;    } else {&#xA;        head - &amp;gt; prev = last;&#xA;        last - &amp;gt; next = head;&#xA;        last = head;&#xA;    }&#xA;}&#xA;&#xA;void node::insertsp() {&#xA;    int pos, i;&#xA;    head = new node;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the position: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;pos;&#xA;    if (pos == 1)&#xA;        insertbeg();&#xA;    else {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter the data: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;head - &amp;gt; data;&#xA;        temp = start;&#xA;        for (i = 1; i &amp;lt; pos - 1; i++) {&#xA;            temp = temp - &amp;gt; next;&#xA;        }&#xA;        if (temp - &amp;gt; next == NULL)&#xA;            last = head;&#xA;        head - &amp;gt; next = temp - &amp;gt; next;&#xA;        temp - &amp;gt; next = head;&#xA;&#xA;    }&#xA;}&#xA;&#xA;void node::delbeg() {&#xA;    if (start == NULL)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n LIST EMPTY &amp;quot;;&#xA;    else if (start == last) {&#xA;        cout&amp;lt;&amp;lt;start - &amp;gt; data;&#xA;        temp = start;&#xA;        start = last = NULL;&#xA;        delete temp;&#xA;    } else {&#xA;        temp = start;&#xA;        cout&amp;lt;&amp;lt;start - &amp;gt; data;&#xA;        start = start - &amp;gt; next;&#xA;        start - &amp;gt; prev = NULL;&#xA;        delete temp;&#xA;    }&#xA;}&#xA;&#xA;void node::delend() {&#xA;    temp = start;&#xA;    if (start == NULL)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n LIST EMPTY &amp;quot;;&#xA;    else if (start == last) {&#xA;        cout&amp;lt;&amp;lt;last - &amp;gt; data;&#xA;        temp = last;&#xA;        start = last = NULL;&#xA;        delete temp;&#xA;    } else {&#xA;        temp = last;&#xA;        cout&amp;lt;&amp;lt;last - &amp;gt; data;&#xA;        last = last - &amp;gt; prev;&#xA;        last - &amp;gt; next = NULL;&#xA;        delete temp;&#xA;    }&#xA;}&#xA;&#xA;void node::delsp() {&#xA;&#xA;    if (start == NULL) {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n LIST EMPTY &amp;quot;;&#xA;        return;&#xA;    }&#xA;&#xA;    int num;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the item: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;num;&#xA;    temp = start;&#xA;    while (temp != NULL) {&#xA;        if (temp - &amp;gt; data == num) {&#xA;            if (temp == start) {&#xA;                delbeg();&#xA;                return;&#xA;            } else if (temp == last) {&#xA;                delend();&#xA;                return;&#xA;            } else {&#xA;                cout&amp;lt;&amp;lt;temp - &amp;gt; data;&#xA;                t1 = temp - &amp;gt; prev;&#xA;                t2 = temp - &amp;gt; next;&#xA;                t1 - &amp;gt; next = t2;&#xA;                t2 - &amp;gt; prev = t1;&#xA;                delete temp;&#xA;            }&#xA;        } else {&#xA;            temp = temp - &amp;gt; next;&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;void main() {&#xA;    int ch;&#xA;    node ob;&#xA;    start = last = NULL;&#xA;    clrscr();&#xA;    do {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\t...DOUBLY LINKED LIST...\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n1.INSERT AT BEGINNING\n2.INSERT AT END\n3.INSERT AT A SPECIFIED&#xA;        POSITION &amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n4.DELETION FROM BEGINNING\n5.DELETION FROM END\n6.DELETION&#xA;        FROM A SPECIFIED POSITION &amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n7.DISPLAY\n8.EXIT\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter your choice: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;&#xA;        switch (ch) {&#xA;            case 1:&#xA;                ob.insertbeg();&#xA;                break;&#xA;            case 2:&#xA;                ob.insertend();&#xA;                break;&#xA;            case 3:&#xA;                ob.insertsp();&#xA;                break;&#xA;            case 4:&#xA;                ob.delbeg();&#xA;                break;&#xA;            case 5:&#xA;                ob.delend();&#xA;                break;&#xA;            case 6:&#xA;                ob.delsp();&#xA;                break;&#xA;            case 7:&#xA;                ob.display();&#xA;                break;&#xA;            case 8:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\t ....THANKS....&amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            default:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\t INVALID KEY-IN &amp;quot;;&#xA;        }&#xA;    } while (1);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-17&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-17&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;...DOUBLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;Enter your choice: 1&#xA;&#xA;Enter the data: 45&#xA;&#xA;...DOUBLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;Enter your choice: 1&#xA;&#xA;Enter the data: 25&#xA;&#xA;...DOUBLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;Enter your choice: 2&#xA;&#xA;Enter the data: 96&#xA;&#xA;...DOUBLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;Enter your choice: 3&#xA;&#xA;Enter the position: 3&#xA;&#xA;Enter the data: 56&#xA;&#xA;...DOUBLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;Enter your choice: 7&#xA;&#xA;Data list: 25 45 56 96&#xA;&#xA;...DOUBLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;Enter your choice: 4&#xA;25&#xA;&#xA;...DOUBLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;Enter your choice: 5&#xA;96&#xA;&#xA;...DOUBLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;Enter your choice: 6&#xA;&#xA;Enter the item: 56&#xA;&#xA;...DOUBLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;Enter your choice: 7&#xA;&#xA;Data list: 45&#xA;&#xA;...DOUBLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;Enter your choice: 8&#xA;&#xA;....THANKS....&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-implement-a-circular-doubly-linked-list&#34;&gt;&#xA;  Write a C++ program to implement a circular doubly linked list&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-implement-a-circular-doubly-linked-list&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;quot;iostream.h&amp;quot;&#xA;#include&amp;quot;conio.h&amp;quot;&#xA;#include&amp;quot;process.h&amp;quot;&#xA;#include&amp;quot;stdio.h&amp;quot;&#xA;&#xA;&#xA;class node {&#xA;    int data;&#xA;    node * next;&#xA;    node * prev;&#xA;    public:&#xA;    node() {}&#xA;    void create();&#xA;    void display();&#xA;    void insertend();&#xA;    void insertbeg();&#xA;    void insertsp();&#xA;    void delbeg();&#xA;    void delend();&#xA;    void delsp();&#xA;};&#xA;&#xA;node * temp, * t, * curr, * t1, * t2;&#xA;static node * head;&#xA;&#xA;void node::create() {&#xA;    head = new node;&#xA;    head - &amp;gt; data = 0;&#xA;    head - &amp;gt; next = head;&#xA;    head - &amp;gt; prev = head;&#xA;}&#xA;&#xA;void node::display() {&#xA;    if (head - &amp;gt; next == head)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n DATA LIST EMPTY &amp;quot;;&#xA;    else {&#xA;        temp = head;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Data list: &amp;quot;;&#xA;        while (temp - &amp;gt; next != head) {&#xA;            temp = temp - &amp;gt; next;&#xA;            cout&amp;lt;&amp;lt;temp - &amp;gt; data &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;        }&#xA;    }&#xA;&#xA;}&#xA;&#xA;void node::insertbeg() {&#xA;    curr = new node;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the data: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;curr - &amp;gt; data;&#xA;    if (head - &amp;gt; next == head) {&#xA;        head - &amp;gt; next = curr;&#xA;        curr - &amp;gt; prev = head;&#xA;        head - &amp;gt; prev = curr;&#xA;        curr - &amp;gt; next = head;&#xA;        return;&#xA;    }&#xA;    temp = head - &amp;gt; next;&#xA;    curr - &amp;gt; prev = head;&#xA;    head - &amp;gt; next = curr;&#xA;    curr - &amp;gt; next = temp;&#xA;    temp - &amp;gt; prev = curr;&#xA;&#xA;}&#xA;&#xA;void node::insertend() {&#xA;    curr = new node;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the data: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;curr - &amp;gt; data;&#xA;    temp = head - &amp;gt; prev;&#xA;    curr - &amp;gt; next = head;&#xA;    head - &amp;gt; prev = curr;&#xA;    curr - &amp;gt; prev = temp;&#xA;    temp - &amp;gt; next = curr;&#xA;}&#xA;&#xA;void node::insertsp() {&#xA;    int pos, k;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the position: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;pos;&#xA;    temp = head;&#xA;    if (pos == 1)&#xA;        insertbeg();&#xA;    else {&#xA;        for (k = 1; k &amp;lt; pos; k++) {&#xA;            temp = temp - &amp;gt; next;&#xA;        }&#xA;        curr = new node;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter the data: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;curr - &amp;gt; data;&#xA;        t = temp - &amp;gt; next;&#xA;        temp - &amp;gt; next = curr;&#xA;        curr - &amp;gt; prev = temp;&#xA;        curr - &amp;gt; next = t;&#xA;        t - &amp;gt; prev = curr;&#xA;    }&#xA;&#xA;}&#xA;&#xA;void node::delbeg() {&#xA;    if (head - &amp;gt; next == head)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n DELETION IMPOSSIBLE &amp;quot;;&#xA;&#xA;    else {&#xA;        temp = head - &amp;gt; next;&#xA;        cout&amp;lt;&amp;lt;temp - &amp;gt; data;&#xA;        t = head - &amp;gt; next = temp - &amp;gt; next;&#xA;        t - &amp;gt; prev = head;&#xA;        delete temp;&#xA;    }&#xA;}&#xA;&#xA;void node::delend() {&#xA;    if (head - &amp;gt; prev == head)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n DELETION IMPOSSIBLE &amp;quot;;&#xA;&#xA;    else {&#xA;        temp = head - &amp;gt; prev;&#xA;        cout&amp;lt;&amp;lt;temp - &amp;gt; data;&#xA;        t = head - &amp;gt; prev = temp - &amp;gt; prev;&#xA;        t - &amp;gt; next = head;&#xA;        delete temp;&#xA;    }&#xA;}&#xA;&#xA;void node::delsp() {&#xA;    if (head - &amp;gt; next == head) {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n DELETION IMPOSSIBLE &amp;quot;;&#xA;        return;&#xA;    } else {&#xA;        int item;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter the item: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;item;&#xA;        temp = head;&#xA;        do {&#xA;            if (temp - &amp;gt; data == item) {&#xA;                if (temp - &amp;gt; prev == head) {&#xA;                    delbeg();&#xA;                    return;&#xA;                } else if (temp - &amp;gt; next == head) {&#xA;                    delend();&#xA;                    return;&#xA;                } else {&#xA;                    t1 = temp - &amp;gt; prev;&#xA;                    t2 = temp - &amp;gt; next;&#xA;                    t1 - &amp;gt; next = t2;&#xA;                    t2 - &amp;gt; prev = t1;&#xA;                    delete temp;&#xA;                    return;&#xA;                }&#xA;            } else {&#xA;                temp = temp - &amp;gt; next;&#xA;            }&#xA;        } while (temp != head);&#xA;    }&#xA;&#xA;}&#xA;&#xA;void main() {&#xA;    int ch;&#xA;    node ob;&#xA;    clrscr();&#xA;    ob.create();&#xA;    do {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n\t...CIRCULAR DOUBLY LINKED LIST...\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n1.INSERT AT BEGINNING\n2.INSERT AT END\n3.INSERT AT A SPECIFIED POSITION&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n4.DELETION FROM BEGINNING\n5.DELETION FROM END\n6.DELETION FROM A SPECIFIED POSITION&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n7.DISPLAY\n8.EXIT\n\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter your choice: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;        switch (ch) {&#xA;            case 1:&#xA;                ob.insertbeg();&#xA;                break;&#xA;            case 2:&#xA;                ob.insertend();&#xA;                break;&#xA;            case 3:&#xA;                ob.insertsp();&#xA;                break;&#xA;            case 4:&#xA;                ob.delbeg();&#xA;                break;&#xA;            case 5:&#xA;                ob.delend();&#xA;                break;&#xA;            case 6:&#xA;                ob.delsp();&#xA;                break;&#xA;            case 7:&#xA;                ob.display();&#xA;                break;&#xA;            case 8:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\t ....THANKS....&amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            default:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\t INVALID KEY-IN &amp;quot;;&#xA;        }&#xA;    } while (1);&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-18&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-18&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;...CIRCULAR DOUBLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 1&#xA;&#xA;Enter the data: 21&#xA;&#xA;&#xA;...CIRCULAR DOUBLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 1&#xA;&#xA;Enter the data: 41&#xA;&#xA;&#xA;...CIRCULAR DOUBLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 2&#xA;&#xA;Enter the data: 51&#xA;&#xA;&#xA;...CIRCULAR DOUBLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 3&#xA;&#xA;Enter the position: 2&#xA;&#xA;Enter the data: 91&#xA;&#xA;&#xA;...CIRCULAR DOUBLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 7&#xA;&#xA;Data list: 41 91 21 51&#xA;&#xA;&#xA;&#xA;...CIRCULAR DOUBLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 4&#xA;41&#xA;&#xA;...CIRCULAR DOUBLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 5&#xA;51&#xA;&#xA;...CIRCULAR DOUBLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;Enter your choice: 6&#xA;&#xA;Enter the item: 21&#xA;21&#xA;&#xA;...CIRCULAR DOUBLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 7&#xA;&#xA;Data list: 91&#xA;&#xA;...CIRCULAR DOUBLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 8&#xA;&#xA;....THANKS....&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-implement-a-stack-using-linked-list&#34;&gt;&#xA;  Write a C++ program to implement a stack using linked list&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-implement-a-stack-using-linked-list&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;quot;iostream.h&amp;quot;&#xA;#include&amp;quot;conio.h&amp;quot;&#xA;#include&amp;quot;process.h&amp;quot;&#xA;#include&amp;quot;stdio.h&amp;quot;&#xA;&#xA;class node {&#xA;    int data;&#xA;    node * next;&#xA;    public:&#xA;    void display();&#xA;    void push();&#xA;    void pop();&#xA;};&#xA;node * head, * temp, * start, * t;&#xA;&#xA;void node::display() {&#xA;    temp = start;&#xA;    if (temp == NULL)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n STACK EMPTY &amp;quot;;&#xA;    else&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n STACK: &amp;quot;;&#xA;    while (temp != NULL) {&#xA;        cout&amp;lt;&amp;lt;temp - &amp;gt; data &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;        temp = temp - &amp;gt; next;&#xA;    }&#xA;}&#xA;&#xA;&#xA;void node::push() {&#xA;    head = new node;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the data: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;head - &amp;gt; data;&#xA;    head - &amp;gt; next = NULL;&#xA;&#xA;    if (start == NULL) {&#xA;        start = head;&#xA;    } else {&#xA;        temp = start;&#xA;        while (temp - &amp;gt; next != NULL) {&#xA;            temp = temp - &amp;gt; next;&#xA;        }&#xA;        temp - &amp;gt; next = head;&#xA;    }&#xA;}&#xA;&#xA;void node::pop() {&#xA;    temp = start;&#xA;    if (start == NULL)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n STACK EMPTY &amp;quot;;&#xA;&#xA;    else if (temp - &amp;gt; next == NULL) {&#xA;        cout&amp;lt;&amp;lt;temp - &amp;gt; data;&#xA;        start = NULL;&#xA;        delete temp;&#xA;    } else {&#xA;        while (temp - &amp;gt; next != NULL) {&#xA;            t = temp;&#xA;            temp = temp - &amp;gt; next;&#xA;        }&#xA;        cout&amp;lt;&amp;lt;temp - &amp;gt; data;&#xA;        t - &amp;gt; next = NULL;&#xA;        delete temp;&#xA;    }&#xA;}&#xA;&#xA;void main() {&#xA;    int ch;&#xA;    node ob;&#xA;    start = NULL;&#xA;    clrscr();&#xA;    do {&#xA;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n\t...STACK USING LINKED LIST...\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n1.PUSH\n2.POP\n3.DISPLAY\n4.EXIT\n\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter your choice: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;        switch (ch) {&#xA;            case 1:&#xA;                ob.push();&#xA;                break;&#xA;            case 2:&#xA;                ob.pop();&#xA;                break;&#xA;            case 3:&#xA;                ob.display();&#xA;                break;&#xA;            case 4:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\t ....THANKS....&amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            default:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\t INVALID KEY-IN &amp;quot;;&#xA;        }&#xA;    } while (1);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-19&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-19&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;...STACK USING LINKED LIST...&#xA;&#xA;1. PUSH&#xA;2. POP&#xA;3. DISPLAY&#xA;4. Exit&#xA;&#xA;Enter your choice: 1&#xA;&#xA;Enter the data: 23&#xA;&#xA;...STACK USING LINKED LIST...&#xA;&#xA;1. PUSH&#xA;2. POP&#xA;3. DISPLAY&#xA;4. Exit&#xA;&#xA;Enter your choice: 1&#xA;&#xA;Enter the data: 45&#xA;&#xA;...STACK USING LINKED LIST...&#xA;&#xA;1. PUSH&#xA;2. POP&#xA;3. DISPLAY&#xA;4. Exit&#xA;&#xA;Enter your choice: 3&#xA;&#xA;STACK: 23 45&#xA;&#xA;...STACK USING LINKED LIST...&#xA;&#xA;1. PUSH&#xA;2. POP&#xA;3. DISPLAY&#xA;4. Exit&#xA;&#xA;Enter your choice: 2&#xA;45&#xA;&#xA;...STACK USING LINKED LIST...&#xA;&#xA;1. PUSH&#xA;2. POP&#xA;3. DISPLAY&#xA;4. Exit&#xA;&#xA;Enter your choice: 3&#xA;&#xA;STACK: 23&#xA;&#xA;...STACK USING LINKED LIST...&#xA;&#xA;1. PUSH&#xA;2. POP&#xA;3. DISPLAY&#xA;4. Exit&#xA;&#xA;Enter your choice: 4&#xA;&#xA;....THANKS....&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-implement-a-simple-queue-using-linked-list&#34;&gt;&#xA;  Write a C++ program to implement a simple queue using linked list&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-implement-a-simple-queue-using-linked-list&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;quot;iostream.h&amp;quot;&#xA;#include&amp;quot;conio.h&amp;quot;&#xA;#include&amp;quot;process.h&amp;quot;&#xA;#include&amp;quot;stdio.h&amp;quot;&#xA;&#xA;class node {&#xA;    int data;&#xA;    node * next;&#xA;    public:&#xA;    void display();&#xA;    void insert();&#xA;    void del();&#xA;};&#xA;&#xA;node * head, * temp, * start, * t;&#xA;&#xA;void node::display() {&#xA;    temp = start;&#xA;    if (temp == NULL)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n QUEUE EMPTY &amp;quot;;&#xA;    else&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n QUEUE: &amp;quot;;&#xA;    while (temp != NULL) {&#xA;        cout&amp;lt;&amp;lt;temp - &amp;gt; data &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;        temp = temp - &amp;gt; next;&#xA;    }&#xA;}&#xA;&#xA;void node::insert() {&#xA;    head = new node;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the data: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;head - &amp;gt; data;&#xA;    head - &amp;gt; next = NULL;&#xA;&#xA;    if (start == NULL) {&#xA;        start = head;&#xA;    } else {&#xA;        temp = start;&#xA;        while (temp - &amp;gt; next != NULL) {&#xA;            temp = temp - &amp;gt; next;&#xA;        }&#xA;        temp - &amp;gt; next = head;&#xA;    }&#xA;}&#xA;&#xA;void node::del() {&#xA;    if (start == NULL)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n QUEUE EMPTY &amp;quot;;&#xA;    else {&#xA;        temp = start;&#xA;        cout&amp;lt;&amp;lt;start - &amp;gt; data;&#xA;        start = start - &amp;gt; next;&#xA;        delete temp;&#xA;    }&#xA;}&#xA;&#xA;void main() {&#xA;    int ch;&#xA;    node ob;&#xA;    start = NULL;&#xA;    clrscr();&#xA;    do {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\t...QUEUE USING LINKED LIST...\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n1.INSERTION\n2.DELETION\n3.DISPLAY\n4.EXIT\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter your choice: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;        switch (ch) {&#xA;            case 1:&#xA;                ob.insert();&#xA;                break;&#xA;            case 2:&#xA;                ob.del();&#xA;                break;&#xA;            case 3:&#xA;                ob.display();&#xA;                break;&#xA;            case 4:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\t ....THANKS....&amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            default:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\t INVALID KEY-IN &amp;quot;;&#xA;        }&#xA;    } while (1);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-20&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-20&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;...QUEUE USING LINKED LIST...&#xA;&#xA;1. INSERTION&#xA;2. DELETION&#xA;3. DISPLAY&#xA;4. Exit&#xA;&#xA;Enter your choice: 1&#xA;&#xA;Enter the data: 25&#xA;&#xA;...QUEUE USING LINKED LIST...&#xA;&#xA;1. INSERTION&#xA;2. DELETION&#xA;3. DISPLAY&#xA;4. Exit&#xA;&#xA;Enter your choice: 1&#xA;&#xA;Enter the data: 50&#xA;&#xA;...QUEUE USING LINKED LIST...&#xA;&#xA;1. INSERTION&#xA;2. DELETION&#xA;3. DISPLAY&#xA;4. Exit&#xA;&#xA;Enter your choice: 3&#xA;&#xA;QUEUE: 25 50&#xA;&#xA;...QUEUE USING LINKED LIST...&#xA;&#xA;1. INSERTION&#xA;2. DELETION&#xA;3. DISPLAY&#xA;4. Exit&#xA;&#xA;Enter your choice: 2&#xA;25&#xA;&#xA;...QUEUE USING LINKED LIST...&#xA;&#xA;1. INSERTION&#xA;2. DELETION&#xA;3. DISPLAY&#xA;4. Exit&#xA;&#xA;Enter your choice: 3&#xA;&#xA;QUEUE: 50&#xA;&#xA;...QUEUE USING LINKED LIST...&#xA;&#xA;1. INSERTION&#xA;2. DELETION&#xA;3. DISPLAY&#xA;4. Exit&#xA;&#xA;Enter your choice: 4&#xA;&#xA;....THANKS....&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-implement-a-circular-queue-using-linked-list&#34;&gt;&#xA;  Write a C++ program to implement a circular queue using linked list&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-implement-a-circular-queue-using-linked-list&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;quot;iostream.h&amp;quot;&#xA;#include&amp;quot;conio.h&amp;quot;&#xA;#include&amp;quot;process.h&amp;quot;&#xA;#include&amp;quot;stdio.h&amp;quot;&#xA;&#xA;class node {&#xA;    int data;&#xA;    node * next;&#xA;    public:&#xA;    node() {}&#xA;    void display();&#xA;    void insert();&#xA;    void del();&#xA;};&#xA;&#xA;node * head, * temp, * start, * t, * last;&#xA;&#xA;void node::display() {&#xA;    temp = start;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Data list: &amp;quot;;&#xA;    while (temp != last) {&#xA;        cout&amp;lt;&amp;lt;temp - &amp;gt; data &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;        temp = temp - &amp;gt; next;&#xA;    }&#xA;    cout&amp;lt;&amp;lt;last - &amp;gt; data;&#xA;}&#xA;&#xA;void node::insert() {&#xA;    head = new node;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the data: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;head - &amp;gt; data;&#xA;&#xA;    if (start == NULL) {&#xA;        start = last = head;&#xA;        last - &amp;gt; next = head;&#xA;    } else {&#xA;        last - &amp;gt; next = head;&#xA;        head - &amp;gt; next = start;&#xA;        last = head;&#xA;    }&#xA;&#xA;}&#xA;&#xA;void node::del() {&#xA;&#xA;    if (start == NULL)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n LIST EMPTY &amp;quot;;&#xA;&#xA;    else if (start - &amp;gt; next == start) {&#xA;        temp = start;&#xA;        cout&amp;lt;&amp;lt;temp - &amp;gt; data;&#xA;        start = last = NULL;&#xA;        delete temp;&#xA;&#xA;    } else {&#xA;        temp = start;&#xA;        cout&amp;lt;&amp;lt;start - &amp;gt; data;&#xA;        start = start - &amp;gt; next;&#xA;        last - &amp;gt; next = start;&#xA;        delete temp;&#xA;    }&#xA;}&#xA;&#xA;void main() {&#xA;    int ch;&#xA;    node ob;&#xA;    start = last = NULL;&#xA;&#xA;    clrscr();&#xA;    do {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n\t...CIRCULAR QUEUE USING LL...\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n1.INSERTION\n2.DELETION\n3.DISPLAY\n4.EXIT\n\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter your choice: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;        switch (ch) {&#xA;            case 1:&#xA;                ob.insert();&#xA;                break;&#xA;            case 2:&#xA;                ob.del();&#xA;                break;&#xA;            case 3:&#xA;                ob.display();&#xA;                break;&#xA;            case 4:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\t ....THANKS....&amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            default:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\t INVALID KEY-IN &amp;quot;;&#xA;        }&#xA;    } while (1);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-21&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-21&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;...CIRCULAR QUEUE USING LL...&#xA;&#xA;1. INSERTION&#xA;2. DELETION&#xA;3. DISPLAY&#xA;4. Exit&#xA;&#xA;Enter your choice: 1&#xA;&#xA;Enter the data: 23&#xA;&#xA;...CIRCULAR QUEUE USING LL...&#xA;&#xA;1. INSERTION&#xA;2. DELETION&#xA;3. DISPLAY&#xA;4. Exit&#xA;&#xA;Enter your choice: 1&#xA;&#xA;Enter the data: 44&#xA;&#xA;&#xA;...CIRCULAR QUEUE USING LL...&#xA;&#xA;1. INSERTION&#xA;2. DELETION&#xA;3. DISPLAY&#xA;4. Exit&#xA;&#xA;Enter your choice: 3&#xA;&#xA;Data list: 23 44&#xA;&#xA;...CIRCULAR QUEUE USING LL...&#xA;&#xA;1. INSERTION&#xA;2. DELETION&#xA;3. DISPLAY&#xA;4. Exit&#xA;&#xA;Enter your choice: 2&#xA;23&#xA;&#xA;&#xA;...CIRCULAR QUEUE USING LL...&#xA;&#xA;1. INSERTION&#xA;2. DELETION&#xA;3. DISPLAY&#xA;4. Exit&#xA;&#xA;Enter your choice: 3&#xA;&#xA;Data list: 44&#xA;&#xA;&#xA;...CIRCULAR QUEUE USING LL...&#xA;&#xA;1. INSERTION&#xA;2. DELETION&#xA;3. DISPLAY&#xA;4. Exit&#xA;&#xA;Enter your choice: 4&#xA;&#xA;....THANKS....&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-implement-a-priority-queue-using-linked-list&#34;&gt;&#xA;  Write a C++ program to implement a priority queue using linked list&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-implement-a-priority-queue-using-linked-list&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;quot;iostream.h&amp;quot;&#xA;#include&amp;quot;conio.h&amp;quot;&#xA;#include&amp;quot;process.h&amp;quot;&#xA;#include&amp;quot;stdio.h&amp;quot;&#xA;&#xA;class node {&#xA;    int data;&#xA;    int prty;&#xA;    node * next;&#xA;    public:&#xA;    void display();&#xA;    void insert();&#xA;    void del();&#xA;    void delbeg();&#xA;};&#xA;&#xA;node * head, * temp, * start, * t;&#xA;&#xA;void node::display() {&#xA;&#xA;    temp = start;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Data list: &amp;quot;;&#xA;&#xA;    while (temp != NULL) {&#xA;        printf(&amp;quot;%3d &amp;quot;, temp - &amp;gt; data);&#xA;        temp = temp - &amp;gt; next;&#xA;    }&#xA;&#xA;    temp = start;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Priority: &amp;quot;;&#xA;&#xA;    while (temp != NULL) {&#xA;        printf(&amp;quot;%3d &amp;quot;, temp - &amp;gt; prty);&#xA;        temp = temp - &amp;gt; next;&#xA;    }&#xA;&#xA;}&#xA;&#xA;&#xA;void node::insert() {&#xA;&#xA;    head = new node;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the data: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;head - &amp;gt; data;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the priority: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;head - &amp;gt; prty;&#xA;    head - &amp;gt; next = NULL;&#xA;&#xA;    if (start == NULL) {&#xA;        start = head;&#xA;    } else {&#xA;        temp = start;&#xA;        while (temp - &amp;gt; next != NULL) {&#xA;            temp = temp - &amp;gt; next;&#xA;        }&#xA;        temp - &amp;gt; next = head;&#xA;&#xA;    }&#xA;&#xA;}&#xA;&#xA;void node::delbeg() {&#xA;    if (start == NULL)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n LIST EMPTY &amp;quot;;&#xA;    else {&#xA;        cout&amp;lt;&amp;lt;start - &amp;gt; data;&#xA;        start = start - &amp;gt; next;&#xA;        delete temp;&#xA;    }&#xA;}&#xA;&#xA;&#xA;void node::del() {&#xA;&#xA;    if (start == NULL) {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n LIST EMPTY &amp;quot;;&#xA;        return;&#xA;    }&#xA;&#xA;    int lp;&#xA;    temp = start;&#xA;    lp = temp - &amp;gt; prty;&#xA;&#xA;    while (temp != NULL) {&#xA;        if (temp - &amp;gt; prty &amp;gt; lp) {&#xA;            lp = temp - &amp;gt; prty;&#xA;        }&#xA;        temp = temp - &amp;gt; next;&#xA;    }&#xA;&#xA;    temp = start;&#xA;    while (temp != NULL) {&#xA;        if (temp - &amp;gt; prty == lp) {&#xA;            if (temp == start) {&#xA;                delbeg();&#xA;                return;&#xA;            } else {&#xA;                cout&amp;lt;&amp;lt;temp - &amp;gt; data;&#xA;                t - &amp;gt; next = temp - &amp;gt; next;&#xA;                delete temp;&#xA;                return;&#xA;            }&#xA;        } else {&#xA;            t = temp;&#xA;            temp = temp - &amp;gt; next;&#xA;        }&#xA;&#xA;    }&#xA;}&#xA;&#xA;void main() {&#xA;    int ch;&#xA;    node ob;&#xA;    start = NULL;&#xA;    clrscr();&#xA;    do {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n\t...PRIORITY QUEUE USING LL...\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n1.INSERTION\n2.DELETION\n3.DISPLAY\n4.EXIT\n\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter your choice: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;        switch (ch) {&#xA;            case 1:&#xA;                ob.insert();&#xA;                break;&#xA;            case 2:&#xA;                ob.del();&#xA;                break;&#xA;            case 3:&#xA;                ob.display();&#xA;                break;&#xA;            case 4:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\t ....THANKS....&amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            default:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\t INVALID KEY-IN &amp;quot;;&#xA;        }&#xA;    } while (1);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-22&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-22&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;...PRIORITY QUEUE USING LL...&#xA;&#xA;1. INSERTION&#xA;2. DELETION&#xA;3. DISPLAY&#xA;4. Exit&#xA;&#xA;&#xA;Enter your choice: 1&#xA;&#xA;Enter the data: 23&#xA;&#xA;Enter the priority: 5&#xA;&#xA;&#xA;...PRIORITY QUEUE USING LL...&#xA;&#xA;1. INSERTION&#xA;2. DELETION&#xA;3. DISPLAY&#xA;4. Exit&#xA;&#xA;&#xA;Enter your choice: 1&#xA;&#xA;Enter the data: 96&#xA;&#xA;Enter the priority: 6&#xA;&#xA;&#xA;...PRIORITY QUEUE USING LL...&#xA;&#xA;1. INSERTION&#xA;2. DELETION&#xA;3. DISPLAY&#xA;4. Exit&#xA;&#xA;&#xA;Enter your choice: 3&#xA;&#xA;Data list: 23 96&#xA;Priority: 5 6&#xA;&#xA;&#xA;...PRIORITY QUEUE USING LL...&#xA;&#xA;1. INSERTION&#xA;2. DELETION&#xA;3. DISPLAY&#xA;4. Exit&#xA;&#xA;&#xA;Enter your choice: 2&#xA;96&#xA;&#xA;&#xA;...PRIORITY QUEUE USING LL...&#xA;&#xA;1. INSERTION&#xA;2. DELETION&#xA;3. DISPLAY&#xA;4. Exit&#xA;&#xA;&#xA;Enter your choice: 3&#xA;&#xA;Data list: 23&#xA;Priority: 5&#xA;&#xA;...PRIORITY QUEUE USING LL...&#xA;&#xA;&#xA;1. INSERTION&#xA;2. DELETION&#xA;3. DISPLAY&#xA;4. Exit&#xA;&#xA;&#xA;Enter your choice: 4&#xA;&#xA;....THANKS....&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-perform-polynomial-addition-using-linked-list&#34;&gt;&#xA;  Write a C++ program to perform polynomial addition using linked list&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-perform-polynomial-addition-using-linked-list&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;quot;iostream.h&amp;quot;&#xA;#include&amp;quot;conio.h&amp;quot;&#xA;#include&amp;quot;process.h&amp;quot;&#xA;&#xA;struct node {&#xA;    int co, exp;&#xA;    node * next;&#xA;};&#xA;&#xA;class poly {&#xA;    node * start, * temp, * head;&#xA;    public:&#xA;    poly() {&#xA;        start = NULL;&#xA;    }&#xA;    void create();&#xA;    void display();&#xA;    void add(poly, poly);&#xA;};&#xA;&#xA;void poly::create() {&#xA;    int n;&#xA;    do {&#xA;        head = new node;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter values for coefficient and exponent: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;head - &amp;gt; co&amp;gt;&amp;gt;head - &amp;gt; exp;&#xA;        head - &amp;gt; next = NULL;&#xA;        if (head - &amp;gt; co == 0)&#xA;            goto PROCEED;&#xA;        else if (start == NULL)&#xA;            start = temp = head;&#xA;        else {&#xA;            temp - &amp;gt; next = head;&#xA;            temp = head;&#xA;        }&#xA;&#xA;        PROCEED:&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Continue? ,then press \&amp;quot;1\&amp;quot;:&amp;quot;;&#xA;        cin&amp;gt;&amp;gt;n;&#xA;    } while (n == 1);&#xA;}&#xA;&#xA;void poly::display() {&#xA;    temp = start;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n\n........................................\n\n\n\t&amp;quot;;&#xA;    while (temp - &amp;gt; next != NULL) {&#xA;        cout&amp;lt;&amp;lt;temp - &amp;gt; co &amp;lt;&amp;lt;&amp;quot;x^&amp;quot; &amp;lt;&amp;lt;temp - &amp;gt; exp &amp;lt;&amp;lt;&amp;quot;+&amp;quot;;&#xA;        temp = temp - &amp;gt; next;&#xA;    }&#xA;    cout&amp;lt;&amp;lt;temp - &amp;gt; co &amp;lt;&amp;lt;&amp;quot;x^&amp;quot; &amp;lt;&amp;lt;temp - &amp;gt; exp;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n\n........................................\n&amp;quot;;&#xA;}&#xA;&#xA;void poly::add(poly r1, poly r2) {&#xA;    r1.temp = r1.start;&#xA;    r2.temp = r2.start;&#xA;    while (r1.temp != NULL &amp;amp;&amp;amp; r2.temp != NULL) {&#xA;        if (r1.temp - &amp;gt; exp &amp;gt; r2.temp - &amp;gt; exp) {&#xA;            head = new node;&#xA;            head - &amp;gt; co = r1.temp - &amp;gt; co;&#xA;            head - &amp;gt; exp = r1.temp - &amp;gt; exp;&#xA;            head - &amp;gt; next = NULL;&#xA;            if (start == NULL)&#xA;                start = temp = head;&#xA;            else {&#xA;                temp - &amp;gt; next = head;&#xA;                temp = head;&#xA;            }&#xA;            r1.temp = r1.temp - &amp;gt; next;&#xA;        } else if (r1.temp - &amp;gt; expexp) {&#xA;            head = new node;&#xA;            head - &amp;gt; co = r2.temp - &amp;gt; co;&#xA;            head - &amp;gt; exp = r2.temp - &amp;gt; exp;&#xA;            head - &amp;gt; next = NULL;&#xA;            if (start == NULL)&#xA;                start = temp = head;&#xA;            else {&#xA;                temp - &amp;gt; next = head;&#xA;                temp = head;&#xA;            }&#xA;            r2.temp = r2.temp - &amp;gt; next;&#xA;        } else {&#xA;            head = new node;&#xA;            head - &amp;gt; co = r1.temp - &amp;gt; co + r2.temp - &amp;gt; co;&#xA;            head - &amp;gt; exp = r1.temp - &amp;gt; exp;&#xA;            head - &amp;gt; next = NULL;&#xA;            if (start == NULL)&#xA;                start = temp = head;&#xA;            else {&#xA;                temp - &amp;gt; next = head;&#xA;                temp = head;&#xA;            }&#xA;            r1.temp = r1.temp - &amp;gt; next;&#xA;            r2.temp = r2.temp - &amp;gt; next;&#xA;        }&#xA;    }&#xA;&#xA;    while (r1.temp != NULL) {&#xA;        head = new node;&#xA;        head - &amp;gt; co = r1.temp - &amp;gt; co;&#xA;        head - &amp;gt; exp = r1.temp - &amp;gt; exp;&#xA;        head - &amp;gt; next = NULL;&#xA;        if (start == NULL)&#xA;            start = temp = head;&#xA;        else {&#xA;            temp - &amp;gt; next = head;&#xA;            temp = head;&#xA;        }&#xA;        r1.temp = r1.temp - &amp;gt; next;&#xA;    }&#xA;&#xA;    while (r2.temp != NULL) {&#xA;        head = new node;&#xA;        head - &amp;gt; co = r2.temp - &amp;gt; co;&#xA;        head - &amp;gt; exp = r2.temp - &amp;gt; exp;&#xA;        head - &amp;gt; next = NULL;&#xA;        if (start == NULL)&#xA;            start = temp = head;&#xA;        else {&#xA;            temp - &amp;gt; next = head;&#xA;            temp = head;&#xA;        }&#xA;        r2.temp = r2.temp - &amp;gt; next;&#xA;    }&#xA;&#xA;}&#xA;&#xA;void main() {&#xA;    poly p1, p2, p3;&#xA;    clrscr();&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n First polynomial...&amp;quot;;&#xA;    p1.create();&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Second polynomial...&amp;quot;;&#xA;    p2.create();&#xA;    p3.add(p1, p2);&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Result of addition: &amp;quot;;&#xA;    p3.display();&#xA;    getch();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-23&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-23&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;First polynomial...&#xA;Enter values for coefficient and exponent: 4 3&#xA;&#xA;Continue ? , then press &amp;quot;1&amp;quot; : 1&#xA;&#xA;Enter values for coefficient and exponent: 5 2&#xA;&#xA;Continue ? , then press &amp;quot;1&amp;quot; : 1&#xA;&#xA;Enter values for coefficient and exponent: 3 1&#xA;&#xA;Continue ? , then press &amp;quot;1&amp;quot; : 1&#xA;&#xA;Enter values for coefficient and exponent: 6 0&#xA;&#xA;Continue ? , then press &amp;quot;1&amp;quot; : 0&#xA;&#xA;Second polynomial...&#xA;Enter values for coefficient and exponent: 3 3&#xA;&#xA;Continue ? , then press &amp;quot;1&amp;quot; : 1&#xA;&#xA;Enter values for coefficient and exponent: 2 2&#xA;&#xA;Continue ? , then press &amp;quot;1&amp;quot; : 1&#xA;&#xA;Enter values for coefficient and exponent: 3 1&#xA;&#xA;Continue ? , then press &amp;quot;1&amp;quot; : 1&#xA;&#xA;Enter values for coefficient and exponent: 1 0&#xA;&#xA;Continue ? , then press &amp;quot;1&amp;quot; : 0&#xA;&#xA;Result of addition:&#xA;&#xA;.................&#xA;&#xA;&#xA;7 x ^ 3 + 7 x ^ 2 + 6 x ^ 1 + 7 x ^ 0&#xA;&#xA;.................&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-implement-a-binary-tree&#34;&gt;&#xA;  Write a C++ program to implement a binary tree&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-implement-a-binary-tree&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include”iostream.h”&#xA;#include”conio.h”&#xA;#include”process.h”&#xA;#include&amp;quot;stdio.h&amp;quot;&#xA;&#xA;struct node {&#xA;    char data;&#xA;    node * lchild, * rchild;&#xA;};&#xA;&#xA;node * head;&#xA;&#xA;class tree {&#xA;    node * root;&#xA;    public:&#xA;    tree() {&#xA;        root = NULL;&#xA;    }&#xA;    node * read();&#xA;    node * makenode(char);&#xA;    void createtree(node * );&#xA;    void inorder(node * );&#xA;    void preorder(node * );&#xA;    void postorder(node * );&#xA;};&#xA;&#xA;node * tree::read() {&#xA;    char item;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter data: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;item;&#xA;    root = makenode(item);&#xA;    createtree(root);&#xA;    return root;&#xA;}&#xA;&#xA;node * tree::makenode(char x) {&#xA;    head = new node;&#xA;    head - &amp;gt; data = x;&#xA;    head - &amp;gt; lchild = head - &amp;gt; rchild = NULL;&#xA;    return head;&#xA;}&#xA;&#xA;void tree::createtree(node * root) {&#xA;    int ch;&#xA;    char item;&#xA;    if (root != NULL) {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Create left child for &amp;quot; &amp;lt;&amp;lt;root - &amp;gt; data &amp;lt;&amp;lt;&amp;quot; (if so press \&amp;quot;1\&amp;quot;)&amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;        if (ch == 1) {&#xA;            cout&amp;lt;&amp;lt;&amp;quot;\n Enter data: &amp;quot;;&#xA;            cin&amp;gt;&amp;gt;item;&#xA;            root - &amp;gt; lchild = makenode(item);&#xA;            createtree(root - &amp;gt; lchild);&#xA;        }&#xA;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Create right child for &amp;quot; &amp;lt;&amp;lt;root - &amp;gt; data &amp;lt;&amp;lt;&amp;quot; (if so press \&amp;quot;1\&amp;quot;)&amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;        if (ch == 1) {&#xA;            cout&amp;lt;&amp;lt;&amp;quot;\n Enter data: &amp;quot;;&#xA;            cin&amp;gt;&amp;gt;item;&#xA;            root - &amp;gt; rchild = makenode(item);&#xA;            createtree(root - &amp;gt; rchild);&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;void tree::inorder(node * root) {&#xA;    if (root != NULL) {&#xA;        inorder(root - &amp;gt; lchild);&#xA;        cout&amp;lt;&amp;lt;root - &amp;gt; data &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;        inorder(root - &amp;gt; rchild);&#xA;    }&#xA;}&#xA;&#xA;void tree::preorder(node * root) {&#xA;    if (root != NULL) {&#xA;        cout&amp;lt;&amp;lt;root - &amp;gt; data &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;        preorder(root - &amp;gt; lchild);&#xA;        preorder(root - &amp;gt; rchild);&#xA;    }&#xA;}&#xA;&#xA;void tree::postorder(node * root) {&#xA;    if (root != NULL) {&#xA;        postorder(root - &amp;gt; lchild);&#xA;        postorder(root - &amp;gt; rchild);&#xA;        cout&amp;lt;&amp;lt;root - &amp;gt; data &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;    }&#xA;}&#xA;&#xA;&#xA;void main() {&#xA;    tree ob;&#xA;    node * root;&#xA;    int ch;&#xA;    clrscr();&#xA;    do {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n.... BINARY TREE ....\n\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n1.Creation\n2.Inorder Traversal\n3.Preorder Traversal&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n4.Postorder Traversal\n5.Exit&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\t Enter your choice: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;        switch (ch) {&#xA;            case 1:&#xA;                root = ob.read();&#xA;                break;&#xA;            case 2:&#xA;                ob.inorder(root);&#xA;                break;&#xA;            case 3:&#xA;                ob.preorder(root);&#xA;                break;&#xA;            case 4:&#xA;                ob.postorder(root);&#xA;                break;&#xA;            case 5:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\n\t... Thanking You ...&amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            default:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n Invalid key-in &amp;quot;;&#xA;        }&#xA;&#xA;    } while (1);&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-24&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-24&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;....BINARY TREE....&#xA;&#xA;&#xA;1. Creation&#xA;2. Inorder Traversal&#xA;3. Preorder Traversal&#xA;4. Postorder Traversal&#xA;5. Exit&#xA;Enter your choice: 1&#xA;&#xA;Enter data: A&#xA;&#xA;Create left child for A(if so press &amp;quot;1&amp;quot;) 1&#xA;&#xA;Enter data: B&#xA;&#xA;Create left child for B(if so press &amp;quot;1&amp;quot;) 1&#xA;&#xA;Enter data: C&#xA;&#xA;Create left child for C(if so press &amp;quot;1&amp;quot;) 0&#xA;&#xA;Create right child for C(if so press &amp;quot;1&amp;quot;) 0&#xA;&#xA;Create right child for B(if so press &amp;quot;1&amp;quot;) 1&#xA;&#xA;Enter data: D&#xA;&#xA;Create left child for D(if so press &amp;quot;1&amp;quot;) 0&#xA;&#xA;Create right child for D(if so press &amp;quot;1&amp;quot;) 0&#xA;&#xA;Create right child for A(if so press &amp;quot;1&amp;quot;) 1&#xA;&#xA;Enter data: E&#xA;&#xA;Create left child for E(if so press &amp;quot;1&amp;quot;) 0&#xA;&#xA;Create right child for E(if so press &amp;quot;1&amp;quot;) 0&#xA;&#xA;&#xA;....BINARY TREE....&#xA;&#xA;&#xA;1. Creation&#xA;2. Inorder Traversal&#xA;3. Preorder Traversal&#xA;4. Postorder Traversal&#xA;5. Exit&#xA;Enter your choice: 2&#xA;C B D A E&#xA;&#xA;....BINARY TREE....&#xA;&#xA;&#xA;1. Creation&#xA;2. Inorder Traversal&#xA;3. Preorder Traversal&#xA;4. Postorder Traversal&#xA;5. Exit&#xA;Enter your choice: 3&#xA;A B C D E&#xA;&#xA;....BINARY TREE....&#xA;&#xA;&#xA;1. Creation&#xA;2. Inorder Traversal&#xA;3. Preorder Traversal&#xA;4. Postorder Traversal&#xA;5. Exit&#xA;Enter your choice: 4&#xA;C D B E A&#xA;&#xA;&#xA;....BINARY TREE....&#xA;&#xA;&#xA;1. Creation&#xA;2. Inorder Traversal&#xA;3. Preorder Traversal&#xA;4. Postorder Traversal&#xA;5. Exit&#xA;Enter your choice: 5&#xA;&#xA;&#xA;...Thanking You...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-implement-binary-search-tree&#34;&gt;&#xA;  Write a C++ program to implement Binary Search Tree&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-implement-binary-search-tree&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;quot;iostream.h&amp;quot;&#xA;#include&amp;quot;conio.h&amp;quot;&#xA;#include&amp;quot;process.h&amp;quot;&#xA;#include&amp;quot;stdio.h&amp;quot;&#xA;&#xA;struct node {&#xA;    int data;&#xA;    node * left;&#xA;    node * right;&#xA;};&#xA;&#xA;node * root;&#xA;&#xA;class bst {&#xA;    public:&#xA;    bst() {&#xA;        root = NULL;&#xA;    }&#xA;    node * insert(node * , int);&#xA;    void delet(node * , node * );&#xA;    void search(node * , int);&#xA;    node * find(node * , int);&#xA;&#xA;};&#xA;&#xA;node * bst::insert(node * root, int item) {&#xA;    if (root == NULL) {&#xA;        root = new node;&#xA;        root - &amp;gt; data = item;&#xA;        root - &amp;gt; left = root - &amp;gt; right = NULL;&#xA;    } else if (itemdata)&#xA;        root - &amp;gt; left = insert(root - &amp;gt; left, item);&#xA;    else&#xA;        root - &amp;gt; right = insert(root - &amp;gt; right, item);&#xA;&#xA;    return root;&#xA;&#xA;}&#xA;void bst::search(node * root, int item) {&#xA;    if (root == NULL)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Number doesnot exist &amp;quot;;&#xA;    else if (root - &amp;gt; data == item)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Number is present &amp;quot;;&#xA;    else if (itemdata)&#xA;        search(root - &amp;gt; left, item);&#xA;    else&#xA;        search(root - &amp;gt; right, item);&#xA;&#xA;}&#xA;&#xA;node * bst::find(node * root, int item) {&#xA;    node * temp;&#xA;    temp = root;&#xA;    node * parent;&#xA;    while (root != NULL) {&#xA;        if (itemdata) {&#xA;            parent = root;&#xA;            root = root - &amp;gt; left;&#xA;        } else if (item &amp;gt; root - &amp;gt; data) {&#xA;            parent = root;&#xA;            root = root - &amp;gt; right;&#xA;        } else {&#xA;            delet(root, parent);&#xA;            break;&#xA;        }&#xA;    }&#xA;    if (root == NULL) {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Item doesnot exist &amp;quot;;&#xA;    }&#xA;&#xA;    return temp;&#xA;&#xA;}&#xA;&#xA;void bst::delet(node * root, node * parent) {&#xA;&#xA;    if (root - &amp;gt; left == NULL &amp;amp;&amp;amp; root - &amp;gt; right == NULL) //terminal node&#xA;    {&#xA;        if (parent - &amp;gt; left == root)&#xA;            parent - &amp;gt; left = NULL;&#xA;        else&#xA;            parent - &amp;gt; right = NULL;&#xA;&#xA;        return;&#xA;    } else if (root - &amp;gt; left != NULL &amp;amp;&amp;amp; root - &amp;gt; right != NULL) //node with 2 childs&#xA;    {&#xA;        node * ptr, * temp;&#xA;        parent = root;&#xA;        temp = root - &amp;gt; left;&#xA;        ptr = root - &amp;gt; right;&#xA;        if (ptr - &amp;gt; left == NULL) {&#xA;            root - &amp;gt; data = ptr - &amp;gt; data;&#xA;        }&#xA;        while (ptr - &amp;gt; left != NULL) {&#xA;            parent = ptr;&#xA;            ptr = ptr - &amp;gt; left;&#xA;            root - &amp;gt; data = ptr - &amp;gt; data;&#xA;        }&#xA;        root - &amp;gt; left = temp;&#xA;        delete ptr;&#xA;&#xA;        return;&#xA;&#xA;    } else //node with 1 child&#xA;    {&#xA;        if (parent - &amp;gt; left == root) {&#xA;            if (root - &amp;gt; left == NULL)&#xA;                parent - &amp;gt; left = root - &amp;gt; right;&#xA;            else&#xA;                parent - &amp;gt; left = root - &amp;gt; left;&#xA;        } else if (parent - &amp;gt; right == root) {&#xA;            if (root - &amp;gt; left == NULL)&#xA;                parent - &amp;gt; right = root - &amp;gt; right;&#xA;            else&#xA;                parent - &amp;gt; right = root - &amp;gt; left;&#xA;        }&#xA;        return;&#xA;    }&#xA;&#xA;}&#xA;&#xA;void main() {&#xA;    clrscr();&#xA;    bst ob;&#xA;    int item, ch;&#xA;    node * temp;&#xA;    do {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n ... BINARY SEARCH TREE ... &amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n1.Insertion\n2.Deletion\n3.Searching\n4.Exit&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\t Enter your choice: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;&#xA;        switch (ch) {&#xA;            case 1:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n Enter an item: &amp;quot;;&#xA;                cin&amp;gt;&amp;gt;item;&#xA;                root = ob.insert(root, item);&#xA;                break;&#xA;            case 2:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n Enter the item: &amp;quot;;&#xA;                cin&amp;gt;&amp;gt;item;&#xA;                root = ob.find(root, item);&#xA;                break;&#xA;            case 3:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n Enter the item: &amp;quot;;&#xA;                cin&amp;gt;&amp;gt;item;&#xA;                ob.search(root, item);&#xA;                break;&#xA;            case 4:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n ... Thanking You ...&amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            default:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n Invalid key-in &amp;quot;;&#xA;&#xA;        }&#xA;&#xA;    } while (1);&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-25&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-25&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;...BINARY SEARCH TREE...&#xA;&#xA;1. Insertion&#xA;2. Deletion&#xA;3. Searching&#xA;4. Exit&#xA;&#xA;Enter your choice: 1&#xA;&#xA;Enter an item: 25&#xA;&#xA;&#xA;...BINARY SEARCH TREE...&#xA;&#xA;1. Insertion&#xA;2. Deletion&#xA;3. Searching&#xA;4. Exit&#xA;&#xA;Enter your choice: 1&#xA;&#xA;Enter an item: 10&#xA;&#xA;&#xA;...BINARY SEARCH TREE...&#xA;&#xA;&#xA;1. Insertion&#xA;2. Deletion&#xA;3. Searching&#xA;4. Exit&#xA;&#xA;Enter your choice: 1&#xA;&#xA;Enter an item: 20&#xA;&#xA;...BINARY SEARCH TREE...&#xA;&#xA;1. Insertion&#xA;2. Deletion&#xA;3. Searching&#xA;4. Exit&#xA;&#xA;Enter your choice: 1&#xA;&#xA;Enter an item: 5&#xA;&#xA;...BINARY SEARCH TREE...&#xA;&#xA;1. Insertion&#xA;2. Deletion&#xA;3. Searching&#xA;4. Exit&#xA;&#xA;Enter your choice: 1&#xA;&#xA;Enter an item: 35&#xA;&#xA;&#xA;...BINARY SEARCH TREE...&#xA;&#xA;1. Insertion&#xA;2. Deletion&#xA;3. Searching&#xA;4. Exit&#xA;&#xA;Enter your choice: 1&#xA;&#xA;Enter an item: 32&#xA;&#xA;...BINARY SEARCH TREE...&#xA;&#xA;1. Insertion&#xA;2. Deletion&#xA;3. Searching&#xA;4. Exit&#xA;&#xA;Enter your choice: 3&#xA;&#xA;Enter the item: 10&#xA;&#xA;Number is present&#xA;&#xA;&#xA;...BINARY SEARCH TREE...&#xA;&#xA;1. Insertion&#xA;2. Deletion&#xA;3. Searching&#xA;4. Exit&#xA;&#xA;Enter your choice: 2&#xA;&#xA;Enter the item: 10&#xA;&#xA;&#xA;...BINARY SEARCH TREE...&#xA;&#xA;&#xA;1. Insertion&#xA;2. Deletion&#xA;3. Searching&#xA;4. Exit&#xA;&#xA;Enter your choice: 3&#xA;&#xA;Enter the item: 10&#xA;&#xA;Number doesnot exist&#xA;&#xA;&#xA;...BINARY SEARCH TREE...&#xA;&#xA;&#xA;1. Insertion&#xA;2. Deletion&#xA;3. Searching&#xA;4. Exit&#xA;&#xA;Enter your choice: 4&#xA;&#xA;...Thanking You...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-create-and-evaluate-an-expression-tree&#34;&gt;&#xA;  Write a C++ program to create and evaluate an Expression Tree&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-create-and-evaluate-an-expression-tree&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;quot;iostream.h&amp;quot;&#xA;#include&amp;quot;conio.h&amp;quot;&#xA;#include&amp;quot;process.h&amp;quot;&#xA;#include&amp;quot;ctype.h&amp;quot;&#xA;#include &amp;quot;stdio.h&amp;quot;&#xA;&#xA;&#xA;struct node {&#xA;    char data;&#xA;    node * lchild;&#xA;    node * rchild;&#xA;};&#xA;&#xA;node * head;&#xA;char p[50];&#xA;node * stack[50];&#xA;int top = -1;&#xA;float c;&#xA;float v;&#xA;node * q;&#xA;&#xA;class tree {&#xA;    node * root;&#xA;    public:&#xA;    tree() {}&#xA;    float evaluate(node * );&#xA;    node * makenode(char);&#xA;    void createtree();&#xA;    void push(node * );&#xA;    node * pop();&#xA;    float result(float, float, char);&#xA;};&#xA;&#xA;void tree::createtree() {&#xA;    int i = 0;&#xA;    while (p[i] != &#39;\0&#39;) {&#xA;        root = makenode(p[i]);&#xA;        if (!isalpha(p[i])) {&#xA;            root - &amp;gt; rchild = pop();&#xA;            root - &amp;gt; lchild = pop();&#xA;        }&#xA;&#xA;        push(root);&#xA;        i++;&#xA;    }&#xA;&#xA;}&#xA;&#xA;void tree::push(node * root) {&#xA;    top++;&#xA;    stack[top] = root;&#xA;}&#xA;&#xA;node * tree::pop() {&#xA;    q = stack[top];&#xA;    top--;&#xA;    return q;&#xA;}&#xA;&#xA;node * tree::makenode(char x) {&#xA;    head = new node;&#xA;    head - &amp;gt; data = x;&#xA;    head - &amp;gt; lchild = head - &amp;gt; rchild = NULL;&#xA;    return head;&#xA;}&#xA;&#xA;float tree::evaluate(node * root) {&#xA;    float a, b;&#xA;    if (!isalpha(root - &amp;gt; lchild - &amp;gt; data))&#xA;        a = evaluate(root - &amp;gt; lchild);&#xA;    else {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter the value for &amp;quot; &amp;lt;&amp;lt;root - &amp;gt; lchild - &amp;gt; data &amp;lt;&amp;lt;&amp;quot;: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;a;&#xA;    }&#xA;&#xA;    if (!isalpha(root - &amp;gt; rchild - &amp;gt; data))&#xA;        b = evaluate(root - &amp;gt; rchild);&#xA;    else {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter the value for &amp;quot; &amp;lt;&amp;lt;root - &amp;gt; rchild - &amp;gt; data &amp;lt;&amp;lt;&amp;quot;: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;b;&#xA;    }&#xA;&#xA;&#xA;    v = result(a, b, root - &amp;gt; data);&#xA;    return v;&#xA;&#xA;}&#xA;&#xA;float tree::result(float a, float b, char op) {&#xA;    float c = 0;&#xA;&#xA;    switch (op) {&#xA;        case &#39;+&#39;:&#xA;            c = a + b;&#xA;            break;&#xA;        case &#39;-&#39;:&#xA;            c = a - b;&#xA;            break;&#xA;        case &#39;*&#39;:&#xA;            c = a * b;&#xA;            break;&#xA;        case &#39;/&#39;:&#xA;            if (b != 0)&#xA;                c = a / b;&#xA;            else {&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n Error: &amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            }&#xA;            break;&#xA;    }&#xA;&#xA;    return c;&#xA;}&#xA;&#xA;void main() {&#xA;    clrscr();&#xA;    float ans;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter a postfix expression: &amp;quot;;&#xA;    gets(p);&#xA;    tree ob;&#xA;    ob.createtree();&#xA;    ans = ob.evaluate(stack[top]);&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Value of the expression is: &amp;quot; &amp;lt;&amp;lt;ans;&#xA;    getch();&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-26&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-26&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;Enter a postfix expression: ab/cd/*&#xA;&#xA;Enter the value for a: 15&#xA;&#xA;Enter the value for b: 5&#xA;&#xA;Enter the value for c: 20&#xA;&#xA;Enter the value for d: 4&#xA;&#xA;Value of the expression is: 15&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-implement-various-sorting-techniques&#34;&gt;&#xA;  Write a C++ program to implement various Sorting techniques&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-implement-various-sorting-techniques&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;quot;iostream.h&amp;quot;&#xA;#include&amp;quot;conio.h&amp;quot;&#xA;#include&amp;quot;process.h&amp;quot;&#xA;&#xA;int item;&#xA;&#xA;void display(int a[], int n) {&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Sorted elements are: \n&amp;quot;;&#xA;&#xA;    for (int i = 0; i &amp;lt; n; i++)&#xA;        cout&amp;lt;&amp;lt;a[i] &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;}&#xA;&#xA;void bubblesort(int a[], int n) {&#xA;    int i, j, t;&#xA;    for (i = 0; i &amp;lt; n; i++) {&#xA;        for (j = 0; j &amp;lt; n - 1 - i; j++) {&#xA;            if (a[j] &amp;gt; a[j + 1]) {&#xA;                t = a[j];&#xA;                a[j] = a[j + 1];&#xA;                a[j + 1] = t;&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;}&#xA;&#xA;void seletionsort(int a[], int n) {&#xA;    int i, j, t;&#xA;    for (i = 0; i &amp;lt; n; i++) {&#xA;        for (j = i + 1; j &amp;lt; n; j++) {&#xA;            if (a[i] &amp;gt; a[j]) {&#xA;                t = a[i];&#xA;                a[i] = a[j];&#xA;                a[j] = t;&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;}&#xA;&#xA;void insertionsort(int a[], int n) {&#xA;    int k, j, t;&#xA;    for (k = 1; k &amp;lt; n; k++) {&#xA;        t = a[k];&#xA;        j = k - 1;&#xA;        while (t &amp;lt; a[j] &amp;amp;&amp;amp; j &amp;gt;= 0) {&#xA;            a[j + 1] = a[j];&#xA;            j--;&#xA;        }&#xA;        a[j + 1] = t;&#xA;    }&#xA;&#xA;}&#xA;&#xA;void quicksort(int a[], int low, int high) {&#xA;    int l, h, key, t;&#xA;    l = low;&#xA;    h = high;&#xA;    key = a[(low + high) / 2];&#xA;&#xA;    do {&#xA;        while (key &amp;gt; a[low])&#xA;            low++;&#xA;        while (key &amp;lt; a[high])&#xA;            high--;&#xA;        if (low &amp;lt;= high) {&#xA;            t = a[low];&#xA;            a[low++] = a[high];&#xA;            a[high--] = t;&#xA;        }&#xA;&#xA;    } while (low &amp;lt;= high);&#xA;&#xA;    if (l &amp;lt; high)&#xA;        quicksort(a, l, high);&#xA;&#xA;    if (low &amp;lt; h)&#xA;        quicksort(a, low, h);&#xA;&#xA;}&#xA;&#xA;void bucketsort(int a[], int n) {&#xA;    int i, j, pass, k, l, div = 1, num = 0, large = a[0];&#xA;    int buck[10], q[15][15];&#xA;&#xA;    for (i = 1; i &amp;lt; n; i++) {&#xA;        if (a[i] &amp;gt; large)&#xA;            large = a[i];&#xA;    }&#xA;&#xA;    while (large &amp;gt; 0) {&#xA;        num++;&#xA;        large = large / 10;&#xA;    }&#xA;&#xA;    for (pass = 0; pass &amp;lt; num; pass++) {&#xA;        for (k = 0; k &amp;lt; 10; k++)&#xA;            buck[k] = 0;&#xA;&#xA;        for (i = 0; i &amp;lt; n; i++) {&#xA;            l = (a[i] / div) % 10;&#xA;            q[l][buck[l]] = a[i];&#xA;            buck[l]++;&#xA;        }&#xA;        i = 0;&#xA;&#xA;        for (k = 0; k &amp;lt; 10; k++)&#xA;            for (j = 0; j &amp;lt; buck[k]; j++) {&#xA;                a[i] = q[k][j];&#xA;                i++;&#xA;            }&#xA;&#xA;        div = div * 10;&#xA;    }&#xA;&#xA;}&#xA;&#xA;void merge(int a[], int low, int mid, int high) {&#xA;    int i, h, j, b[30], k;&#xA;    i = low;&#xA;    h = low;&#xA;    j = mid + 1;&#xA;&#xA;    while (h &amp;lt;= mid &amp;amp;&amp;amp; j &amp;lt;= high) {&#xA;        if (a[h] &amp;lt; a[j]) {&#xA;            b[i] = a[h];&#xA;            h++;&#xA;        } else {&#xA;            b[i] = a[j];&#xA;            j++;&#xA;        }&#xA;        i++;&#xA;    }&#xA;&#xA;    if (h &amp;gt; mid) {&#xA;        for (k = j; k &amp;lt;= high; k++) {&#xA;            b[i] = a[k];&#xA;            i++;&#xA;        }&#xA;    } else {&#xA;        for (k = h; k &amp;lt;= mid; k++) {&#xA;            b[i] = a[k];&#xA;            i++;&#xA;        }&#xA;    }&#xA;&#xA;    for (k = low; k &amp;lt;= high; k++) {&#xA;        a[k] = b[k];&#xA;    }&#xA;&#xA;}&#xA;&#xA;void mergesort(int a[], int low, int high) {&#xA;    int mid;&#xA;    if (low &amp;lt; high) {&#xA;        mid = (low + high) / 2;&#xA;        mergesort(a, low, mid);&#xA;        mergesort(a, mid + 1, high);&#xA;        merge(a, low, mid, high);&#xA;    }&#xA;&#xA;}&#xA;/* for tree sort */&#xA;struct node {&#xA;    int data;&#xA;    node * left;&#xA;    node * right;&#xA;};&#xA;&#xA;node * root;&#xA;&#xA;class bst {&#xA;    public:&#xA;    bst() {&#xA;        root = NULL;&#xA;    }&#xA;    node * insert(node * , int);&#xA;&#xA;};&#xA;&#xA;node * bst::insert(node * root, int item) {&#xA;    if (root == NULL) {&#xA;        root = new node;&#xA;        root - &amp;gt; data = item;&#xA;        root - &amp;gt; left = root - &amp;gt; right = NULL;&#xA;    } else if (itemdata)&#xA;        root - &amp;gt; left = insert(root - &amp;gt; left, item);&#xA;    else&#xA;        root - &amp;gt; right = insert(root - &amp;gt; right, item);&#xA;&#xA;    return root;&#xA;&#xA;}&#xA;&#xA;void inorder(node * root) {&#xA;    if (root != NULL) {&#xA;        inorder(root - &amp;gt; left);&#xA;        cout&amp;lt;&amp;lt;root - &amp;gt; data &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;        inorder(root - &amp;gt; right);&#xA;    }&#xA;}&#xA;&#xA;void treesort(int a[], int n) {&#xA;    node * root;&#xA;    bst ob;&#xA;    for (int i = 0; i &amp;lt; n; i++) {&#xA;        root = ob.insert(root, a[i]);&#xA;    }&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Sorted elements are: \n&amp;quot;;&#xA;    inorder(root);&#xA;}&#xA;&#xA;/* end of tree sort */&#xA;&#xA;void heapsort(int a[], int n) {&#xA;    int i, s, f, item, value;&#xA;    for (i = 0; i &amp;lt; n; i++) {&#xA;        item = a[i];&#xA;        s = i;&#xA;        f = (s - 1) / 2;&#xA;        while (s &amp;gt; 0 &amp;amp;&amp;amp; a[f] &amp;lt; item) {&#xA;            a[s] = a[f];&#xA;            s = f;&#xA;            f = (s - 1) / 2;&#xA;        }&#xA;        a[s] = item;&#xA;    }&#xA;&#xA;    for (i = n - 1; i &amp;gt; 0; i--) {&#xA;        value = a[i];&#xA;        a[i] = a[0];&#xA;        f = 0;&#xA;        if (i == 1)&#xA;            s = -1;&#xA;        else&#xA;            s = 1;&#xA;        if (i &amp;gt; 2 &amp;amp;&amp;amp; a[2] &amp;gt; a[1])&#xA;            s = 2;&#xA;&#xA;        while (s &amp;gt;= 0 &amp;amp;&amp;amp; value &amp;lt; a[s]) {&#xA;            a[f] = a[s];&#xA;            f = s;&#xA;            s = 2 * f + 1;&#xA;            if (s + 1 &amp;lt;= i - 1 &amp;amp;&amp;amp; a[s] s = s + 1;&#xA;                if (s &amp;gt; i - 1)&#xA;                    s = -1;&#xA;        }&#xA;&#xA;            a[f] = value;&#xA;    }&#xA;&#xA;}&#xA;&#xA;&#xA;void main() {&#xA;&#xA;    int a[50], num[50], n, i, flag = 1, ch, low, high;&#xA;    clrscr();&#xA;    do {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n..... SORTING ....\n\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n1.BUBBLE SORT\n2.SELECTION SORT\n3.INSERTION SORT\n4.QUICK SORT&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n5.RADIX SORT\n6.MERGE SORT\n7.TREE SORT\n8.HEAP SORT\n9.EXIT&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\t Enter your choice: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;&#xA;        if (ch &amp;gt;= 1 &amp;amp;&amp;amp; ch &amp;lt;= 8 &amp;amp;&amp;amp; flag == 1) {&#xA;            cout&amp;lt;&amp;lt;&amp;quot;\n Enter the limit: &amp;quot;;&#xA;            cin&amp;gt;&amp;gt;n;&#xA;            cout&amp;lt;&amp;lt;&amp;quot;\n Enter the elements: &amp;quot;;&#xA;            for (i = 0; i &amp;lt; n; i++) {&#xA;                cin&amp;gt;&amp;gt;a[i];&#xA;            }&#xA;            flag = 0;&#xA;        }&#xA;&#xA;        for (i = 0; i &amp;lt; n; i++)&#xA;            num[i] = a[i];&#xA;&#xA;        switch (ch) {&#xA;            case 1:&#xA;                bubblesort(num, n);&#xA;                break;&#xA;            case 2:&#xA;                seletionsort(num, n);&#xA;                break;&#xA;            case 3:&#xA;                insertionsort(num, n);&#xA;                break;&#xA;            case 4:&#xA;                low = 0;&#xA;                high = n - 1;&#xA;                quicksort(num, low, high);&#xA;                break;&#xA;            case 5:&#xA;                bucketsort(num, n);&#xA;                break;&#xA;            case 6:&#xA;                low = 0;&#xA;                high = n - 1;&#xA;                mergesort(num, low, high);&#xA;                break;&#xA;            case 7:&#xA;                flag = 0;&#xA;                treesort(num, n);&#xA;                break;&#xA;            case 8:&#xA;                heapsort(num, n);&#xA;                break;&#xA;            case 9:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\t .....Thanking You .....&amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            default:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\t Invalid key-in &amp;quot;;&#xA;        }&#xA;&#xA;        if (ch &amp;gt;= 1 &amp;amp;&amp;amp; ch &amp;lt;= 8 &amp;amp;&amp;amp; ch != 7) {&#xA;            display(num, n);&#xA;        }&#xA;&#xA;    } while (1);&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-27&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-27&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;.....SORTING....&#xA;&#xA;&#xA;1. BUBBLE SORT&#xA;2. SELECTION SORT&#xA;3. INSERTION SORT&#xA;4. QUICK SORT&#xA;5. RADIX SORT&#xA;6. MERGE SORT&#xA;7. TREE SORT&#xA;8. HEAP SORT&#xA;9. Exit&#xA;Enter your choice: 1&#xA;&#xA;Enter the limit: 5&#xA;&#xA;Enter the elements: 99 12 56 3 4&#xA;&#xA;Sorted elements are:&#xA;3 4 12 56 99&#xA;&#xA;&#xA;.....SORTING....&#xA;&#xA;&#xA;1. BUBBLE SORT&#xA;2. SELECTION SORT&#xA;3. INSERTION SORT&#xA;4. QUICK SORT&#xA;5. RADIX SORT&#xA;6. MERGE SORT&#xA;7. TREE SORT&#xA;8. HEAP SORT&#xA;9. Exit&#xA;Enter your choice: 2&#xA;&#xA;Sorted elements are:&#xA;3 4 12 56 99&#xA;&#xA;&#xA;.....SORTING....&#xA;&#xA;&#xA;1. BUBBLE SORT&#xA;2. SELECTION SORT&#xA;3. INSERTION SORT&#xA;4. QUICK SORT&#xA;5. RADIX SORT&#xA;6. MERGE SORT&#xA;7. TREE SORT&#xA;8. HEAP SORT&#xA;9. Exit&#xA;Enter your choice: 3&#xA;&#xA;Sorted elements are:&#xA;3 4 12 56 99&#xA;&#xA;&#xA;.....SORTING....&#xA;&#xA;&#xA;1. BUBBLE SORT&#xA;2. SELECTION SORT&#xA;3. INSERTION SORT&#xA;4. QUICK SORT&#xA;5. RADIX SORT&#xA;6. MERGE SORT&#xA;7. TREE SORT&#xA;8. HEAP SORT&#xA;9. Exit&#xA;Enter your choice: 4&#xA;&#xA;Sorted elements are:&#xA;3 4 12 56 99&#xA;&#xA;&#xA;.....SORTING....&#xA;&#xA;&#xA;1. BUBBLE SORT&#xA;2. SELECTION SORT&#xA;3. INSERTION SORT&#xA;4. QUICK SORT&#xA;5. RADIX SORT&#xA;6. MERGE SORT&#xA;7. TREE SORT&#xA;8. HEAP SORT&#xA;9. Exit&#xA;Enter your choice: 5&#xA;&#xA;Sorted elements are:&#xA;3 4 12 56 99&#xA;&#xA;&#xA;.....SORTING....&#xA;&#xA;&#xA;1. BUBBLE SORT&#xA;2. SELECTION SORT&#xA;3. INSERTION SORT&#xA;4. QUICK SORT&#xA;5. RADIX SORT&#xA;6. MERGE SORT&#xA;7. TREE SORT&#xA;8. HEAP SORT&#xA;9. Exit&#xA;Enter your choice: 6&#xA;&#xA;Sorted elements are:&#xA;3 4 12 56 99&#xA;&#xA;&#xA;.....SORTING....&#xA;&#xA;&#xA;1. BUBBLE SORT&#xA;2. SELECTION SORT&#xA;3. INSERTION SORT&#xA;4. QUICK SORT&#xA;5. RADIX SORT&#xA;6. MERGE SORT&#xA;7. TREE SORT&#xA;8. HEAP SORT&#xA;9. Exit&#xA;Enter your choice: 7&#xA;&#xA;Sorted elements are:&#xA;3 4 12 56 99&#xA;&#xA;&#xA;.....SORTING....&#xA;&#xA;&#xA;1. BUBBLE SORT&#xA;2. SELECTION SORT&#xA;3. INSERTION SORT&#xA;4. QUICK SORT&#xA;5. RADIX SORT&#xA;6. MERGE SORT&#xA;7. TREE SORT&#xA;8. HEAP SORT&#xA;9. Exit&#xA;Enter your choice: 8&#xA;&#xA;Sorted elements are:&#xA;3 4 12 56 99&#xA;&#xA;&#xA;.....SORTING....&#xA;&#xA;&#xA;1. BUBBLE SORT&#xA;2. SELECTION SORT&#xA;3. INSERTION SORT&#xA;4. QUICK SORT&#xA;5. RADIX SORT&#xA;6. MERGE SORT&#xA;7. TREE SORT&#xA;8. HEAP SORT&#xA;9. Exit&#xA;Enter your choice: 9&#xA;&#xA;.....Thanking You.....&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-implement-various-searching-techniques&#34;&gt;&#xA;  Write a C++ program to implement various Searching techniques&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-implement-various-searching-techniques&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;quot;iostream.h&amp;quot;&#xA;#include&amp;quot;conio.h&amp;quot;&#xA;#include&amp;quot;process.h&amp;quot;&#xA;&#xA;void sequential(int a[], int n, int item) {&#xA;    int flag = 0, i;&#xA;    for (i = 0; i &amp;lt; n; i++) {&#xA;        if (a[i] == item) {&#xA;            cout&amp;lt;&amp;lt;&amp;quot;\n Item is found at position &amp;quot; &amp;lt;&amp;lt;i + 1;&#xA;            flag = 1;&#xA;            break;&#xA;        }&#xA;    }&#xA;    if (flag == 0) cout&amp;lt;&amp;lt;&amp;quot;\n Item not found &amp;quot;;&#xA;&#xA;}&#xA;&#xA;void binary(int a[], int n, int item) {&#xA;    int loc = -1, b = 0, e = n - 1, mid = -1;&#xA;    while ((b &amp;lt;= e) &amp;amp;&amp;amp; (a[mid] != item)) {&#xA;        mid = (b + e) / 2;&#xA;        if (item == a[mid]) {&#xA;            cout&amp;lt;&amp;lt;&amp;quot;\n Item is found at position &amp;quot; &amp;lt;&amp;lt;mid + 1;&#xA;            loc = mid;&#xA;        } else if (item &amp;lt; a[mid])&#xA;            e = mid - 1;&#xA;        else&#xA;            b = mid + 1;&#xA;    }&#xA;    if (loc == -1) cout&amp;lt;&amp;lt;&amp;quot;\n Item not found &amp;quot;;&#xA;&#xA;}&#xA;&#xA;&#xA;void main() {&#xA;    int num[50], n, item, ch, flag = 1, i;&#xA;    clrscr();&#xA;    do {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n\n .... SEARCHING .... \n\n\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n1.Sequential Search\n2.Binary Search\n3.Enter another list\n4.Exit&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\t Enter your choice: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;&#xA;        if (ch == 3) flag = 1;&#xA;&#xA;        if (ch &amp;gt;= 1 &amp;amp;&amp;amp; ch &amp;lt;= 3 &amp;amp;&amp;amp; flag == 1) {&#xA;            cout&amp;lt;&amp;lt;&amp;quot;\n Enter the limit: &amp;quot;;&#xA;            cin&amp;gt;&amp;gt;n;&#xA;            cout&amp;lt;&amp;lt;&amp;quot;\n Enter the elements: &amp;quot;;&#xA;            for (i = 0; i &amp;lt; n; i++)&#xA;                cin&amp;gt;&amp;gt;num[i];&#xA;        }&#xA;        if (ch &amp;gt;= 1 &amp;amp;&amp;amp; ch &amp;lt;= 2) {&#xA;            cout&amp;lt;&amp;lt;&amp;quot;\n Enter the element to be searched: &amp;quot;;&#xA;            cin&amp;gt;&amp;gt;item;&#xA;        }&#xA;&#xA;        switch (ch) {&#xA;            case 1:&#xA;                sequential(num, n, item);&#xA;                break;&#xA;            case 2:&#xA;                binary(num, n, item);&#xA;                break;&#xA;            case 3:&#xA;                break;&#xA;            case 4:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\t.... Thanking You .... &amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            default:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\t Invalid key-in&amp;quot;;&#xA;        }&#xA;        flag = 0;&#xA;&#xA;    } while (1);&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-28&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-28&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;....SEARCHING....&#xA;&#xA;1. Sequential Search&#xA;2. Binary Search&#xA;3. Enter another list&#xA;4. Exit&#xA;Enter your choice: 1&#xA;&#xA;Enter the limit: 5&#xA;&#xA;Enter the elements: 12 56 10 45 96&#xA;&#xA;Enter the element to be searched: 10&#xA;&#xA;Item is found at position 3&#xA;&#xA;&#xA;....SEARCHING....&#xA;&#xA;&#xA;1. Sequential Search&#xA;2. Binary Search&#xA;3. Enter another list&#xA;4. Exit&#xA;Enter your choice: 3&#xA;&#xA;Enter the limit: 5&#xA;&#xA;Enter the elements: 10 20 30 40 50&#xA;&#xA;&#xA;....SEARCHING....&#xA;&#xA;1. Sequential Search&#xA;2. Binary Search&#xA;3. Enter another list&#xA;4. Exit&#xA;&#xA;Enter your choice: 2&#xA;&#xA;Enter the element to be searched: 40&#xA;&#xA;Item is found at position 4&#xA;&#xA;&#xA;....SEARCHING....&#xA;&#xA;1. Sequential Search&#xA;2. Binary Search&#xA;3. Enter another list&#xA;4. Exit&#xA;&#xA;Enter your choice: 4&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
  </channel>
</rss>
