<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C on The Insane Techie</title>
    <link>https://dhanoopbhaskar.github.io/categories/c/</link>
    <description>Recent content in C on The Insane Techie</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 14 Feb 2016 01:23:00 +0530</lastBuildDate>
    <atom:link href="https://dhanoopbhaskar.github.io/categories/c/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>DNS Lookup - Implementation in C</title>
      <link>https://dhanoopbhaskar.github.io/posts/2016-02-14-dns-lookup-implementation-in-c/</link>
      <pubDate>Sun, 14 Feb 2016 01:23:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2016-02-14-dns-lookup-implementation-in-c/</guid>
      <description>&lt;p&gt;Read about DNS&#xA;&lt;a href=&#34;https://en.wikipedia.org/wiki/Domain_Name_System&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&amp;hellip;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;DNS Lookup - Implementation in C&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;/**dnsclient.c**/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;stdio.h&amp;#34;  &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;stdlib.h&amp;#34;  &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;sys/types.h&amp;#34;  &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;sys/socket.h&amp;#34;  &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;string.h&amp;#34;  &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;netinet/in.h&amp;#34;  &lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;netdb.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;arpa/inet.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#define BUF_SIZE 512&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#define SERVER &amp;#34;8.8.8.8&amp;#34;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#define PORT 53&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#define WIDTH 16&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;createSocket&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;createRequest&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; url);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hexdump&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;desc, &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;addr, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; len);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lookUp&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; query {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt; length;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; url;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; request[BUF_SIZE];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt; reqType;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; query dnsQuery &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    .length &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    .url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    .reqType &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    .request &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color:#ae81ff&#34;&gt;0xDB&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x42&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt; }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                };&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt; argv) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; url;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (argc &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;fprintf&lt;/span&gt;(stderr,&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;usage: %s hostnameToResolve&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; argv[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;createRequest&lt;/span&gt;(url);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;lookUp&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;createSocket&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sockfd;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        sockfd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;socket&lt;/span&gt;(AF_INET, SOCK_DGRAM, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (sockfd &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error creating socket!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//printf(&amp;#34;Socket created...\n&amp;#34;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; sockfd;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;createRequest&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; url) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; word;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Asking DNS server %s about %s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, SERVER, url);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dnsQuery.url &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strdup&lt;/span&gt;(url);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dnsQuery.reqType &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        word &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strtok&lt;/span&gt;(url, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (word) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;parsing hostname: &lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; is %d characters&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, word, &lt;span style=&#34;color:#a6e22e&#34;&gt;strlen&lt;/span&gt;(word));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            dnsQuery.request[dnsQuery.length&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strlen&lt;/span&gt;(word);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strlen&lt;/span&gt;(word); i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                dnsQuery.request[dnsQuery.length&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; word[i];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            word &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;strtok&lt;/span&gt;(NULL, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dnsQuery.request[dnsQuery.length&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// End of the host name&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        dnsQuery.request[dnsQuery.length&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// 0x0001 - Query is a Type A query (host address)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        dnsQuery.request[dnsQuery.length&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dnsQuery.reqType;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dnsQuery.request[dnsQuery.length&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x00&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// 0x0001 - Query is class IN (Internet address)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        dnsQuery.request[dnsQuery.length&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// http://stackoverflow.com/questions/7775991/how-to-get-hexdump-of-a-structure-data&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hexdump&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;desc, &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;addr, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; len) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buff[&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;pc &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; addr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Output description if given.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (desc &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; NULL)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, desc);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Process every byte in the data.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// Multiple of 16 means new line (with line offset).&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;// Just don&amp;#39;t print ASCII for the zeroth line.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  %s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, buff);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#75715e&#34;&gt;// Output the offset.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  %04x &amp;#34;&lt;/span&gt;, i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// Now the hex code for the specific character.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; %02x&amp;#34;&lt;/span&gt;, pc[i]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// And store a printable ASCII character for later.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((pc[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x20&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; (pc[i] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x7e&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                buff[i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                buff[i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pc[i];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            buff[(i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// Pad out last line if not exactly 16 characters.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; ((i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;   &amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;// And print the final ASCII bit.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  %s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, buff);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;lookUp&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr_in addr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; socket;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ret, rcode, size, i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; ip &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, dom &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; length;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buffer[BUF_SIZE];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; tempBuf[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt; QDCOUNT; &lt;span style=&#34;color:#75715e&#34;&gt;//No. of items in Question Section&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt; ANCOUNT; &lt;span style=&#34;color:#75715e&#34;&gt;//No. of items in Answer Section&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt; NSCOUNT; &lt;span style=&#34;color:#75715e&#34;&gt;//No. of items in Authority Section&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt; ARCOUNT; &lt;span style=&#34;color:#75715e&#34;&gt;//No. of items in Additional Section&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt; QCLASS; &lt;span style=&#34;color:#75715e&#34;&gt;//Specifies the class of the query&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt; ATYPE; &lt;span style=&#34;color:#75715e&#34;&gt;//Specifies the meaning of the data in the RDATA field&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt; ACLASS; &lt;span style=&#34;color:#75715e&#34;&gt;//Specifies the class of the data in the RDATA field&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt; TTL; &lt;span style=&#34;color:#75715e&#34;&gt;//The number of seconds the results can be cached&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt; RDLENGTH; &lt;span style=&#34;color:#75715e&#34;&gt;//The length of the RDATA field&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt; MSGID;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        socket &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;createSocket&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;memset&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;addr, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(addr));  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        addr.sin_family &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AF_INET;  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        addr.sin_addr.s_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;inet_addr&lt;/span&gt;(SERVER);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        addr.sin_port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;htons&lt;/span&gt;(PORT);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(addr);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;hexdump&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sending packet&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;dnsQuery.request, dnsQuery.length);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sendto&lt;/span&gt;(socket, dnsQuery.request, dnsQuery.length, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, (&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;addr, size);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ret &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error Sending Request&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//printf(&amp;#34;Sent\n&amp;#34;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;memset&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;buffer, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, BUF_SIZE);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;recvfrom&lt;/span&gt;(socket, buffer, BUF_SIZE, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, (&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;addr, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;size);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ret &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error Receiving Response&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }   &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;hexdump&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;received packet&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;buffer, ret);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;close&lt;/span&gt;(socket);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        rcode &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (buffer[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x0F&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//tempBuf[0] = buffer[4];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//tempBuf[1] = buffer[5];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//tempBuf[2] = &amp;#39;\0&amp;#39;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//printf(&amp;#34;%0x %0x %0x %0x\n&amp;#34;, buffer[4], buffer[5], tempBuf[0], tempBuf[1]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;//QDCOUNT = (uint16_t) strtol(tempBuf, NULL, 16);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        QDCOUNT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt;)  buffer[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; buffer[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;entries in question section: %u&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, QDCOUNT);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ANCOUNT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt;)  buffer[&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; buffer[&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;records in answer section: %u&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, ANCOUNT);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        NSCOUNT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt;)  buffer[&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; buffer[&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name server resource record count: %u&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, NSCOUNT);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ARCOUNT &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt;)  buffer[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; buffer[&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;additional records count: %u&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, ARCOUNT);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;query type: %u&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, dnsQuery.reqType);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        QCLASS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt;) dnsQuery.request[dnsQuery.length &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; dnsQuery.request[dnsQuery.length &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;query class: %u&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, QCLASS);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        length &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; dnsQuery.length &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;    &lt;span style=&#34;color:#75715e&#34;&gt;// to skip 0xc00c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        ATYPE &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt;) buffer[length &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; buffer[length &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;answer type: %u&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, ATYPE);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ACLASS &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt;) buffer[length &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; buffer[length &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;answer class: %u&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, ACLASS);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        TTL &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;uint32_t&lt;/span&gt;) buffer[length &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x1000000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; buffer[length &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x10000&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; buffer[length &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; buffer[length &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;seconds to cache: %u&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, TTL);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        RDLENGTH &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt;) buffer[length &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; buffer[length &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bytes in answer: %u&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, RDLENGTH);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        MSGID &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;uint16_t&lt;/span&gt;) buffer[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; buffer[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;answer msg id: %u&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, MSGID);   &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (rcode &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nameserver %s returned SERVFAIL:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, SERVER);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  the name server was unable to process this query due to a&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;  problem with the name server.&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (rcode &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nameserver %s returned NXDOMAIN for %s:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, SERVER, dnsQuery.url);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  the domain name referenced in the query does not exist&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;/* search for and print IPv4 addresses */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (dnsQuery.reqType &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DNS server&amp;#39;s answer is: (type#=%u):&amp;#34;&lt;/span&gt;, ATYPE);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;//printf(&amp;#34;IPv4 address(es) for %s:\n&amp;#34;, dnsQuery.url);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; ; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; ret ; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (buffer[i] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0xC0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; buffer[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0x01&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    ip&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* ! += buf[i+1]; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; %u.%u.%u.%u&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, buffer[i], buffer[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;], buffer[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;], buffer[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;ip) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;  No IPv4 address found in the DNS response!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Sum of Prime Numbers Between 1000000 and 1000100 Using Sieve of Eratosthenes</title>
      <link>https://dhanoopbhaskar.github.io/posts/2014-12-30-sum-of-prime-numbers-between-1000000-and-1000100-using-sieve-of-eratosthenes/</link>
      <pubDate>Tue, 30 Dec 2014 09:36:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2014-12-30-sum-of-prime-numbers-between-1000000-and-1000100-using-sieve-of-eratosthenes/</guid>
      <description>&lt;p&gt;For more information on &lt;code&gt;Sieve of Eratosthenes&lt;/code&gt; please refer &lt;a href=&#34;http://en.wikipedia.org/wiki/Sieve%5c_of%5c_Eratosthenes&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wikipedia page&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;stdio.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;string.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;stdlib.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;assert.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;long&lt;/span&gt; biggerint;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;findPrimeNumbers&lt;/span&gt;(biggerint start, biggerint end) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; primeList &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;malloc&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;unsigned&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (end &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     biggerint sum &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;assert&lt;/span&gt;(primeList &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; NULL);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;/* set prime status */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; end &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; ; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(primeList &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; i) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     primeList[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     primeList[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;/* mark all the non-prime numbers */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     biggerint currentFactor &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     biggerint lastSquare &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     biggerint currentSquare &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (currentFactor &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; currentFactor &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; end) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;/* mark all the multiples of the current factor */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      biggerint mark &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; currentFactor &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; currentFactor;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (mark &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; end) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(primeList &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; mark) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       mark &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; currentFactor;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;/* set currentFactor to next prime number */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      currentFactor&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(primeList&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;currentFactor) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) currentFactor&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;assert&lt;/span&gt;(currentFactor &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; end);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; start; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; end ; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;(primeList &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; i)) sum &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;free&lt;/span&gt;(primeList);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%llu&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, sum);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; argc, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;argv[]) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     biggerint start &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000000&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     biggerint end &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000100&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;findPrimeNumbers&lt;/span&gt;(start, end);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>A simple HTTP client and a server in C</title>
      <link>https://dhanoopbhaskar.github.io/posts/2014-02-13-a-simple-http-client-and-a-server-in-c/</link>
      <pubDate>Thu, 13 Feb 2014 23:06:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2014-02-13-a-simple-http-client-and-a-server-in-c/</guid>
      <description>&lt;p&gt;&lt;em&gt;The HTTP server sends the files requested by the client, if it is available at the server. The HTTP client uses GET method for requesting files from the server. Only .html, .txt and .pdf files are implemented. On receiving the file, the client program opens it using firefox or gedit or acrobat reader, as per the file type. Note that the given programs were done in Linux (Debian) environment.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;httpserver.c&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>A simple chat program in C (TCP)</title>
      <link>https://dhanoopbhaskar.github.io/posts/2014-01-22-a-simple-chat-program-in-c-tcp/</link>
      <pubDate>Wed, 22 Jan 2014 20:26:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2014-01-22-a-simple-chat-program-in-c-tcp/</guid>
      <description>&lt;p&gt;&lt;strong&gt;tcpserver.c&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;stdio.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;stdlib.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;sys/types.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;sys/socket.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;string.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;netinet/in.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;pthread.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#define PORT 4444&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#define BUF_SIZE 2000&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#define CLADDR_LEN 100&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;receiveMessage&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; socket) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sockfd, ret;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buffer[BUF_SIZE]; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     sockfd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;) socket;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;memset&lt;/span&gt;(buffer, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, BUF_SIZE);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (;;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;recvfrom&lt;/span&gt;(sockfd, buffer, BUF_SIZE, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, NULL, NULL);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ret &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error receiving data!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);    &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      } &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;client: &amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#a6e22e&#34;&gt;fputs&lt;/span&gt;(buffer, stdout);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#75715e&#34;&gt;//printf(&amp;#34;\n&amp;#34;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      }  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr_in addr, cl_addr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sockfd, len, ret, newsockfd;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buffer[BUF_SIZE];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;pid_t&lt;/span&gt; childpid;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; clientAddr[CLADDR_LEN];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;pthread_t&lt;/span&gt; rThread;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     sockfd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;socket&lt;/span&gt;(AF_INET, SOCK_STREAM, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (sockfd &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error creating socket!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Socket created...&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;memset&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;addr, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(addr));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     addr.sin_family &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AF_INET;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     addr.sin_addr.s_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; INADDR_ANY;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     addr.sin_port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PORT;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bind&lt;/span&gt;(sockfd, (&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;addr, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(addr));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ret &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error binding!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Binding done...&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Waiting for a connection...&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;listen&lt;/span&gt;(sockfd, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(cl_addr);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     newsockfd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;accept&lt;/span&gt;(sockfd, (&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;cl_addr, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;len);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (newsockfd &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error accepting connection!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     } &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;inet_ntop&lt;/span&gt;(AF_INET, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;(cl_addr.sin_addr), clientAddr, CLADDR_LEN);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Connection accepted from %s...&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, clientAddr); &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;memset&lt;/span&gt;(buffer, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, BUF_SIZE);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Enter your messages one by one and press return key!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#75715e&#34;&gt;//creating a new thread for receiving messages from the client&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;     ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pthread_create&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;rThread, NULL, receiveMessage, (&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) newsockfd);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ret) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;ERROR: Return Code from pthread_create() is %d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, ret);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;fgets&lt;/span&gt;(buffer, BUF_SIZE, stdin) &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; NULL) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sendto&lt;/span&gt;(newsockfd, buffer, BUF_SIZE, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, (&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;cl_addr, len);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ret &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error sending data!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }   &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;close&lt;/span&gt;(newsockfd);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;close&lt;/span&gt;(sockfd);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;pthread_exit&lt;/span&gt;(NULL);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;p&gt;&lt;strong&gt;tcpclient.c&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>TCP in C (one server and multiple clients) </title>
      <link>https://dhanoopbhaskar.github.io/posts/2014-01-16-tcp-in-c-one-server-and-multiple-clients/</link>
      <pubDate>Thu, 16 Jan 2014 21:12:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2014-01-16-tcp-in-c-one-server-and-multiple-clients/</guid>
      <description>&lt;p&gt;&lt;strong&gt;tcpserver.c&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;stdio.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;stdlib.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;sys/types.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;sys/socket.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;string.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;netinet/in.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#define PORT 4444&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#define BUF_SIZE 2000&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#define CLADDR_LEN 100&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr_in addr, cl_addr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sockfd, len, ret, newsockfd;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buffer[BUF_SIZE];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;pid_t&lt;/span&gt; childpid;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; clientAddr[CLADDR_LEN];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     sockfd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;socket&lt;/span&gt;(AF_INET, SOCK_STREAM, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (sockfd &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error creating socket!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Socket created...&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;memset&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;addr, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(addr));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     addr.sin_family &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AF_INET;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     addr.sin_addr.s_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; INADDR_ANY;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     addr.sin_port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PORT;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bind&lt;/span&gt;(sockfd, (&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;addr, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(addr));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ret &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error binding!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Binding done...&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Waiting for a connection...&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;listen&lt;/span&gt;(sockfd, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (;;) { &lt;span style=&#34;color:#75715e&#34;&gt;//infinite loop&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;      len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(cl_addr);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      newsockfd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;accept&lt;/span&gt;(sockfd, (&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;cl_addr, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;len);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (newsockfd &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error accepting connection!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Connection accepted...&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;inet_ntop&lt;/span&gt;(AF_INET, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;(cl_addr.sin_addr), clientAddr, CLADDR_LEN);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; ((childpid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fork&lt;/span&gt;()) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) { &lt;span style=&#34;color:#75715e&#34;&gt;//creating a child process&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#a6e22e&#34;&gt;close&lt;/span&gt;(sockfd); &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//stop listening for new connections by the main process. &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//the child will continue to listen. &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//the main process now handles the connected client.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (;;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;memset&lt;/span&gt;(buffer, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, BUF_SIZE);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;recvfrom&lt;/span&gt;(newsockfd, buffer, BUF_SIZE, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, (&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;cl_addr, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;len);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(ret &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error receiving data!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Received data from %s: %s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, clientAddr, buffer); &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sendto&lt;/span&gt;(newsockfd, buffer, BUF_SIZE, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, (&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;cl_addr, len);   &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ret &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error sending data!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sent data to %s: %s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, clientAddr, buffer);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;close&lt;/span&gt;(newsockfd);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;p&gt;&lt;strong&gt;tcpclient.c&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Socket Programming in C, TCP over a network (2 systems)</title>
      <link>https://dhanoopbhaskar.github.io/posts/2014-01-16-socket-programming-in-c-tcp-over-a-network-2-systems/</link>
      <pubDate>Thu, 16 Jan 2014 20:53:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2014-01-16-socket-programming-in-c-tcp-over-a-network-2-systems/</guid>
      <description>&lt;p&gt;&lt;strong&gt;tcpserver.c&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;stdio.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;stdlib.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;sys/types.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;sys/socket.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;string.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;netinet/in.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#define PORT 4444&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#define BUF_SIZE 2000&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr_in addr, cl_addr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sockfd, len, ret, newsockfd;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buffer[BUF_SIZE];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     sockfd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;socket&lt;/span&gt;(AF_INET, SOCK_STREAM, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (sockfd &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error creating socket!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Socket created...&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;memset&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;addr, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(addr));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     addr.sin_family &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AF_INET;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     addr.sin_addr.s_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; INADDR_ANY;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     addr.sin_port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PORT;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bind&lt;/span&gt;(sockfd, (&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;addr, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(addr));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ret &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error binding!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Binding done...&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Waiting for a connection...&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;listen&lt;/span&gt;(sockfd, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(cl_addr);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     newsockfd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;accept&lt;/span&gt;(sockfd, (&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;cl_addr, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;len);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (newsockfd &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error accepting connection!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Connection accepted...&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;); &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;memset&lt;/span&gt;(buffer, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, BUF_SIZE);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;recv&lt;/span&gt;(newsockfd, buffer, BUF_SIZE, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(ret &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error receiving data!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Received data: %s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, buffer); &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(newsockfd, buffer, &lt;span style=&#34;color:#a6e22e&#34;&gt;strlen&lt;/span&gt;(buffer), &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ret &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error sending data!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sent data: %s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, buffer);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;close&lt;/span&gt;(sockfd);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;close&lt;/span&gt;(newsockfd);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;p&gt;&lt;strong&gt;tcpclient.c&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Socket Programming In C (TCP)</title>
      <link>https://dhanoopbhaskar.github.io/posts/2014-01-05-socket-programming-in-c-tcp/</link>
      <pubDate>Sun, 05 Jan 2014 01:03:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2014-01-05-socket-programming-in-c-tcp/</guid>
      <description>&lt;p&gt;&lt;strong&gt;tcpserver.c&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;stdio.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;stdlib.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;sys/types.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;sys/socket.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;string.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;#34;netinet/in.h&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#define PORT 4444&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;#define BUF_SIZE 20&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr_in addr, cl_addr;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; sockfd, len, ret, newsockfd;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; buffer[BUF_SIZE];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     sockfd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;socket&lt;/span&gt;(AF_INET, SOCK_STREAM, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (sockfd &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error creating socket!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Socket created...&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;memset&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;addr, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(addr));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     addr.sin_family &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AF_INET;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     addr.sin_addr.s_addr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; INADDR_ANY;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     addr.sin_port &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; PORT;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bind&lt;/span&gt;(sockfd, (&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;addr, &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(addr));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (ret &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error binding!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Binding done...&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Waiting for a connection...&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;listen&lt;/span&gt;(sockfd, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;sizeof&lt;/span&gt;(cl_addr);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     newsockfd &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;accept&lt;/span&gt;(sockfd, (&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; sockaddr &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;cl_addr, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;len);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (newsockfd &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error accepting connection!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Connection accepted...&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;); &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;memset&lt;/span&gt;(buffer, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, BUF_SIZE);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     ret &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;recv&lt;/span&gt;(newsockfd, buffer, BUF_SIZE, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(ret &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Error receiving data!&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;);  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;exit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Received data: %s&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, buffer); &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;p&gt;&lt;strong&gt;tcpclient.c&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using Turbo C&#43;&#43; in Windows 7 along with graphics support</title>
      <link>https://dhanoopbhaskar.github.io/posts/2010-12-12-using-turbo-c-in-windows-7-along-with-graphics-support/</link>
      <pubDate>Sun, 12 Dec 2010 13:36:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2010-12-12-using-turbo-c-in-windows-7-along-with-graphics-support/</guid>
      <description>&lt;h3 id=&#34;dosbox&#34;&gt;&#xA;  DOSBox&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#dosbox&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Use dosbox to mount and run TC.EXE&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://space.dl.sourceforge.net/project/dosbox/dosbox/0.74/DOSBox0.74-win32-installer.exe&#34;  class=&#34;external-link&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Download DOSBox here&amp;hellip;&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Mounting&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;Z:\&amp;gt;MOUNT C &amp;quot;PATH OF BIN&amp;quot;&#xA;Z:\&amp;gt;C:&#xA;C:\&amp;gt;TC &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;[TURBO C++ IDE opens]&lt;/p&gt;&#xA;&lt;p&gt;NB:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;You can include the codes for mounting and running in -&#xA;&lt;code&gt;C:\\Users\\username\\AppData\\Local\\DOSBox\\dosbox-0.74.conf&lt;/code&gt; - file at its end as autoexecute commands on startup; so that it will be executed automatically on every startup of DOSBox.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;To run in fullscreen mode edit the .conf file mentioned above and&#xA;change &amp;ldquo;fullscreen=false&amp;rdquo; to &amp;ldquo;fullscreen=true&amp;rdquo;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Simulate a car in C</title>
      <link>https://dhanoopbhaskar.github.io/posts/2010-12-12-simulate-a-car-in-c/</link>
      <pubDate>Sun, 12 Dec 2010 12:52:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2010-12-12-simulate-a-car-in-c/</guid>
      <description>&lt;pre&gt;&lt;code&gt;/*&#xA;* Control keys are:&#xA;* f-&amp;gt; forward&#xA;* b-&amp;gt; backward&#xA;* 0-&amp;gt; brake&#xA;* 1,2,3,4-&amp;gt; gears&#xA;*/&#xA;&#xA;#include&amp;lt;stdio.h&amp;gt;&#xA;#include&amp;lt;conio.h&amp;gt;&#xA;#include&amp;lt;graphics.h&amp;gt;&#xA;#include&amp;lt;math.h&amp;gt;&#xA;void main() {&#xA;    int gdriver = DETECT, gmode;&#xA;    int xc = 0, yc = 285, r = 15, a = 0, i, x1, y1, x2, y2, mode = 1, dtime = 75;&#xA;    int x3, x4, y3, y4;&#xA;    int kb = &#39;f&#39;;&#xA;    initgraph( &amp;amp; gdriver, &amp;amp; gmode, &amp;quot;c:\\tc\\bgi&amp;quot;);&#xA;    cleardevice();&#xA;    while (1) {&#xA;        if (kbhit()) {&#xA;            kb = getch();&#xA;            if (kb == &#39;q&#39;) {&#xA;                cleardevice();&#xA;                printf(&amp;quot;\n You are about to quit...press any key...&amp;quot;);&#xA;                getch();&#xA;                exit(0);&#xA;            }&#xA;            if (kb == &#39;b&#39;) {&#xA;                mode = 0;&#xA;            }&#xA;            if (kb == &#39;f&#39;) {&#xA;                mode = 1;&#xA;            }&#xA;            if (kb == &#39;1&#39;) {&#xA;                dtime = 80;&#xA;            }&#xA;            if (kb == &#39;2&#39;) {&#xA;                dtime = 60;&#xA;            }&#xA;            if (kb == &#39;3&#39;) {&#xA;                dtime = 40;&#xA;            }&#xA;            if (kb == &#39;4&#39;) {&#xA;                dtime = 20;&#xA;            }&#xA;            if (kb == &#39;0&#39;) {&#xA;                mode = 2;&#xA;                continue;&#xA;            }&#xA;        }&#xA;&#xA;        if (mode != 2) {&#xA;            cleardevice();&#xA;        }&#xA;&#xA;        line(0, 300, 640, 300);&#xA;&#xA;        if (mode == 0) //reverse&#xA;        {&#xA;            setcolor(9);&#xA;            /*wheels*/&#xA;            circle(xc, yc, r);&#xA;            circle(xc + 100, yc, r);&#xA;            /*body*/&#xA;            line(xc - 35, yc, xc - 15, yc);&#xA;            line(xc + 15, yc, xc + 85, yc);&#xA;            line(xc + 115, yc, xc + 135, yc);&#xA;            line(xc - 35, yc, xc - 35, yc - 25);&#xA;            line(xc + 135, yc, xc + 135, yc - 25);&#xA;&#xA;            line(xc - 35, yc - 25, xc, yc - 30);&#xA;            line(xc + 135, yc - 25, xc + 100, yc - 30);&#xA;&#xA;            line(xc, yc - 30, xc + 15, yc - 50);&#xA;            line(xc + 100, yc - 30, xc + 85, yc - 50);&#xA;&#xA;            line(xc + 15, yc - 50, xc + 85, yc - 50);&#xA;            /*glasses*/&#xA;            line(xc + 6, yc - 30, xc + 18, yc - 47);&#xA;            line(xc + 18, yc - 47, xc + 18, yc - 30);&#xA;            line(xc + 6, yc - 30, xc + 18, yc - 30);&#xA;&#xA;            line(xc + 94, yc - 30, xc + 82, yc - 47);&#xA;            line(xc + 82, yc - 47, xc + 82, yc - 30);&#xA;            line(xc + 94, yc - 30, xc + 82, yc - 30);&#xA;&#xA;            line(xc + 21, yc - 47, xc + 21, yc - 30);&#xA;            line(xc + 21, yc - 47, xc + 48, yc - 47);&#xA;            line(xc + 21, yc - 30, xc + 48, yc - 30);&#xA;            line(xc + 48, yc - 30, xc + 48, yc - 47);&#xA;&#xA;            line(xc + 79, yc - 47, xc + 79, yc - 30);&#xA;            line(xc + 79, yc - 47, xc + 52, yc - 47);&#xA;            line(xc + 79, yc - 30, xc + 52, yc - 30);&#xA;            line(xc + 52, yc - 30, xc + 52, yc - 47);&#xA;&#xA;            for (i = 0; i &amp;lt; 4; i++) {&#xA;                x1 = xc + (r * cos(a));&#xA;                y1 = yc + (r * sin(a));&#xA;                x2 = xc - (r * cos(a));&#xA;                y2 = yc - (r * sin(a));&#xA;                x3 = (xc + 100) + (r * cos(a));&#xA;                y3 = yc + (r * sin(a));&#xA;                x4 = (xc + 100) - (r * cos(a));&#xA;                y4 = yc - (r * sin(a));&#xA;                line(x1, y1, x2, y2);&#xA;                line(x3, y3, x4, y4);&#xA;                a += 90;&#xA;&#xA;            }&#xA;            xc -= 1;&#xA;            delay(dtime);&#xA;        }&#xA;&#xA;        /*forward*/&#xA;        if (mode == 1) {&#xA;            setcolor(9);&#xA;            /*wheels*/&#xA;            circle(xc, yc, r);&#xA;            circle(xc + 100, yc, r);&#xA;            /*body*/&#xA;            line(xc - 35, yc, xc - 15, yc);&#xA;            line(xc + 15, yc, xc + 85, yc);&#xA;            line(xc + 115, yc, xc + 135, yc);&#xA;            line(xc - 35, yc, xc - 35, yc - 25);&#xA;            line(xc + 135, yc, xc + 135, yc - 25);&#xA;&#xA;            line(xc - 35, yc - 25, xc, yc - 30);&#xA;            line(xc + 135, yc - 25, xc + 100, yc - 30);&#xA;&#xA;            line(xc, yc - 30, xc + 15, yc - 50);&#xA;            line(xc + 100, yc - 30, xc + 85, yc - 50);&#xA;&#xA;            line(xc + 15, yc - 50, xc + 85, yc - 50);&#xA;            /*glasses*/&#xA;            line(xc + 6, yc - 30, xc + 18, yc - 47);&#xA;            line(xc + 18, yc - 47, xc + 18, yc - 30);&#xA;            line(xc + 6, yc - 30, xc + 18, yc - 30);&#xA;&#xA;            line(xc + 94, yc - 30, xc + 82, yc - 47);&#xA;            line(xc + 82, yc - 47, xc + 82, yc - 30);&#xA;            line(xc + 94, yc - 30, xc + 82, yc - 30);&#xA;&#xA;            line(xc + 21, yc - 47, xc + 21, yc - 30);&#xA;            line(xc + 21, yc - 47, xc + 48, yc - 47);&#xA;            line(xc + 21, yc - 30, xc + 48, yc - 30);&#xA;            line(xc + 48, yc - 30, xc + 48, yc - 47);&#xA;&#xA;&#xA;            line(xc + 79, yc - 47, xc + 79, yc - 30);&#xA;            line(xc + 79, yc - 47, xc + 52, yc - 47);&#xA;            line(xc + 79, yc - 30, xc + 52, yc - 30);&#xA;            line(xc + 52, yc - 30, xc + 52, yc - 47);&#xA;&#xA;            for (i = 0; i &amp;lt; 4; i++) {&#xA;                x1 = xc + (r * cos(-a));&#xA;                y1 = yc + (r * sin(-a));&#xA;                x2 = xc - (r * cos(-a));&#xA;                y2 = yc - (r * sin(-a));&#xA;                x3 = (xc + 100) + (r * cos(-a));&#xA;                y3 = yc + (r * sin(-a));&#xA;                x4 = (xc + 100) - (r * cos(-a));&#xA;                y4 = yc - (r * sin(-a));&#xA;                line(x1, y1, x2, y2);&#xA;                line(x3, y3, x4, y4);&#xA;                a += 90;&#xA;            }&#xA;            xc += 1;&#xA;            delay(dtime);&#xA;&#xA;        }&#xA;&#xA;    }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Catching a fish in C</title>
      <link>https://dhanoopbhaskar.github.io/posts/2010-11-18-catching-a-fish-in-c/</link>
      <pubDate>Thu, 18 Nov 2010 18:49:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2010-11-18-catching-a-fish-in-c/</guid>
      <description>&lt;pre&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt; &#xA;#include&amp;lt;conio.h&amp;gt; &#xA;#include&amp;lt;graphics.h&amp;gt;&#xA;void fish();&#xA;void fishcatch();&#xA;int fishx = 0, fishy = 460, fishang = 0, tempx, tempy, fishx2 = 350, fishy2 = 400;&#xA;void main() {&#xA;    int gdriver = DETECT, gmode, errorcode;&#xA;    int x, y, ch, yincr = 0;&#xA;    initgraph( &amp;amp; gdriver, &amp;amp; gmode, &amp;quot;&amp;quot;);&#xA;    errorcode = graphresult();&#xA;    if (errorcode != grOk) {&#xA;        printf(&amp;quot;Graphics error: %s\n&amp;quot;, grapherrormsg(errorcode));&#xA;        printf(&amp;quot;Press any key to halt:&amp;quot;);&#xA;        getch();&#xA;        exit(1);&#xA;    }&#xA;    x = 350;&#xA;    y = 240;&#xA;&#xA;    while (!kbhit()) {&#xA;        rectangle(-1, 240, 641, 481);&#xA;        setfillstyle(1, BLUE);&#xA;        floodfill(1, 241, 15);&#xA;        line(x, y, x + 100, y);&#xA;        line(x + 100, y, x + 130, y - 20);&#xA;        line(x, y, x - 30, y - 20);&#xA;        line(x - 30, y - 20, x + 130, y - 20);&#xA;        setfillstyle(1, BROWN);&#xA;        floodfill(x + 1, y - 1, 15);&#xA;        arc(x + 50, y - 20, 0, 180, 15);&#xA;        setfillstyle(1, RED);&#xA;        floodfill(x + 50, y - 21, 15);&#xA;        circle(x + 50, y - 40, 6);&#xA;        setfillstyle(1, LIGHTGRAY);&#xA;        floodfill(x + 50, y - 41, 15);&#xA;        delay(50);&#xA;        cleardevice();&#xA;        if (x &amp;gt;= 300)&#xA;            x = x - 1;&#xA;        else if (y + yincr &amp;lt;= 400) {&#xA;            if (fishx &amp;lt; 330)&#xA;                yincr++;&#xA;        }&#xA;        line(x + 40, y, x + 50, y + yincr);&#xA;&#xA;        if (x &amp;lt;= 350) {&#xA;            fishx++;&#xA;            if (fishx &amp;gt;= 330) {&#xA;                if (yincr &amp;gt;= 0) {&#xA;                    fishcatch();&#xA;                    fishy2--;&#xA;                    yincr--;&#xA;                } else {&#xA;                    cleardevice();&#xA;                    printf(&amp;quot;Fish curry: Rs.15/-&amp;quot;);&#xA;                    getch();&#xA;                    exit(0);&#xA;                }&#xA;            } else {&#xA;                fish();&#xA;&#xA;                if (y + yincr &amp;gt;= 390)&#xA;                    fishy = fishy - 0.5;&#xA;&#xA;                if (fishy &amp;lt;= 400)&#xA;                    fishy = 400;&#xA;&#xA;                if (fishx &amp;gt;= 330)&#xA;                    fishx = 330;&#xA;            }&#xA;        }&#xA;&#xA;    }&#xA;&#xA;&#xA;    if (kbhit()) {&#xA;        //printf(&amp;quot;%c&amp;quot;,getch());&#xA;    }&#xA;    getch();&#xA;}&#xA;&#xA;&#xA;void fish() {&#xA;    line(fishx, fishy, fishx + 10, fishy - 5);&#xA;    line(fishx, fishy, fishx + 10, fishy + 5);&#xA;    line(fishx + 10, fishy - 5, fishx + 20, fishy);&#xA;    line(fishx + 20, fishy, fishx + 10, fishy + 5);&#xA;    line(fishx, fishy, fishx - 3, fishy - 3);&#xA;    line(fishx - 3, fishy - 3, fishx - 3, fishy + 3);&#xA;    line(fishx - 3, fishy + 3, fishx, fishy);&#xA;    setfillstyle(1, BROWN);&#xA;    floodfill(fishx + 2, fishy, 15);&#xA;    floodfill(fishx - 1, fishy, 15);&#xA;}&#xA;&#xA;void fishcatch() {&#xA;    line(fishx2, fishy2, fishx2 + 5, fishy2 + 10);&#xA;    line(fishx2, fishy2, fishx2 - 5, fishy2 + 10);&#xA;    line(fishx2 + 5, fishy2 + 10, fishx2, fishy2 + 20);&#xA;    line(fishx2 - 5, fishy2 + 10, fishx2, fishy2 + 20);&#xA;    line(fishx2, fishy2, fishx2 + 3, fishy2 + 23);&#xA;    line(fishx2, fishy2, fishx2 - 3, fishy2 + 23);&#xA;    line(fishx2 + 3, fishy2 + 23, fishx2 - 3, fishy2 + 23);&#xA;    setfillstyle(1, BROWN);&#xA;    floodfill(fishx2, fishy2 + 2, 15);&#xA;    floodfill(fishx2, fishy2 + 22, 15);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Sinking of Titanic</title>
      <link>https://dhanoopbhaskar.github.io/posts/2010-11-18-sinking-of-titanic/</link>
      <pubDate>Thu, 18 Nov 2010 18:47:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2010-11-18-sinking-of-titanic/</guid>
      <description>&lt;pre&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;&#xA;#include&amp;lt;conio.h&amp;gt; &#xA;#include&amp;lt;graphics.h&amp;gt;&#xA;void titanic(int, int);&#xA;void titanics(int, int);&#xA;void iceberg();&#xA;int poly[] = {&#xA;    0,&#xA;    300,&#xA;    640,&#xA;    300,&#xA;    640,&#xA;    480,&#xA;    0,&#xA;    480,&#xA;    0,&#xA;    300&#xA;};&#xA;int ix = 1, iy = 1;&#xA;void main() {&#xA;    int gdriver = DETECT, gmode, errorcode;&#xA;    int maxx, maxy;&#xA;    int xincr = 1, yincr = 1, i;&#xA;    int tempx = 400, tempy = 300;&#xA;    int sink = 0;&#xA;    initgraph( &amp;amp; gdriver, &amp;amp; gmode, &amp;quot;c:/tc/bgi&amp;quot;);&#xA;&#xA;    errorcode = graphresult();&#xA;    if (errorcode != grOk) {&#xA;        printf(&amp;quot;Graphics error: %s\n&amp;quot;, grapherrormsg(errorcode));&#xA;        printf(&amp;quot;Press any key to halt:&amp;quot;);&#xA;        getch();&#xA;        exit(1);&#xA;    }&#xA;&#xA;    while (1) {&#xA;        delay(30);&#xA;        cleardevice();&#xA;        iceberg();&#xA;&#xA;        if (sink == 1) {&#xA;            tempy += yincr;&#xA;        } else {&#xA;            tempx -= xincr;&#xA;        }&#xA;&#xA;        if (tempx &amp;lt;= 120) {&#xA;            sink = 1;&#xA;            titanics(tempx, tempy);&#xA;        } else {&#xA;            titanic(tempx, tempy);&#xA;        }&#xA;&#xA;        if (tempy &amp;gt;= 600)&#xA;            break;&#xA;    }&#xA;    getch();&#xA;}&#xA;&#xA;void titanic(int x, int y) {&#xA;    setcolor(15);&#xA;    line(x, y, x + 100, y);&#xA;    line(x, y, x - 20, y - 20);&#xA;    line(x - 20, y - 20, x + 120, y - 20);&#xA;    line(x + 120, y - 20, x + 100, y);&#xA;    rectangle(x + 10, y - 30, x + 90, y - 20);&#xA;    rectangle(x + 20, y - 40, x + 80, y - 30);&#xA;    rectangle(x + 60, y - 70, x + 70, y - 40);&#xA;}&#xA;&#xA;void titanics(int x, int y) {&#xA;    setcolor(15);&#xA;    line(x, y, x + 100, y - 10);&#xA;    line(x, y, x - 20, y - 30);&#xA;    line(x - 20, y - 20, x + 120, y - 30);&#xA;    line(x + 120, y - 20, x + 100, y - 10);&#xA;    rectangle(x + 10, y - 30, x + 90, y - 10);&#xA;    rectangle(x + 20, y - 40, x + 80, y - 10);&#xA;    rectangle(x + 60, y - 70, x + 70, y - 10);&#xA;}&#xA;&#xA;void iceberg() {&#xA;    setcolor(BLUE);&#xA;    setfillstyle(1, BLUE);&#xA;    fillpoly(4, poly);&#xA;    setfillstyle(1, WHITE);&#xA;    fillellipse(0, 300, 100, 100);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Sunset in C</title>
      <link>https://dhanoopbhaskar.github.io/posts/2010-11-18-sunset-in-c/</link>
      <pubDate>Thu, 18 Nov 2010 18:46:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2010-11-18-sunset-in-c/</guid>
      <description>&lt;pre&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;&#xA;#include&amp;lt;conio.h&amp;gt;&#xA;#include&amp;lt;graphics.h&amp;gt;&#xA;void main() {&#xA;    int gdriver = DETECT, gmode, errorcode;&#xA;    int midx, midy, radius = 40;&#xA;    initgraph( &amp;amp; gdriver, &amp;amp; gmode, &amp;quot;c:/tc/bgi&amp;quot;);&#xA;    errorcode = graphresult();&#xA;    if (errorcode != grOk) {&#xA;        printf(&amp;quot;Graphics error: %s\n&amp;quot;, grapherrormsg(errorcode));&#xA;        printf(&amp;quot;Press any key to halt:&amp;quot;);&#xA;        getch();&#xA;        exit(1);&#xA;    }&#xA;    midx = getmaxx() / 2;&#xA;    while (radius &amp;gt;= 10) {&#xA;        cleardevice();&#xA;        line(0, 210, 160, 50);&#xA;        setcolor(WHITE);&#xA;        line(160, 50, 320, 210);&#xA;        line(320, 210, 480, 50);&#xA;        line(480, 50, 640, 210);&#xA;        line(0, 210, 640, 210);&#xA;&#xA;        arc(midx, 210, 45, 135, radius);&#xA;        setfillstyle(SOLID_FILL, YELLOW);&#xA;        floodfill(midx, 200, 15);&#xA;        setcolor(BLUE);&#xA;        setfillstyle(SOLID_FILL, LIGHTBLUE);&#xA;        floodfill(2, 2, 15);&#xA;        setfillstyle(SOLID_FILL, BROWN);&#xA;        floodfill(150, 150, 15);&#xA;        floodfill(550, 150, 15);&#xA;        setcolor(15);&#xA;        line(0, 400, 640, 300);&#xA;        setfillstyle(SOLID_FILL, BLUE);&#xA;        floodfill(2, 350, 15);&#xA;        setfillstyle(SOLID_FILL, GREEN);&#xA;        floodfill(2, 410, 15);&#xA;        delay(100);&#xA;        radius -= 1;&#xA;    }&#xA;    if (radius &amp;lt;= 10)&#xA;        cleardevice();&#xA;    getch();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Rotation of Fan in C</title>
      <link>https://dhanoopbhaskar.github.io/posts/2010-11-18-rotation-of-fan-in-c/</link>
      <pubDate>Thu, 18 Nov 2010 18:44:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2010-11-18-rotation-of-fan-in-c/</guid>
      <description>&lt;pre&gt;&lt;code&gt;#include&amp;lt;graphics.h&amp;gt;&#xA;#include&amp;lt;stdio.h&amp;gt;&#xA;#include&amp;lt;stdlib.h&amp;gt;&#xA;#include&amp;lt;conio.h&amp;gt;&#xA;#include&amp;lt;dos.h&amp;gt;&#xA;#include&amp;lt;time.h&amp;gt;&#xA;#include&amp;lt;process.h&amp;gt;&#xA;#include&amp;lt;math.h&amp;gt;&#xA;void user();&#xA;float s1 = 0.0, s2 = 120.0, s3 = 240.0;&#xA;int midx, midy;&#xA;void main() {&#xA;    int gdriver = DETECT, gmode, errorcode;&#xA;    initgraph( &amp;amp; gdriver, &amp;amp; gmode, &amp;quot;C:/TC/BGI&amp;quot;);&#xA;    errorcode = graphresult();&#xA;    if (errorcode != grOk) {&#xA;        printf(&amp;quot;Graphics error: %s\n&amp;quot;, grapherrormsg(errorcode));&#xA;        printf(&amp;quot;Press any key to halt:&amp;quot;);&#xA;        getch();&#xA;        exit(1);&#xA;    }&#xA;    midx = getmaxx() / 2;&#xA;    midy = getmaxy() / 2;&#xA;    loop:&#xA;        cleardevice();&#xA;    circle(midx, midy, 5);&#xA;    setcolor(10);&#xA;    line(midx, midy, (midx + 100 * cos(s1 * 3.14 / 180)), (midy - 95 * sin(s1 * 3.14 / 180)));&#xA;    line(midx, midy, (midx + 100 * cos(s2 * 3.14 / 180)), (midy - 95 * sin(s2 * 3.14 / 180)));&#xA;    line(midx, midy, (midx + 100 * cos(s3 * 3.14 / 180)), (midy - 95 * sin(s3 * 3.14 / 180)));&#xA;    if (!kbhit()) //check for keystroke&#xA;    {&#xA;        s1 += 10;&#xA;        s2 += 10;&#xA;        s3 += 10;&#xA;        delay(25);&#xA;        goto loop;&#xA;    } else //when key press&#xA;    {&#xA;        getch();&#xA;        exit(0);&#xA;    }&#xA;    getch();&#xA;    closegraph();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Sunrise in C</title>
      <link>https://dhanoopbhaskar.github.io/posts/2010-11-18-sunrise-in-c/</link>
      <pubDate>Thu, 18 Nov 2010 18:44:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2010-11-18-sunrise-in-c/</guid>
      <description>&lt;pre&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;&#xA;#include&amp;lt;conio.h&amp;gt;&#xA;#include&amp;lt;graphics.h&amp;gt;&#xA;void main() {&#xA;    int gdriver = DETECT, gmode, errorcode;&#xA;    int midx, midy, radius = 10;&#xA;    initgraph( &amp;amp; gdriver, &amp;amp; gmode, &amp;quot;c:/tc/bgi&amp;quot;);&#xA;    errorcode = graphresult();&#xA;    if (errorcode != grOk) {&#xA;        printf(&amp;quot;Graphics error: %s\n&amp;quot;, grapherrormsg(errorcode));&#xA;        printf(&amp;quot;Press any key to halt:&amp;quot;);&#xA;        getch();&#xA;        exit(1);&#xA;    }&#xA;    midx = getmaxx() / 2;&#xA;    while (radius &amp;lt;= 40) {&#xA;        cleardevice();&#xA;        line(0, 210, 160, 50);&#xA;        setcolor(WHITE);&#xA;        line(160, 50, 320, 210);&#xA;        line(320, 210, 480, 50);&#xA;        line(480, 50, 640, 210);&#xA;        line(0, 210, 640, 210);&#xA;&#xA;        arc(midx, 210, 45, 133, radius);&#xA;        setfillstyle(SOLID_FILL, YELLOW);&#xA;        floodfill(midx, 200, 15);&#xA;        setcolor(BLUE);&#xA;        setfillstyle(SOLID_FILL, LIGHTBLUE);&#xA;        floodfill(2, 2, 15);&#xA;        setfillstyle(SOLID_FILL, BROWN);&#xA;        floodfill(150, 150, 15);&#xA;        floodfill(550, 150, 15);&#xA;        setcolor(15);&#xA;        line(0, 400, 640, 300);&#xA;        setfillstyle(SOLID_FILL, BLUE);&#xA;        floodfill(2, 350, 15);&#xA;        setfillstyle(SOLID_FILL, GREEN);&#xA;        floodfill(2, 410, 15);&#xA;        delay(100);&#xA;        radius += 1;&#xA;    }&#xA;    getch();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Analog Clock in C</title>
      <link>https://dhanoopbhaskar.github.io/posts/2010-11-18-analog-clock-in-c/</link>
      <pubDate>Thu, 18 Nov 2010 18:42:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2010-11-18-analog-clock-in-c/</guid>
      <description>&lt;pre&gt;&lt;code&gt;/*WAP to illustrate an analog clock*/&#xA;#include&amp;lt;graphics.h&amp;gt;&#xA;#include&amp;lt;stdio.h&amp;gt;&#xA;#include&amp;lt;stdlib.h&amp;gt;&#xA;#include&amp;lt;conio.h&amp;gt;&#xA;#include&amp;lt;dos.h&amp;gt;&#xA;#include&amp;lt;time.h&amp;gt;&#xA;#include&amp;lt;process.h&amp;gt;&#xA;#include&amp;lt;math.h&amp;gt;&#xA;void user();&#xA;float h, ma, hour, minute, sec, m, s;&#xA;void main() {&#xA;    int gdriver = DETECT, gmode, errorcode;&#xA;    struct time t;&#xA;    initgraph( &amp;amp; gdriver, &amp;amp; gmode, &amp;quot;C:/TC/BGI&amp;quot;);&#xA;    errorcode = graphresult();&#xA;    if (errorcode != grOk) {&#xA;        printf(&amp;quot;Graphics error: %s\n&amp;quot;, grapherrormsg(errorcode));&#xA;        printf(&amp;quot;Press any key to halt:&amp;quot;);&#xA;        getch();&#xA;        exit(1);&#xA;    }&#xA;    loop:&#xA;        gettime( &amp;amp; t);&#xA;    hour = t.ti_hour;&#xA;    minute = t.ti_min;&#xA;    sec = t.ti_sec;&#xA;    if (hour &amp;gt; 11)&#xA;        hour = hour - 12;&#xA;    h = 90 - (hour * 30 + minute / 12);&#xA;    ma = 90 - (minute * 6);&#xA;    s = 90 - (sec * 6);&#xA;    m = minute - minute / 12;&#xA;    cleardevice();&#xA;    gotoxy(40, 15);&#xA;    printf(&amp;quot;%2.0f:%2.0f:%2.0f&amp;quot;, hour, minute, sec);&#xA;    gotoxy(10, 10);&#xA;    setcolor(15);&#xA;    circle(350, 250, 100);&#xA;    setfillstyle(1, 9);&#xA;    circle(350, 250, 2);&#xA;    circle(350, 250, 10);&#xA;    outtextxy(335, 200, &amp;quot;RADON&amp;quot;);&#xA;    setcolor(RED);&#xA;    outtextxy(346, 160, &amp;quot;12&amp;quot;);&#xA;    outtextxy(346, 340, &amp;quot;6&amp;quot;);&#xA;    outtextxy(425, 247, &amp;quot;3&amp;quot;);&#xA;    outtextxy(260, 247, &amp;quot;9&amp;quot;);&#xA;    setcolor(7);&#xA;    line(350, 250, (350 + 70 * cos(h * 3.14 / 180)), (250 - 70 * sin(h * 3.14 / 180))); //hour hand&#xA;    setcolor(10);&#xA;    line(350, 250, (350 + 90 * cos(s * 3.14 / 180)), (250 - 95 * sin(s * 3.14 / 180))); //second hand&#xA;    setcolor(9);&#xA;    line(350, 250, (350 + 60 * cos(ma * 3.14 / 180)), (250 - 90 * sin(ma * 3.14 / 180))); //minute hand&#xA;    setcolor(8);&#xA;    if (sec &amp;gt; 59) {&#xA;        sec = 0;&#xA;        m++;&#xA;        m = 6;&#xA;        s = s - 90;&#xA;        if (m &amp;gt; 59) {&#xA;            m = 0;&#xA;            h = 6;&#xA;        }&#xA;    }&#xA;    if (!kbhit()) //check for keystroke&#xA;    {&#xA;        sec++;&#xA;        s = s - 6;&#xA;        delay(1000);&#xA;        goto loop;&#xA;    } else //when key press&#xA;    {&#xA;        getch();&#xA;        exit(0);&#xA;    }&#xA;    getch();&#xA;    closegraph();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Mid-point Ellipse Drawing Algorithm</title>
      <link>https://dhanoopbhaskar.github.io/posts/2010-11-18-mid-point-ellipse-drawing-algorithm/</link>
      <pubDate>Thu, 18 Nov 2010 18:41:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2010-11-18-mid-point-ellipse-drawing-algorithm/</guid>
      <description>&lt;pre&gt;&lt;code&gt;#include&amp;lt;graphics.h&amp;gt;&#xA;#include&amp;lt;stdlib.h&amp;gt;&#xA;#include&amp;lt;stdio.h&amp;gt;&#xA;#include&amp;lt;conio.h&amp;gt;&#xA;void ellipsemid(int xcenter, int ycenter, int rx, int ry);&#xA;void point(int x, int xcenter, int ycenter, int y);&#xA;int maxx, maxy, xcenter, ycenter, rx, ry, grok;&#xA;&#xA;void main() {&#xA;    int gdriver = DETECT, errorcode, gmode, a, b, c, d;&#xA;&#xA;    initgraph( &amp;amp; gdriver, &amp;amp; gmode, &amp;quot;c:/tc/bgi&amp;quot;);&#xA;    errorcode = graphresult();&#xA;    if (errorcode != grOk) {&#xA;        printf(&amp;quot;Graphics error: %s\n&amp;quot;, grapherrormsg(errorcode));&#xA;        printf(&amp;quot;Press any key to halt:&amp;quot;);&#xA;        getch();&#xA;        exit(1);&#xA;    }&#xA;&#xA;    clrscr();&#xA;    maxx = getmaxx();&#xA;    maxy = getmaxy();&#xA;    xcenter = 200;&#xA;    ycenter = 200;&#xA;    rx = 50;&#xA;    ry = 50;&#xA;    setcolor(4);&#xA;    ellipsemid(xcenter, ycenter, rx, ry);&#xA;    getch();&#xA;    //closegraph();&#xA;}&#xA;&#xA;&#xA;void ellipsemid(int xcenter, int ycenter, int rx, int ry) {&#xA;    int p, px, py, x, y, ry2, rx2, tworx2, twory2;&#xA;    ry2 = ry * ry;&#xA;    rx2 = rx * rx;&#xA;    twory2 = 2 * ry2;&#xA;    tworx2 = 2 * rx2;&#xA;    x = 0;&#xA;    y = ry;&#xA;    point(x, xcenter, ycenter, y);&#xA;    p = abs(ry2 - ry2 * ry + (0.25 * rx2));&#xA;    px = 0;&#xA;    py = twory2 * y;&#xA;    while (px &amp;lt; py) {&#xA;        x = x + 1;&#xA;        px = px + twory2;&#xA;        if (p &amp;gt;= 0) {&#xA;            y = y - 1;&#xA;            py = py - tworx2;&#xA;        }&#xA;        if (p &amp;lt; 0) {&#xA;            p = p + ry2 + px;&#xA;        } else {&#xA;            p = p + ry2 + px;&#xA;        }&#xA;        point(x, xcenter, ycenter, y);&#xA;    }&#xA;    p = abs(ry2 * (x + 6.5) * (x + 6.5) + rx2 * (y - 1) - rx2 * ry2);&#xA;    while (y &amp;gt; 0) {&#xA;        y = y - 1;&#xA;        py = py - tworx2;&#xA;        if (p &amp;lt; 0) {&#xA;            x = x + 1;&#xA;            px = px + twory2;&#xA;        }&#xA;        if (p &amp;gt; 0) {&#xA;            p = p + rx2 - py;&#xA;        } else {&#xA;            p = p + rx2 - py + px;&#xA;            point(x, xcenter, ycenter, y);&#xA;        }&#xA;    }&#xA;}&#xA;void point(int x, int xcenter, int ycenter, int y) {&#xA;    setcolor(4);&#xA;    putpixel(xcenter + x, ycenter + y, 4);&#xA;    putpixel(xcenter - x, ycenter + y, 4);&#xA;    putpixel(xcenter + x, ycenter - y, 4);&#xA;    putpixel(xcenter - x, ycenter - y, 4);&#xA;    putpixel(xcenter + x, ycenter + y, 4);&#xA;    putpixel(xcenter - x, ycenter + y, 4);&#xA;    putpixel(xcenter + x, ycenter - y, 4);&#xA;    putpixel(xcenter - x, ycenter - y, 4);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Line Clipping in C</title>
      <link>https://dhanoopbhaskar.github.io/posts/2010-11-18-line-clipping-in-c/</link>
      <pubDate>Thu, 18 Nov 2010 18:39:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2010-11-18-line-clipping-in-c/</guid>
      <description>&lt;pre&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;&#xA;#include&amp;lt;conio.h&amp;gt;&#xA;#include&amp;lt;graphics.h&amp;gt;&#xA;int xwmin, ywmin, xwmax, ywmax;&#xA;void rcode(int, int, int[]);&#xA;int check(int[], int[]);&#xA;void main() {&#xA;    int gdriver = DETECT, gmode, errorcode;&#xA;    int x1, y1, x2, y2, code1[4], code2[4], x, y, m;&#xA;    int point[2][2], p = 0;&#xA;    initgraph( &amp;amp; gdriver, &amp;amp; gmode, &amp;quot;c:/tc/bgi&amp;quot;);&#xA;    errorcode = graphresult();&#xA;    if (errorcode != grOk) {&#xA;        printf(&amp;quot;Graphics error: %s\n&amp;quot;, grapherrormsg(errorcode));&#xA;        printf(&amp;quot;Press any key to halt:&amp;quot;);&#xA;        getch();&#xA;        exit(1);&#xA;    }&#xA;    printf(&amp;quot;\n Enter the coordinates of window &amp;quot;);&#xA;    printf(&amp;quot;\n xwmin and ywmin: &amp;quot;);&#xA;    scanf(&amp;quot;%d%d&amp;quot;, &amp;amp; xwmin, &amp;amp; ywmin);&#xA;    printf(&amp;quot;\n xwmax and ywmax: &amp;quot;);&#xA;    scanf(&amp;quot;%d%d&amp;quot;, &amp;amp; xwmax, &amp;amp; ywmax);&#xA;    printf(&amp;quot;\n Enter the coordinates of line &amp;quot;);&#xA;    printf(&amp;quot;\n Enter the coordinate for the first end point of the line: &amp;quot;);&#xA;    scanf(&amp;quot;%d%d&amp;quot;, &amp;amp; x1, &amp;amp; y1);&#xA;    printf(&amp;quot;\n Enter the coordinate for the second end point of the line: &amp;quot;);&#xA;    scanf(&amp;quot;%d%d&amp;quot;, &amp;amp; x2, &amp;amp; y2);&#xA;    rcode(x1, y1, code1);&#xA;    rcode(x2, y2, code2);&#xA;&#xA;    if (check(code1, code2) == 1) {&#xA;        rectangle(xwmin, ywmin, xwmax, ywmax);&#xA;        printf(&amp;quot;1&amp;quot;);&#xA;    } else {&#xA;        m = (y2 - y1) / (x2 - x1);&#xA;        rectangle(xwmin, ywmin, xwmax, ywmax);&#xA;        line(x1, y1, x2, y2);&#xA;        setcolor(4);&#xA;        if (x1 &amp;lt; xwmin) {&#xA;            y = y1 + m * (xwmin - x1);&#xA;            x = xwmin;&#xA;            x1 = x;&#xA;            y1 = y;&#xA;        }&#xA;        if (x2 &amp;gt; xwmax) {&#xA;            y = y2 + m * (xwmax - x2);&#xA;            x = xwmax;&#xA;            x2 = x;&#xA;            y2 = y;&#xA;        }&#xA;        if (y1 &amp;lt; ywmin) {&#xA;            x = x1 + (ywmin - y1) / m;&#xA;            y = ywmin;&#xA;            x1 = x;&#xA;            y1 = y;&#xA;        }&#xA;        if (y2 &amp;gt; ywmax) {&#xA;            x = x2 + (ywmax - y2) / m;&#xA;            y = ywmax;&#xA;            x2 = x;&#xA;            y2 = y;&#xA;        }&#xA;&#xA;&#xA;        line(x1, y1, x2, y2);&#xA;&#xA;    }&#xA;    getch();&#xA;}&#xA;&#xA;int check(int code1[], int code2[]) {&#xA;    int flag = 0;&#xA;    if (code1[3] == 1 &amp;amp;&amp;amp; code2[3] == 1)&#xA;        flag = 1;&#xA;    if (code1[2] == 1 &amp;amp;&amp;amp; code2[2] == 1)&#xA;        flag = 1;&#xA;    if (code1[1] == 1 &amp;amp;&amp;amp; code2[1] == 1)&#xA;        flag = 1;&#xA;    if (code1[0] == 1 &amp;amp;&amp;amp; code2[0] == 1)&#xA;        flag = 1;&#xA;&#xA;    return flag;&#xA;}&#xA;&#xA;void rcode(int x, int y, int code[]) {&#xA;    if (y &amp;gt; ywmax) //bottom&#xA;        code[2] = 1;&#xA;    else&#xA;        code[2] = 0;&#xA;    if (y &amp;lt; ywmin) //top&#xA;        code[3] = 1;&#xA;    else&#xA;        code[3] = 0;&#xA;    if (x &amp;gt; xwmax) //right&#xA;        code[1] = 1;&#xA;    else&#xA;        code[1] = 0;&#xA;    if (x &amp;lt; xwmin) //left&#xA;        code[0] = 1;&#xA;    else&#xA;        code[0] = 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>WAP in C to generate recursive descend parser</title>
      <link>https://dhanoopbhaskar.github.io/posts/2010-05-28-wap-in-c-to-generate-recursive-descend-parser/</link>
      <pubDate>Fri, 28 May 2010 17:40:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2010-05-28-wap-in-c-to-generate-recursive-descend-parser/</guid>
      <description>&lt;pre&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;&#xA;#include&amp;lt;conio.h&amp;gt;&#xA;#include&amp;lt;ctype.h&amp;gt;&#xA;int lptr = 0; //look ahead pointer&#xA;char buff[100]; //buffer to store input string&#xA;int success = 1; //to reflect success or failure&#xA;&#xA;void E();&#xA;void EDASH();&#xA;void T();&#xA;void TDASH();&#xA;void V();&#xA;&#xA;void start() {&#xA;    E();&#xA;}&#xA;&#xA;int isvalid(char ch) {&#xA;    if (isalpha(ch))&#xA;        return 1;&#xA;    else if (toascii(ch) &amp;gt;= 47 &amp;amp;&amp;amp; toascii(ch) &amp;lt;= 57)&#xA;        return 1;&#xA;    else&#xA;        return 0;&#xA;}&#xA;&#xA;void advance() {&#xA;    lptr++;&#xA;}&#xA;&#xA;void E() {&#xA;    T();&#xA;    EDASH();&#xA;}&#xA;&#xA;void EDASH() {&#xA;    if (buff[lptr] == &#39;+&#39;) {&#xA;        advance();&#xA;        T();&#xA;        EDASH();&#xA;    }&#xA;}&#xA;&#xA;void T() {&#xA;    V();&#xA;    TDASH();&#xA;}&#xA;&#xA;void TDASH() {&#xA;    if (buff[lptr] == &#39;*&#39;) {&#xA;        advance();&#xA;        V();&#xA;        TDASH();&#xA;    }&#xA;}&#xA;&#xA;void V() {&#xA;    if (isvalid(buff[lptr])) {&#xA;        advance();&#xA;    } else if (buff[lptr] == &#39;(&#39;) {&#xA;        advance();&#xA;        E();&#xA;        if (buff[lptr] == &#39;)&#39;) {&#xA;            advance();&#xA;        } else {&#xA;            printf(&amp;quot;\n* Right parantheses missing &amp;quot;);&#xA;            success = 0;&#xA;        }&#xA;    } else {&#xA;        printf(&amp;quot;\n* Symbol(s) unidentified&amp;quot;);&#xA;        success = 0;&#xA;        getch();&#xA;        exit(0);&#xA;    }&#xA;}&#xA;&#xA;&#xA;void main() {&#xA;    int n;&#xA;    clrscr();&#xA;    printf(&amp;quot;\n\t----------------&amp;quot;);&#xA;    printf(&amp;quot;\n\t    GRAMMAR&amp;quot;);&#xA;    printf(&amp;quot;\n\t----------------\n&amp;quot;);&#xA;    printf(&amp;quot;\n\t E ::= TE&#39;&amp;quot;);&#xA;    printf(&amp;quot;\n\t E&#39;::= +TE&#39;|$&amp;quot;);&#xA;    printf(&amp;quot;\n\t T ::= VT&#39;&amp;quot;);&#xA;    printf(&amp;quot;\n\t T&#39;::= *VT&#39;|$&amp;quot;);&#xA;    printf(&amp;quot;\n\t V ::= &amp;lt;id&amp;gt;&amp;quot;);&#xA;    printf(&amp;quot;\n\t----------------\n\n&amp;quot;);&#xA;    printf(&amp;quot;\n Enter an expression: &amp;quot;);&#xA;    gets(buff);&#xA;    n = strlen(buff);&#xA;    start();&#xA;&#xA;    if (success == 1 &amp;amp;&amp;amp; lptr &amp;gt;= n) {&#xA;        printf(&amp;quot;\n* Correct syntax of expression&amp;quot;);&#xA;    } else {&#xA;        printf(&amp;quot;\n* Incorrect syntax of expression&amp;quot;);&#xA;    }&#xA;&#xA;    getch();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>WAP to generate symbol table</title>
      <link>https://dhanoopbhaskar.github.io/posts/2010-05-28-wap-to-generate-symbol-table/</link>
      <pubDate>Fri, 28 May 2010 17:38:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2010-05-28-wap-to-generate-symbol-table/</guid>
      <description>&lt;pre&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;&#xA;#include&amp;lt;conio.h&amp;gt;&#xA;int isnum(int n) {&#xA;    if (n &amp;gt; 0 &amp;amp;&amp;amp; n &amp;lt; 100)&#xA;        return 1;&#xA;    else&#xA;        return 0;&#xA;}&#xA;void main() {&#xA;    FILE * fp;&#xA;    char words[50][25], str[25], ch;&#xA;    char name[50][25];&#xA;    int size[50], add[50];&#xA;    int temp, ad = 1000;&#xA;    int i, j, w = 0, d = 0;&#xA;    fp = fopen(&amp;quot;tsym.c&amp;quot;, &amp;quot;r&amp;quot;);&#xA;    clrscr();&#xA;    printf(&amp;quot;\n File: tsym.c\n\n&amp;quot;);&#xA;    if (fp != NULL) {&#xA;        do {&#xA;            j = 0;&#xA;            ch = &#39;d&#39;;&#xA;            strcpy(str, &amp;quot;&amp;quot;);&#xA;&#xA;            while (ch != &#39; &#39;) {&#xA;                ch = getc(fp);&#xA;                printf(&amp;quot;%c&amp;quot;, ch);&#xA;&#xA;                if (ch == EOF) break;&#xA;&#xA;                str[j++] = ch;&#xA;&#xA;&#xA;                if (ch == &#39; &#39; || ch == &#39;\n&#39; || ch == &#39;=&#39; || ch == &#39;[&#39;) {&#xA;                    j--;&#xA;                    break;&#xA;                }&#xA;&#xA;                if (ch == &#39;;&#39; || ch == &#39;,&#39; || ch == &#39;]&#39;) {&#xA;                    j--;&#xA;                    break;&#xA;                }&#xA;&#xA;            }&#xA;&#xA;            str[j] = &#39;\0&#39;;&#xA;&#xA;&#xA;            if (j &amp;gt; 0)&#xA;                strcpy(words[w++], str);&#xA;&#xA;&#xA;&#xA;            if (ch == &#39;;&#39;)&#xA;                strcpy(words[w++], &amp;quot;;&amp;quot;);&#xA;&#xA;            j = 0;&#xA;        } while (ch != EOF);&#xA;    }&#xA;&#xA;&#xA;&#xA;    for (i = 0; i &amp;lt; w; i++) {&#xA;        if (!strcmp(words[i], &amp;quot;int&amp;quot;)) {&#xA;            i++;&#xA;&#xA;            for (; strcmp(words[i], &amp;quot;;&amp;quot;); i++) {&#xA;                temp = atoi(words[i]);&#xA;                if (isnum(temp)) {&#xA;                    d--;&#xA;                    ad = ad - size[d];&#xA;                    size[d] = temp * 2;&#xA;                    ad = ad + size[d];&#xA;                    d++;&#xA;                } else {&#xA;                    strcpy(name[d], words[i]);&#xA;                    size[d] = 2;&#xA;                    add[d] = ad;&#xA;                    ad = ad + size[d];&#xA;                    d++;&#xA;                }&#xA;            }&#xA;        } else if (!strcmp(words[i], &amp;quot;char&amp;quot;)) {&#xA;            i++;&#xA;            for (; strcmp(words[i], &amp;quot;;&amp;quot;); i++) {&#xA;                temp = atoi(words[i]);&#xA;                if (isnum(temp)) {&#xA;                    d--;&#xA;                    ad = ad - size[d];&#xA;                    size[d] = temp * 1;&#xA;                    ad = ad + size[d];&#xA;                    d++;&#xA;                } else {&#xA;                    strcpy(name[d], words[i]);&#xA;                    size[d] = 1;&#xA;                    add[d] = ad;&#xA;                    ad = ad + size[d];&#xA;                    d++;&#xA;                }&#xA;            }&#xA;        } else if (!strcmp(words[i], &amp;quot;float&amp;quot;)) {&#xA;            i++;&#xA;            for (; strcmp(words[i], &amp;quot;;&amp;quot;); i++) {&#xA;                temp = atoi(words[i]);&#xA;                if (isnum(temp)) {&#xA;                    d--;&#xA;                    ad = ad - size[d];&#xA;                    size[d] = temp * 4;&#xA;                    ad = ad + size[d];&#xA;                    d++;&#xA;                } else {&#xA;                    strcpy(name[d], words[i]);&#xA;                    size[d] = 4;&#xA;                    add[d] = ad;&#xA;                    ad = ad + size[d];&#xA;                    d++;&#xA;                }&#xA;            }&#xA;        } else if (!strcmp(words[i], &amp;quot;double&amp;quot;)) {&#xA;            i++;&#xA;            for (; strcmp(words[i], &amp;quot;;&amp;quot;); i++) {&#xA;                temp = atoi(words[i]);&#xA;                if (isnum(temp)) {&#xA;                    d--;&#xA;                    ad = ad - size[d];&#xA;                    size[d] = temp * 8;&#xA;                    ad = ad + size[d];&#xA;                    d++;&#xA;                } else {&#xA;                    strcpy(name[d], words[i]);&#xA;                    size[d] = 8;&#xA;                    add[d] = ad;&#xA;                    ad = ad + size[d];&#xA;                    d++;&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;&#xA;    printf(&amp;quot;\n\n\tSYMBOL TABLE:\n&amp;quot;);&#xA;    printf(&amp;quot;SYMBOL       SIZE      ADDRESS&amp;quot;);&#xA;    for (i = 0; i &amp;lt; d; i++) {&#xA;        printf(&amp;quot;\n%-10s&amp;quot;, name[i]);&#xA;        printf(&amp;quot;%-10d&amp;quot;, size[i]);&#xA;        printf(&amp;quot;%-10d&amp;quot;, add[i]);&#xA;    }&#xA;    getch();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>WAP to print comments in a given program</title>
      <link>https://dhanoopbhaskar.github.io/posts/2010-05-28-wap-to-print-comments-in-a-given-program/</link>
      <pubDate>Fri, 28 May 2010 17:36:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2010-05-28-wap-to-print-comments-in-a-given-program/</guid>
      <description>&lt;pre&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;&#xA;#include&amp;lt;conio.h&amp;gt;&#xA;void main() {&#xA;    char str[25], ch, words[50][25];&#xA;    int i, k, j, w = 0;&#xA;    FILE * fp;&#xA;    clrscr();&#xA;    fp = fopen(&amp;quot;tcom.c&amp;quot;, &amp;quot;r&amp;quot;);&#xA;    printf(&amp;quot;\n File: tcom.c\n\n&amp;quot;);&#xA;    if (fp != NULL) {&#xA;        do {&#xA;            j = 0;&#xA;            ch = &#39;d&#39;;&#xA;            strcpy(str, &amp;quot;&amp;quot;);&#xA;            while (ch != &#39; &#39;) {&#xA;                ch = getc(fp);&#xA;                putchar(ch);&#xA;                if (ch == EOF) break;&#xA;                str[j] = ch;&#xA;                if (ch != &#39; &#39; &amp;amp;&amp;amp; ch != &#39;\n&#39; &amp;amp;&amp;amp; ch != &#39;;&#39; &amp;amp;&amp;amp; ch != &#39;/&#39; &amp;amp;&amp;amp; ch != &#39;*&#39;)&#xA;                    j++;&#xA;                if (ch == &#39; &#39; || ch == &#39;\n&#39; || ch == &#39;;&#39; || ch == &#39;/&#39; || ch == &#39;*&#39;) break;&#xA;            }&#xA;            str[j] = &#39;\0&#39;;&#xA;&#xA;            strcpy(words[w++], str);&#xA;            if (ch == &#39;/&#39;)&#xA;                strcpy(words[w++], &amp;quot;/&amp;quot;);&#xA;&#xA;            if (ch == &#39;*&#39;)&#xA;                strcpy(words[w++], &amp;quot;*&amp;quot;);&#xA;&#xA;            if (ch == &#39;;&#39;)&#xA;                strcpy(words[w++], &amp;quot;;&amp;quot;);&#xA;&#xA;            if (ch == &#39;\n&#39;)&#xA;                strcpy(words[w++], &amp;quot;newline&amp;quot;);&#xA;&#xA;            if (ch == EOF)&#xA;                strcpy(words[w++], &amp;quot;EOF&amp;quot;);&#xA;&#xA;            if (ch == &#39; &#39;)&#xA;                strcpy(words[w++], &amp;quot; &amp;quot;);&#xA;&#xA;            j = 0;&#xA;        }&#xA;        while (ch != EOF);&#xA;    }&#xA;&#xA;&#xA;    printf(&amp;quot;\n\n\n* Single line comments are:\n&amp;quot;);&#xA;    for (i = 0; i &amp;lt; w; i++) { //1&#xA;        if (!strcmp(words[i], &amp;quot;/&amp;quot;)) { //2&#xA;            ++i;&#xA;            /*single line*/&#xA;            if (!strcmp(words[++i], &amp;quot;/&amp;quot;)) { //3&#xA;                do { //4&#xA;                    i = i + 1;&#xA;                    if (strcmp(words[i], &amp;quot;newline&amp;quot;) &amp;amp;&amp;amp; strcmp(words[i], &amp;quot;EOF&amp;quot;))&#xA;                        printf(&amp;quot;%s&amp;quot;, words[i]);&#xA;                    if (!strcmp(words[i], &amp;quot;newline&amp;quot;) || (!strcmp(words[i], &amp;quot;EOF&amp;quot;)))&#xA;                        break;&#xA;                } while (i &amp;lt; w); //4&#xA;                printf(&amp;quot;\n&amp;quot;);&#xA;            } //3&#xA;            /*single line*/&#xA;&#xA;&#xA;        } //2&#xA;&#xA;    } //1&#xA;&#xA;&#xA;    printf(&amp;quot;\n\n\n* Multiple line comments are:\n&amp;quot;);&#xA;    for (i = 0; i &amp;lt; w; i++) { //1&#xA;        if (!strcmp(words[i], &amp;quot;/&amp;quot;)) { //2&#xA;            ++i;&#xA;            /*multiline*/&#xA;            if (!strcmp(words[++i], &amp;quot;*&amp;quot;)) { //5&#xA;                do { //6&#xA;                    if (strcmp(words[++i], &amp;quot;*&amp;quot;))&#xA;                        printf(&amp;quot;%s&amp;quot;, words[i]);&#xA;                    else { //7&#xA;                        if (strcmp(words[++i], &amp;quot;/&amp;quot;)) { //8&#xA;                            printf(&amp;quot;\n&amp;quot;);&#xA;                            break;&#xA;                        } //8&#xA;                        else&#xA;                            printf(&amp;quot;%s&amp;quot;, words[++i]);&#xA;                    } //7&#xA;                } while (i &amp;lt; w); //6&#xA;            } //5&#xA;            /*multi line*/&#xA;        } //2&#xA;    } //1&#xA;    fclose(fp);&#xA;    getch();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>WAP to check the syntax of for loops</title>
      <link>https://dhanoopbhaskar.github.io/posts/2010-05-28-wap-to-check-the-syntax-of-for-loops/</link>
      <pubDate>Fri, 28 May 2010 17:34:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2010-05-28-wap-to-check-the-syntax-of-for-loops/</guid>
      <description>&lt;pre&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;&#xA;#include&amp;lt;conio.h&amp;gt;&#xA;void main() {&#xA;    char str[25], ch, words[25][25];&#xA;    int i, k, j, w = 0, s = 0, cntl = 0, cntr = 0, p = 0, parR = 0, f = 0, parL = 0;&#xA;    FILE * fp;&#xA;    clrscr();&#xA;    fp = fopen(&amp;quot;tnest.c&amp;quot;, &amp;quot;r&amp;quot;);&#xA;    printf(&amp;quot;\n File: tnest.c\n\n&amp;quot;);&#xA;    if (fp != NULL) {&#xA;        do {&#xA;            j = 0;&#xA;            ch = &#39;d&#39;;&#xA;            strcpy(str, &amp;quot;&amp;quot;);&#xA;            while (ch != &#39; &#39;) {&#xA;                ch = getc(fp);&#xA;                putchar(ch);&#xA;                if (ch == EOF) break;&#xA;                if (ch == &#39;{&#39;)&#xA;                    cntl++;&#xA;                else if (ch == &#39;}&#39;)&#xA;                    cntr++;&#xA;                str[j] = ch;&#xA;                if (ch != &#39; &#39; &amp;amp;&amp;amp; ch != &#39;\n&#39; &amp;amp;&amp;amp; ch != &#39;;&#39; &amp;amp;&amp;amp; ch != &#39;(&#39; &amp;amp;&amp;amp; ch != &#39;)&#39;)&#xA;                    j++;&#xA;                if (ch == &#39; &#39; || ch == &#39;\n&#39; || ch == &#39;;&#39; || ch == &#39;(&#39; || ch == &#39;)&#39;) break;&#xA;            }&#xA;            str[j] = &#39;\0&#39;;&#xA;            strcpy(words[w++], str);&#xA;            if (ch == &#39;(&#39;)&#xA;                strcpy(words[w++], &amp;quot;(&amp;quot;);&#xA;            if (ch == &#39;)&#39;)&#xA;                strcpy(words[w++], &amp;quot;)&amp;quot;);&#xA;            if (ch == &#39;;&#39;)&#xA;                strcpy(words[w++], &amp;quot;;&amp;quot;);&#xA;&#xA;            if (ch == &#39;\n&#39;)&#xA;                strcpy(words[w++], &amp;quot;newline&amp;quot;);&#xA;            j = 0;&#xA;        }&#xA;        while (ch != EOF);&#xA;    }&#xA;&#xA;    for (i = 0; i &amp;lt; w; i++) { //for&#xA;&#xA;        if (!strcmp(words[i], &amp;quot;for&amp;quot;)) { //1&#xA;            s = 0;&#xA;            p = 0;&#xA;            parL = 0;&#xA;            if (!strcmp(words[++i], &amp;quot;(&amp;quot;)) { //2&#xA;                f++;&#xA;                parR = 0;&#xA;                parL++;&#xA;&#xA;                for (j = i; j &amp;lt; w; j++) { //3&#xA;                    if (!strcmp(words[j], &amp;quot;;&amp;quot;))&#xA;                        s++;&#xA;                    if (!strcmp(words[j], &amp;quot;)&amp;quot;)) {&#xA;                        parR++;&#xA;                        //p=1;&#xA;                        break;&#xA;                    }&#xA;                    if (!strcmp(words[j], &amp;quot;newline&amp;quot;)) {&#xA;                        break;&#xA;                    }&#xA;                } //3&#xA;&#xA;                if (!strcmp(words[j], &amp;quot;)&amp;quot;)) {&#xA;                    if ((!strcmp(words[++j], &amp;quot;;&amp;quot;)) || (!strcmp(words[++j], &amp;quot;newline&amp;quot;)))&#xA;                        p = 1;&#xA;                }&#xA;            } //2&#xA;        } //1&#xA;        if (p != 1 || parR != 1 || s != 2 || parL != 1) break;&#xA;    }&#xA;&#xA;    if ((parL != 1) || (parR != 1)) {&#xA;        printf(&amp;quot;\n\n* Error in syntax of parantheses &amp;quot;);&#xA;        printf(&amp;quot;of for loop no:%d &amp;quot;, f);&#xA;        getch();&#xA;        exit(0);&#xA;    } else if (cntl != cntr) {&#xA;        printf(&amp;quot;\n\n* Error in syntax of curly braces &amp;quot;);&#xA;        getch();&#xA;        exit(0);&#xA;    } else if (s != 2) {&#xA;        printf(&amp;quot;\n\n* Error in syntax of semicolon &amp;quot;);&#xA;        printf(&amp;quot;of for loop no:%d &amp;quot;, f);&#xA;        getch();&#xA;        exit(0);&#xA;    } else if (p == 1) {&#xA;        printf(&amp;quot;\n\n* Syntax of for is correct&amp;quot;);&#xA;        getch();&#xA;        exit(0);&#xA;    }&#xA;&#xA;    fclose(fp);&#xA;    getch();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>WAP to perform macro expansion</title>
      <link>https://dhanoopbhaskar.github.io/posts/2010-05-28-wap-to-perform-macro-expansion/</link>
      <pubDate>Fri, 28 May 2010 17:31:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2010-05-28-wap-to-perform-macro-expansion/</guid>
      <description>&lt;pre&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;&#xA;#include&amp;lt;conio.h&amp;gt;&#xA;void main() {&#xA;    char words[25][25];&#xA;    char str[25], ch;&#xA;    int i, j, w = 0, m = 0, flag = 0;&#xA;    char macro[10][25];&#xA;    char val[10][25];&#xA;    long l;&#xA;    FILE * fp, * fp1;&#xA;    fp = fopen(&amp;quot;text.c&amp;quot;, &amp;quot;r&amp;quot;);&#xA;    fp1 = fopen(&amp;quot;temp.c&amp;quot;, &amp;quot;w&amp;quot;);&#xA;    clrscr();&#xA;    printf(&amp;quot;\n File: text.c before MACRO EXPANSION\n\n&amp;quot;);&#xA;    if (fp != NULL) {&#xA;        do {&#xA;            j = 0;&#xA;            ch = &#39;d&#39;;&#xA;            strcpy(str, &amp;quot;&amp;quot;);&#xA;            while (ch != &#39; &#39;) {&#xA;                ch = getc(fp);&#xA;                printf(&amp;quot;%c&amp;quot;, ch);&#xA;                if (ch == EOF) break;&#xA;                putc(ch, fp1);&#xA;&#xA;                str[j] = ch;&#xA;                if (ch != &#39; &#39; &amp;amp;&amp;amp; ch != &#39;\n&#39; &amp;amp;&amp;amp; ch != &#39;;&#39; &amp;amp;&amp;amp; ch != &#39;=&#39; &amp;amp;&amp;amp; ch != &#39;+&#39;)&#xA;                    j++;&#xA;                if (ch == &#39; &#39; || ch == &#39;\n&#39;) break;&#xA;                if (ch == &#39;;&#39; || ch == &#39;=&#39; || ch == &#39;+&#39;) break;&#xA;            }&#xA;            str[j] = &#39;\0&#39;;&#xA;            strcpy(words[w++], str);&#xA;            j = 0;&#xA;        } while (ch != EOF);&#xA;    }&#xA;&#xA;    for (i = 0; i &amp;lt; w; i++) {&#xA;        if (!strcmp(words[i], &amp;quot;#define&amp;quot;)) {&#xA;            strcpy(macro[m++], words[++i]);&#xA;        }&#xA;    }&#xA;&#xA;    for (i = 0; i &amp;lt; w; i++) {&#xA;        if (!strcmp(words[i], &amp;quot;main()&amp;quot;))&#xA;            break;&#xA;        for (j = 0; j &amp;lt; m; j++) {&#xA;            if (!strcmp(words[i], macro[j])) {&#xA;                strcpy(val[j], words[++i]);&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    fclose(fp);&#xA;    fclose(fp1);&#xA;    fp = fopen(&amp;quot;text.c&amp;quot;, &amp;quot;w&amp;quot;);&#xA;    fp1 = fopen(&amp;quot;temp.c&amp;quot;, &amp;quot;r&amp;quot;);&#xA;    if (fp1 != NULL) {&#xA;        do {&#xA;            j = 0;&#xA;            ch = &#39;d&#39;;&#xA;            strcpy(str, &amp;quot;&amp;quot;);&#xA;            while (ch != &#39; &#39;) {&#xA;                ch = getc(fp1);&#xA;                if (ch == EOF) break;&#xA;                putc(ch, fp);&#xA;                str[j] = ch;&#xA;&#xA;                if (ch != &#39; &#39; &amp;amp;&amp;amp; ch != &#39;\n&#39; &amp;amp;&amp;amp; ch != &#39;;&#39; &amp;amp;&amp;amp; ch != &#39;=&#39; &amp;amp;&amp;amp; ch != &#39;+&#39;)&#xA;                    j++;&#xA;                if (ch == &#39; &#39; || ch == &#39;\n&#39;) break;&#xA;                if (ch == &#39;;&#39; || ch == &#39;=&#39; || ch == &#39;+&#39;) break;&#xA;            }&#xA;            str[j] = &#39;\0&#39;;&#xA;            if (flag) {&#xA;                for (i = 0; i &amp;lt; m; i++) {&#xA;                    if (!strcmp(str, macro[i])) {&#xA;                        l = strlen(str);&#xA;                        fseek(fp, -(1 * l + 1), SEEK_CUR);&#xA;                        fputs(val[i], fp);&#xA;                    } //if&#xA;                } //for&#xA;            } //if-flag&#xA;&#xA;            if (ch == &#39;;&#39;)&#xA;                putc(ch, fp);&#xA;&#xA;            if (!strcmp(str, &amp;quot;main()&amp;quot;))&#xA;                flag = 1;&#xA;            j = 0;&#xA;        } while (ch != EOF);&#xA;    }&#xA;&#xA;    fclose(fp);&#xA;    fclose(fp1);&#xA;    fp = fopen(&amp;quot;text.c&amp;quot;, &amp;quot;r&amp;quot;);&#xA;    printf(&amp;quot;\n\n\n File: text.c after MACRO EXPANSION\n\n&amp;quot;);&#xA;    if (fp != NULL) {&#xA;        do {&#xA;            ch = getc(fp);&#xA;            printf(&amp;quot;%c&amp;quot;, ch);&#xA;        } while (ch != EOF);&#xA;    }&#xA;    fclose(fp);&#xA;    getch();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>WAP to check the correctness of braces</title>
      <link>https://dhanoopbhaskar.github.io/posts/2010-05-28-wap-to-check-the-correctness-of-braces/</link>
      <pubDate>Fri, 28 May 2010 17:30:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2010-05-28-wap-to-check-the-correctness-of-braces/</guid>
      <description>&lt;pre&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;&#xA;#include&amp;lt;conio.h&amp;gt;&#xA;void main() {&#xA;    FILE * fp;&#xA;    char ch;&#xA;    int countL = 0, countR = 0;&#xA;    fp = fopen(&amp;quot;tbraces.c&amp;quot;, &amp;quot;r&amp;quot;);&#xA;    clrscr();&#xA;    printf(&amp;quot;\n File: tbraces.c\n\n&amp;quot;);&#xA;    if (fp != NULL) {&#xA;        do {&#xA;            ch = &#39;d&#39;;&#xA;            while (ch != &#39; &#39;) {&#xA;                ch = getc(fp);&#xA;                printf(&amp;quot;%c&amp;quot;, ch);&#xA;                if (ch == &#39;{&#39;) countL++;&#xA;                if (ch == &#39;}&#39;) countR++;&#xA;                if (ch == EOF) break;&#xA;            }&#xA;        } while (ch != EOF);&#xA;    }&#xA;&#xA;&#xA;    if (countL != countR)&#xA;        printf(&amp;quot;\n\n* ERROR in the syntax of curly braces&amp;quot;);&#xA;    else&#xA;        printf(&amp;quot;\n\n* Curly braces is syntactically correct&amp;quot;);&#xA;&#xA;    fclose(fp);&#xA;    getch();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Write a program in C to perform token separation</title>
      <link>https://dhanoopbhaskar.github.io/posts/2010-05-28-write-a-program-in-c-to-perform-token-separation/</link>
      <pubDate>Fri, 28 May 2010 17:14:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2010-05-28-write-a-program-in-c-to-perform-token-separation/</guid>
      <description>&lt;pre&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;&#xA;#include&amp;lt;conio.h&amp;gt;&#xA;void main() {&#xA;    FILE * fp;&#xA;    char words[50][25], str[25], ch;&#xA;    char key[50][25], op[50][10], id[50][25];&#xA;    int i, j, k = 0, w = 0, p = 0, d = 0;&#xA;    int yes = 0;&#xA;    fp = fopen(&amp;quot;ttoken.c&amp;quot;, &amp;quot;r&amp;quot;);&#xA;    clrscr();&#xA;    printf(&amp;quot;\n File: ttoken.c\n\n&amp;quot;);&#xA;    if (fp != NULL) {&#xA;        do {&#xA;            j = 0;&#xA;            ch = &#39;d&#39;;&#xA;            strcpy(str, &amp;quot;&amp;quot;);&#xA;&#xA;            while (ch != &#39; &#39;) {&#xA;                ch = getc(fp);&#xA;                printf(&amp;quot;%c&amp;quot;, ch);&#xA;&#xA;                if (ch == EOF) break;&#xA;&#xA;                str[j++] = ch;&#xA;&#xA;                switch (ch) {&#xA;                    case &#39;+&#39;:&#xA;                        strcpy(op[p++], &amp;quot;+&amp;quot;);&#xA;                        break;&#xA;                    case &#39;-&#39;:&#xA;                        strcpy(op[p++], &amp;quot;-&amp;quot;);&#xA;                        break;&#xA;                    case &#39;*&#39;:&#xA;                        strcpy(op[p++], &amp;quot;*&amp;quot;);&#xA;                        break;&#xA;                    case &#39;/&#39;:&#xA;                        strcpy(op[p++], &amp;quot;/&amp;quot;);&#xA;                        break;&#xA;                    case &#39;%&#39;:&#xA;                        strcpy(op[p++], &amp;quot;%&amp;quot;);&#xA;                        break;&#xA;                    case &#39;=&#39;:&#xA;                        strcpy(op[p++], &amp;quot;=&amp;quot;);&#xA;                        break;&#xA;                }&#xA;&#xA;                if (ch == &#39; &#39; || ch == &#39;\n&#39; || ch == &#39;=&#39;) {&#xA;                    j--;&#xA;                    break;&#xA;                }&#xA;&#xA;                if (ch == &#39;;&#39; || ch == &#39;(&#39; || ch == &#39;)&#39; || ch == &#39;,&#39;) {&#xA;                    j--;&#xA;                    break;&#xA;                }&#xA;&#xA;            }&#xA;&#xA;            str[j] = &#39;\0&#39;;&#xA;&#xA;            strcpy(words[w++], str);&#xA;&#xA;            if (ch == &#39;(&#39;)&#xA;                strcpy(words[w++], &amp;quot;(&amp;quot;);&#xA;            if (ch == &#39;;&#39;)&#xA;                strcpy(words[w++], &amp;quot;;&amp;quot;);&#xA;            if (ch == &#39;)&#39;)&#xA;                strcpy(words[w++], &amp;quot;)&amp;quot;);&#xA;            if (ch == &#39;=&#39;)&#xA;                strcpy(words[w++], &amp;quot;=&amp;quot;);&#xA;            if (ch == &#39;,&#39;)&#xA;                strcpy(words[w++], &amp;quot;,&amp;quot;);&#xA;&#xA;            j = 0;&#xA;        } while (ch != EOF);&#xA;    }&#xA;&#xA;    for (i = 0; i &amp;lt; w; i++) { //1&#xA;        if ((!strcmp(words[i], &amp;quot;for&amp;quot;)) || (!strcmp(words[i], &amp;quot;if&amp;quot;))) {&#xA;            strcpy(key[k++], words[i]);&#xA;        }&#xA;        if ((!strcmp(words[i], &amp;quot;void&amp;quot;)) || (!strcmp(words[i], &amp;quot;else&amp;quot;))) {&#xA;            strcpy(key[k++], words[i]);&#xA;        }&#xA;        if ((!strcmp(words[i], &amp;quot;char&amp;quot;)) || (!strcmp(words[i], &amp;quot;int&amp;quot;))) {&#xA;            strcpy(key[k++], words[i]);&#xA;            yes = 1;&#xA;            for (j = i + 1; strcmp(words[j], &amp;quot;;&amp;quot;); j++) {&#xA;                if (!strcmp(words[j], &amp;quot;=&amp;quot;)) {&#xA;                    yes = 0;&#xA;                    j++;&#xA;                }&#xA;                if (!strcmp(words[j], &amp;quot;,&amp;quot;)) {&#xA;                    yes = 1;&#xA;                    j++;&#xA;                }&#xA;                if (yes)&#xA;                    strcpy(id[d++], words[j]);&#xA;            }&#xA;        }&#xA;&#xA;        if ((!strcmp(words[i], &amp;quot;float&amp;quot;)) || (!strcmp(words[i], &amp;quot;double&amp;quot;))) {&#xA;            strcpy(key[k++], words[i]);&#xA;            for (j = i + 1; strcmp(words[j], &amp;quot;;&amp;quot;); j++) {&#xA;                if (!strcmp(words[j], &amp;quot;=&amp;quot;)) {&#xA;                    yes = 0;&#xA;                    j++;&#xA;                }&#xA;                if (!strcmp(words[j], &amp;quot;,&amp;quot;)) {&#xA;                    yes = 1;&#xA;                    j++;&#xA;                }&#xA;                if (yes)&#xA;                    strcpy(id[d++], words[j]);&#xA;            }&#xA;        }&#xA;&#xA;    } //1&#xA;&#xA;    printf(&amp;quot;\n\n* Identifiers:\n&amp;quot;);&#xA;    for (i = 0; i &amp;lt; d; i++) {&#xA;        printf(&amp;quot;%s  &amp;quot;, id[i]);&#xA;    }&#xA;&#xA;    printf(&amp;quot;\n\n* Keywords:\n&amp;quot;);&#xA;    for (i = 0; i &amp;lt; k; i++) {&#xA;        printf(&amp;quot;%s  &amp;quot;, key[i]);&#xA;    }&#xA;&#xA;    printf(&amp;quot;\n\n* Operators:\n&amp;quot;);&#xA;    for (i = 0; i &amp;lt; p; i++) {&#xA;        printf(&amp;quot;%s  &amp;quot;, op[i]);&#xA;    }&#xA;&#xA;    fclose(fp);&#xA;    getch();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
  </channel>
</rss>
