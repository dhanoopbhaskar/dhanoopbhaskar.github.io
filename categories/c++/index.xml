<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on The Insane Techie</title>
    <link>https://dhanoopbhaskar.github.io/categories/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on The Insane Techie</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 28 Jun 2009 19:17:00 +0530</lastBuildDate>
    <atom:link href="https://dhanoopbhaskar.github.io/categories/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Some Data Structure Programs in C&#43;&#43;</title>
      <link>https://dhanoopbhaskar.github.io/posts/2009-06-28-some-data-structure-programs/</link>
      <pubDate>Sun, 28 Jun 2009 19:17:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2009-06-28-some-data-structure-programs/</guid>
      <description>&lt;h3 id=&#34;1-wap-to-implement-searching-in-a-linked-list&#34;&gt;&#xA;  1. WAP to implement searching in a linked list&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#1-wap-to-implement-searching-in-a-linked-list&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;lt;iostream.h&amp;gt; &#xA;#include&amp;lt;conio.h&amp;gt; &#xA;#include&amp;lt;process.h&amp;gt;&#xA;&#xA;class node {&#xA;    int data;&#xA;    node * next;&#xA;    public:&#xA;    void insert();&#xA;    void search(int);&#xA;    void display();&#xA;};&#xA;&#xA;node *start, *head, *temp;&#xA;&#xA;void node::insert() {&#xA;    head = new node;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the data item: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;head-&amp;gt;data;&#xA;    head-&amp;gt;next = NULL;&#xA;    if (start == NULL) {&#xA;        start = head;&#xA;    } else {&#xA;        temp = start;&#xA;        while (temp-&amp;gt;next != NULL) {&#xA;            temp = temp-&amp;gt;next;&#xA;        }&#xA;        temp-&amp;gt;next = head;&#xA;    }&#xA;}&#xA;&#xA;void node::display() {&#xA;    temp = start;&#xA;    if (start == NULL)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Data list is empty &amp;quot;;&#xA;    else {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n DATA LIST: &amp;quot;;&#xA;        while (temp != NULL) {&#xA;            cout&amp;lt;&amp;lt;temp-&amp;gt;data&amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;            temp = temp-&amp;gt;next;&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;void node::search(int data) {&#xA;    temp = start;&#xA;    if (start == NULL)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Data list is empty &amp;quot;;&#xA;    else {&#xA;        int flag = 0;&#xA;        while (temp != NULL) {&#xA;            if (data == temp-&amp;gt;data) {&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n The data item is present in the list &amp;quot;;&#xA;                flag = 1;&#xA;                break;&#xA;            }&#xA;            temp = temp-&amp;gt;next;&#xA;        }&#xA;        if (flag != 1)&#xA;            cout&amp;lt;&amp;lt;&amp;quot;\n The data item is not found to be present &amp;quot;;&#xA;    }&#xA;}&#xA;&#xA;void main() {&#xA;    int ch, data;&#xA;    node ob;&#xA;    start = NULL;&#xA;    clrscr();&#xA;    do {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n\n ... SINGLY LINKED LIST - SEARCH ... &amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n 1.Insert\n 2.Display\n 3.Search\n 4. Exit\n &amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter your choice: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;&#xA;        switch (ch) {&#xA;            case 1:&#xA;                ob.insert();&#xA;                break;&#xA;            case 2:&#xA;                ob.display();&#xA;                break;&#xA;            case 3:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n Enter the data item to be searched: &amp;quot;;&#xA;                cin&amp;gt;&amp;gt;data;&#xA;                ob.search(data);&#xA;                break;&#xA;            case 4:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n .... Thanking You! ....&amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            default:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n Invalid key-in &amp;quot;;&#xA;        }&#xA;    } while (1);&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;2-wap-to-implement-sorting-in-a-linked-list&#34;&gt;&#xA;  2. WAP to implement sorting in a linked list&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#2-wap-to-implement-sorting-in-a-linked-list&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;lt;iostream.h&amp;gt; &#xA;#include&amp;lt;conio.h&amp;gt; &#xA;#include&amp;lt;process.h&amp;gt;&#xA;&#xA;class node {&#xA;    int data;&#xA;    node * next;&#xA;    public:&#xA;&#x9;void insert();&#xA;    void sort();&#xA;    void display();&#xA;};&#xA;&#xA;node * start, * head, * temp;&#xA;&#xA;void node::insert() {&#xA;    head = new node;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the data item: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;head-&amp;gt;data;&#xA;    head-&amp;gt;next = NULL;&#xA;    if (start == NULL) {&#xA;        start = head;&#xA;    } else {&#xA;        temp = start;&#xA;        while (temp-&amp;gt;next != NULL) {&#xA;            temp = temp-&amp;gt;next;&#xA;        }&#xA;        temp-&amp;gt;next = head;&#xA;    }&#xA;}&#xA;&#xA;void node::display() {&#xA;    temp = start;&#xA;    if (start == NULL)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Data list is empty &amp;quot;;&#xA;    else {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n DATA LIST: &amp;quot;;&#xA;        while (temp != NULL) {&#xA;            cout&amp;lt;&amp;lt;temp-&amp;gt;data&amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;            temp = temp-&amp;gt;next;&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;void node::sort() {&#xA;    if (start == NULL)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Data list is empty &amp;quot;;&#xA;    else {&#xA;        node * t1, * t2, * temp;&#xA;        for (t1 = start; t1 != NULL; t1 = t1-&amp;gt;next) {&#xA;            for (t2 = t1-&amp;gt;next; t2 != NULL; t2 = t2-&amp;gt;next) {&#xA;                if (t1-&amp;gt;data &amp;gt; t2-&amp;gt;data) {&#xA;                    temp-&amp;gt;data = t1-&amp;gt;data;&#xA;                    t1-&amp;gt;data = t2-&amp;gt;data;&#xA;                    t2-&amp;gt;data = temp-&amp;gt;data;&#xA;                }&#xA;            }&#xA;        }&#xA;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n List is sorted &amp;quot;;&#xA;    }&#xA;}&#xA;&#xA;void main() {&#xA;    int ch, data;&#xA;    node ob;&#xA;    start = NULL;&#xA;    clrscr();&#xA;    do {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n\n ... SINGLY LINKED LIST - SORT ... &amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n 1.Insert\n 2.Display\n 3.Sort\n 4. Exit\n &amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter your choice: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;&#xA;        switch (ch) {&#xA;            case 1:&#xA;                ob.insert();&#xA;                break;&#xA;            case 2:&#xA;                ob.display();&#xA;                break;&#xA;            case 3:&#xA;                ob.sort();&#xA;                break;&#xA;            case 4:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n .... Thanking You! ....&amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            default:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n Invalid key-in &amp;quot;;&#xA;        }&#xA;    } while (1);&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;3wap-to-reverse-a-linked-list-start-pointer-is-given&#34;&gt;&#xA;  3.WAP to reverse a linked list, start pointer is given&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#3wap-to-reverse-a-linked-list-start-pointer-is-given&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;lt;iostream.h&amp;gt; &#xA;#include&amp;lt;conio.h&amp;gt; &#xA;#include&amp;lt;process.h&amp;gt;&#xA;&#xA;class node {&#xA;    int data;&#xA;    node * next;&#xA;    public:&#xA;    void insert();&#xA;    void reverse(node * );&#xA;    void display();&#xA;};&#xA;&#xA;node * start, * head, * temp;&#xA;&#xA;void node::insert() {&#xA;    head = new node;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the data item: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;head-&amp;gt;data;&#xA;    head-&amp;gt;next = NULL;&#xA;    if (start == NULL) {&#xA;        start = head;&#xA;    } else {&#xA;        temp = start;&#xA;        while (temp-&amp;gt;next != NULL) {&#xA;            temp = temp-&amp;gt;next;&#xA;        }&#xA;        temp-&amp;gt;next = head;&#xA;    }&#xA;}&#xA;&#xA;void node::display() {&#xA;    temp = start;&#xA;    if (start == NULL)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Data list is empty &amp;quot;;&#xA;    else {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n DATA LIST: &amp;quot;;&#xA;        while (temp != NULL) {&#xA;            cout&amp;lt;&amp;lt;temp-&amp;gt;data&amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;            temp = temp-&amp;gt;next;&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;void node::reverse(node * start) {&#xA;    if (start == NULL)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Data list is empty &amp;quot;;&#xA;    else {&#xA;        int a[50], i = 0, n;&#xA;        temp = start;&#xA;        //storing the data items to an array&#xA;        while (temp != NULL) {&#xA;            a[i] = temp-&amp;gt;data;&#xA;            temp = temp-&amp;gt;next;&#xA;            n = i++;&#xA;        }&#xA;        i = n;&#xA;        temp = start;&#xA;        //forming linked list in reversed order&#xA;        while (temp != NULL) {&#xA;            temp-&amp;gt;data = a[i];&#xA;            temp = temp-&amp;gt;next;&#xA;            i--;&#xA;        }&#xA;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n List is reversed &amp;quot;;&#xA;    }&#xA;}&#xA;&#xA;void main() {&#xA;    int ch, data;&#xA;    node ob;&#xA;    start = NULL;&#xA;    clrscr();&#xA;    do {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n\n ... SINGLY LINKED LIST - REVERSE ... &amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n 1.Insert\n 2.Display\n 3.Reverse\n 4. Exit\n &amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter your choice: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;&#xA;        switch (ch) {&#xA;            case 1:&#xA;                ob.insert();&#xA;                break;&#xA;            case 2:&#xA;                ob.display();&#xA;                break;&#xA;            case 3:&#xA;                ob.reverse(start);&#xA;                break;&#xA;            case 4:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n .... Thanking You! ....&amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            default:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n Invalid key-in &amp;quot;;&#xA;        }&#xA;    } while (1);&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;4-wap-to-reverse-a-linked-list-within-the-list&#34;&gt;&#xA;  4. WAP to reverse a linked list within the list&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#4-wap-to-reverse-a-linked-list-within-the-list&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;lt;iostream.h&amp;gt; &#xA;#include&amp;lt;conio.h&amp;gt; &#xA;#include&amp;lt;process.h&amp;gt;&#xA;&#xA;class node {&#xA;    int data;&#xA;    node * next;&#xA;    node * prev;&#xA;    public:&#xA;    void insert();&#xA;    void reverse();&#xA;    void display();&#xA;};&#xA;&#xA;node * start, * head, * temp, * last;&#xA;&#xA;void node::insert() {&#xA;    head = new node;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the data item: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;head-&amp;gt;data;&#xA;    head-&amp;gt;next = head-&amp;gt;prev = NULL;&#xA;    if (start == NULL) {&#xA;        start = head;&#xA;        last = head;&#xA;    } else {&#xA;        last-&amp;gt;next = head;&#xA;        head-&amp;gt;prev = last;&#xA;        last = head;&#xA;    }&#xA;}&#xA;&#xA;void node::display() {&#xA;    temp = start;&#xA;    if (start == NULL)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Data list is empty &amp;quot;;&#xA;    else {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n DATA LIST: &amp;quot;;&#xA;        while (temp != NULL) {&#xA;            cout&amp;lt;&amp;lt;temp-&amp;gt;data&amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;            temp = temp-&amp;gt;next;&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;void node::reverse() {&#xA;    if (start == NULL)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Data list is empty &amp;quot;;&#xA;    else {&#xA;        int len = 0, lenM = 0;&#xA;        temp = start;&#xA;        while (temp != NULL) {&#xA;            len++;&#xA;            temp = temp-&amp;gt;next;&#xA;        }&#xA;        node * t1, * t2, * temp;&#xA;        t1 = start;&#xA;        t2 = last;&#xA;        while (lenM &amp;lt; len / 2) {&#xA;            temp-&amp;gt;data = t1-&amp;gt;data;&#xA;            t1-&amp;gt;data = t2-&amp;gt;data;&#xA;            t2-&amp;gt;data = temp-&amp;gt;data;&#xA;            t1 = t1-&amp;gt;next;&#xA;            t2 = t2-&amp;gt;prev;&#xA;            lenM++;&#xA;        }&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n List is reversed &amp;quot;;&#xA;    }&#xA;}&#xA;&#xA;void main() {&#xA;    int ch, data;&#xA;    node ob;&#xA;    start = last = NULL;&#xA;    clrscr();&#xA;    do {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n\n ... SINGLY LINKED LIST - REVERSE WITHIN THE LIST ... &amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n 1.Insert\n 2.Display\n 3.Reverse\n 4.Exit\n &amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter your choice: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;&#xA;        switch (ch) {&#xA;            case 1:&#xA;                ob.insert();&#xA;                break;&#xA;            case 2:&#xA;                ob.display();&#xA;                break;&#xA;            case 3:&#xA;                ob.reverse();&#xA;                break;&#xA;            case 4:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n .... Thanking You! ....&amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            default:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n Invalid key-in &amp;quot;;&#xA;        }&#xA;    } while (1);&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;5-wap-to-remove-first--last-occurence-of-an-element-in-a-linked-list&#34;&gt;&#xA;  5. WAP to remove first &amp;amp; last occurence of an element in a linked list&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#5-wap-to-remove-first--last-occurence-of-an-element-in-a-linked-list&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;lt;iostream.h&amp;gt; &#xA;#include&amp;lt;conio.h&amp;gt; &#xA;#include&amp;lt;process.h&amp;gt;&#xA;&#xA;class node {&#xA;    int data;&#xA;    node * next;&#xA;    public:&#xA;    void insert();&#xA;    void delet(int);&#xA;    void display();&#xA;};&#xA;&#xA;node * start, * head, * temp;&#xA;&#xA;void node::insert() {&#xA;    head = new node;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the data item: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;head-&amp;gt;data;&#xA;    head-&amp;gt;next = NULL;&#xA;    if (start == NULL) {&#xA;        start = head;&#xA;    } else {&#xA;        temp = start;&#xA;        while (temp-&amp;gt;next != NULL) {&#xA;            temp = temp-&amp;gt;next;&#xA;        }&#xA;        temp-&amp;gt;next = head;&#xA;    }&#xA;}&#xA;&#xA;void node::display() {&#xA;    temp = start;&#xA;    if (start == NULL)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Data list is empty &amp;quot;;&#xA;    else {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n DATA LIST: &amp;quot;;&#xA;        while (temp != NULL) {&#xA;            cout&amp;lt;&amp;lt;temp-&amp;gt;data&amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;            temp = temp-&amp;gt;next;&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;void node::delet(int data) {&#xA;    temp = start;&#xA;    if (start == NULL)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Data list is empty &amp;quot;;&#xA;    else {&#xA;        //counting no. of occurence&#xA;        int count = 0;&#xA;        while (temp != NULL) {&#xA;            if (data == temp-&amp;gt;data) {&#xA;                count++;&#xA;            }&#xA;            temp = temp-&amp;gt;next;&#xA;        }&#xA;&#xA;        //storing the position of occurence into an array&#xA;        int a[50], i = 1, n, p = 0;&#xA;        int pos[20];&#xA;        temp = start;&#xA;        while (temp != NULL) {&#xA;            if (data == temp-&amp;gt;data &amp;amp;&amp;amp; i &amp;lt;= count) {&#xA;                pos[i] = p;&#xA;                i++;&#xA;            }&#xA;            temp = temp-&amp;gt;next;&#xA;            p++;&#xA;        }&#xA;&#xA;        //deleting first and last occurence&#xA;        int fst = pos[1];&#xA;        int lst = pos[count];&#xA;        node * t;&#xA;        temp = start;&#xA;        p = 0;&#xA;        while (temp != NULL) {&#xA;            if (data == temp-&amp;gt;data &amp;amp;&amp;amp; (fst == p || lst == p)) {&#xA;                if (temp == start) {&#xA;                    start = temp-&amp;gt;next;&#xA;                } else {&#xA;                    t-&amp;gt;next = temp-&amp;gt;next;&#xA;                }&#xA;            }&#xA;            t = temp;&#xA;            temp = temp-&amp;gt;next;&#xA;            p++;&#xA;        }&#xA;&#xA;    }&#xA;}&#xA;&#xA;void main() {&#xA;    int ch, data;&#xA;    node ob;&#xA;    start = NULL;&#xA;    clrscr();&#xA;    do {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n\n ... SINGLY LINKED LIST - DELETE ... &amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n 1.Insert\n 2.Display\n 3.Delete\n 4.Exit\n &amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter your choice: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;&#xA;        switch (ch) {&#xA;            case 1:&#xA;                ob.insert();&#xA;                break;&#xA;            case 2:&#xA;                ob.display();&#xA;                break;&#xA;            case 3:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n Enter the data item to be deleted: &amp;quot;;&#xA;                cin&amp;gt;&amp;gt;data;&#xA;                ob.delet(data);&#xA;                break;&#xA;            case 4:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n .... Thanking You! ....&amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            default:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n Invalid key-in &amp;quot;;&#xA;        }&#xA;    } while (1);&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;6wap-to-create-a-tree-from-inorder--preorder-traversal-sequences&#34;&gt;&#xA;  6.WAP to create a tree from inorder &amp;amp; preorder traversal sequences&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#6wap-to-create-a-tree-from-inorder--preorder-traversal-sequences&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;lt;iostream.h&amp;gt; &#xA;#include&amp;lt;conio.h&amp;gt; &#xA;#include&amp;lt;process.h&amp;gt;&#xA;&#xA;char inorder[20];&#xA;struct node {&#xA;    char data;&#xA;    int num;&#xA;    node * left;&#xA;    node * right;&#xA;};&#xA;&#xA;node * root;&#xA;&#xA;class bst {&#xA;    public:&#xA;    bst() {&#xA;        root = NULL;&#xA;    }&#xA;    node * insert(node * , int, char);&#xA;    node * create(char[]);&#xA;    void postorder(node * );&#xA;&#xA;};&#xA;&#xA;int pos(char a) {&#xA;    int p;&#xA;    for (int i = 0; inorder[i] != &#39;\0&#39;; i++) {&#xA;        if (inorder[i] == a) {&#xA;            p = i;&#xA;            break;&#xA;        }&#xA;    }&#xA;    return p;&#xA;}&#xA;&#xA;&#xA;node * bst::insert(node * root, int num, char data) {&#xA;    if (root == NULL) {&#xA;        root = new node;&#xA;        root-&amp;gt;data = data;&#xA;        root-&amp;gt;num = num;&#xA;        root-&amp;gt;left = root-&amp;gt;right = NULL;&#xA;    } else if (num &amp;lt; root-&amp;gt;num)&#xA;        root-&amp;gt;left = insert(root-&amp;gt;left, num, data);&#xA;    else&#xA;        root-&amp;gt;right = insert(root-&amp;gt;right, num, data);&#xA;&#xA;    return root;&#xA;&#xA;}&#xA;&#xA;node * bst::create(char pre[]) {&#xA;    const len = strlen(pre);&#xA;    char data;&#xA;    int num;&#xA;    for (int i = 0; i &amp;lt; len; i++) {&#xA;        data = pre[i];&#xA;        num = pos(pre[i]);&#xA;        root = this-&amp;gt;insert(root, num, data);&#xA;    }&#xA;    return root;&#xA;}&#xA;&#xA;&#xA;void bst::postorder(node * root) {&#xA;    if (root != NULL) {&#xA;        postorder(root-&amp;gt;left);&#xA;        postorder(root-&amp;gt;right);&#xA;        cout&amp;lt;&amp;lt;root-&amp;gt;data&amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;    }&#xA;}&#xA;&#xA;&#xA;void main() {&#xA;    clrscr();&#xA;    bst ob;&#xA;    char ino[25], pre[25];&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the inorder sequence: &amp;quot;;&#xA;    gets(ino);&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the preorder sequence: &amp;quot;;&#xA;    gets(pre);&#xA;    strcpy(inorder, ino);&#xA;    root = ob.create(pre);&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n The tree is created and the post order sequence is: &amp;quot;;&#xA;    ob.postorder(root);&#xA;    getch();&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;7wap-to-exchange-right-and-left-subtree-of-each-node-or-to-produce-mirror-image-of-the-tree&#34;&gt;&#xA;  7.WAP to exchange right and left subtree of each node OR to produce mirror image of the tree&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#7wap-to-exchange-right-and-left-subtree-of-each-node-or-to-produce-mirror-image-of-the-tree&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;lt;iostream.h&amp;gt; &#xA;#include&amp;lt;conio.h&amp;gt; &#xA;#include&amp;lt;process.h&amp;gt;&#xA;&#xA;struct node {&#xA;    char data;&#xA;    node * lchild, * rchild;&#xA;};&#xA;&#xA;node * head;&#xA;&#xA;class tree {&#xA;    node * root;&#xA;    public:&#xA;    tree() {&#xA;        root = NULL;&#xA;    }&#xA;    node * read();&#xA;    node * makenode(char);&#xA;    void createtree(node * );&#xA;    void inorder(node * );&#xA;    void preorder(node * );&#xA;    void postorder(node * );&#xA;    void exchange(node * );&#xA;};&#xA;&#xA;node * tree::read() {&#xA;    char item;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter data: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;item;&#xA;    root = makenode(item);&#xA;    createtree(root);&#xA;    return root;&#xA;}&#xA;&#xA;node * tree::makenode(char x) {&#xA;    head = new node;&#xA;    head-&amp;gt;data = x;&#xA;    head-&amp;gt;lchild = head-&amp;gt;rchild = NULL;&#xA;    return head;&#xA;}&#xA;&#xA;void tree::createtree(node * root) {&#xA;    int ch;&#xA;    char item;&#xA;    if (root != NULL) {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Create left child for &amp;quot;&amp;lt;&amp;lt;root-&amp;gt;data&amp;lt;&amp;lt;&amp;quot; (if so press \&amp;quot;1\&amp;quot;)&amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;        if (ch == 1) {&#xA;            cout&amp;lt;&amp;lt;&amp;quot;\n Enter data: &amp;quot;;&#xA;            cin&amp;gt;&amp;gt;item;&#xA;            root-&amp;gt;lchild = makenode(item);&#xA;            createtree(root-&amp;gt;lchild);&#xA;        }&#xA;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Create right child for &amp;quot;&amp;lt;&amp;lt;root-&amp;gt;data&amp;lt;&amp;lt;&amp;quot; (if so press \&amp;quot;1\&amp;quot;)&amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;        if (ch == 1) {&#xA;            cout&amp;lt;&amp;lt;&amp;quot;\n Enter data: &amp;quot;;&#xA;            cin&amp;gt;&amp;gt;item;&#xA;            root-&amp;gt;rchild = makenode(item);&#xA;            createtree(root-&amp;gt;rchild);&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;void tree::inorder(node * root) {&#xA;    if (root != NULL) {&#xA;        inorder(root-&amp;gt;lchild);&#xA;        cout&amp;lt;&amp;lt;root-&amp;gt;data&amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;        inorder(root-&amp;gt;rchild);&#xA;    }&#xA;}&#xA;&#xA;void tree::preorder(node * root) {&#xA;    if (root != NULL) {&#xA;        cout&amp;lt;&amp;lt;root-&amp;gt;data&amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;        preorder(root-&amp;gt;lchild);&#xA;        preorder(root-&amp;gt;rchild);&#xA;    }&#xA;}&#xA;&#xA;void tree::postorder(node * root) {&#xA;    if (root != NULL) {&#xA;        postorder(root-&amp;gt;lchild);&#xA;        postorder(root-&amp;gt;rchild);&#xA;        cout&amp;lt;&amp;lt;root-&amp;gt;data&amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;    }&#xA;}&#xA;&#xA;void tree::exchange(node * root) {&#xA;    if (root != NULL) {&#xA;        exchange(root-&amp;gt;lchild);&#xA;        exchange(root-&amp;gt;rchild);&#xA;        node * temp;&#xA;        temp = root-&amp;gt;lchild;&#xA;        root-&amp;gt;lchild = root-&amp;gt;rchild;&#xA;        root-&amp;gt;rchild = temp;&#xA;    }&#xA;}&#xA;&#xA;void main() {&#xA;    tree ob;&#xA;    node * root;&#xA;    int ch;&#xA;    clrscr();&#xA;    do {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n.... BINARY TREE ....\n\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n1.Creation\n2.Inorder Traversal\n3.Preorder Traversal&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n4.Postorder Traversal\n5.Exchange\n6.Exit&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\t Enter your choice: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;        switch (ch) {&#xA;            case 1:&#xA;                root = ob.read();&#xA;                break;&#xA;            case 2:&#xA;                ob.inorder(root);&#xA;                break;&#xA;            case 3:&#xA;                ob.preorder(root);&#xA;                break;&#xA;            case 4:&#xA;                ob.postorder(root);&#xA;                break;&#xA;            case 5:&#xA;                ob.exchange(root);&#xA;                break;&#xA;            case 6:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\n\t... Thanking You ...&amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            default:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n Invalid key-in &amp;quot;;&#xA;        }&#xA;&#xA;    } while (1);&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>C&#43;&#43; - Scientific Calculator</title>
      <link>https://dhanoopbhaskar.github.io/posts/2009-04-30-c-scientific-calculator/</link>
      <pubDate>Thu, 30 Apr 2009 18:54:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2009-04-30-c-scientific-calculator/</guid>
      <description>&lt;pre&gt;&lt;code&gt;#include&amp;lt;iostream.h&amp;gt;&#xA;#include&amp;lt;conio.h&amp;gt;&#xA;#include&amp;lt;math.h&amp;gt;&#xA;#include&amp;lt;stdio.h&amp;gt;&#xA;#include&amp;lt;process.h&amp;gt;&#xA;#include&amp;lt;graphics.h&amp;gt;&#xA;#include&amp;lt;ctype.h&amp;gt;&#xA;&#xA;double rfact(double);&#xA;void main() {&#xA;    int ch;&#xA;    int k, n, choice;&#xA;    float sinx, cosx, tanx, cotx, secx, cosecx;&#xA;    float x, j, i;&#xA;    clrscr();&#xA;    cin&amp;gt;&amp;gt;ch;&#xA;    if (ch == 4444) {&#xA;        int gdriver = DETECT, gmode, errorcode;&#xA;        initgraph( &amp;amp;gdriver, &amp;amp;gmode, &amp;quot;e:\\tc\\bgi&amp;quot;);&#xA;        setbkcolor(LIGHTRED);&#xA;        settextstyle(7, 0, 9);&#xA;        outtextxy(45, 160, &amp;quot;..WELCOME!..&amp;quot;); //page1&#xA;        getch();&#xA;        closegraph();&#xA;    }&#xA;    getch();&#xA;    clrscr();&#xA;    textcolor(YELLOW + 128);&#xA;    gotoxy(30, 12);&#xA;    cprintf(&amp;quot;COMPUTER EXHIBITION\n\r&amp;quot;); //page2&#xA;    textcolor(GREEN);&#xA;    gotoxy(30, 14);&#xA;    cprintf(&amp;quot;  Dhanoop Bhaskar \n\r&amp;quot;);&#xA;    textcolor(BLUE);&#xA;    gotoxy(30, 15);&#xA;    cprintf(&amp;quot;      C2 Batch\n\r&amp;quot;);&#xA;    textcolor(CYAN);&#xA;    gotoxy(30, 16);&#xA;    cprintf(&amp;quot;   CARDINAL .HSS\n\r &amp;quot;);&#xA;    textcolor(RED + 128);&#xA;    gotoxy(33, 19);&#xA;    cprintf(&amp;quot;INSTRUCTIONS:\n\r&amp;quot;);&#xA;    textcolor(YELLOW);&#xA;    gotoxy(22, 20);&#xA;    cprintf(&amp;quot;\(The Scientific Calculator enables to\n\r&amp;quot;);&#xA;    gotoxy(22, 21);&#xA;    cprintf(&amp;quot;Find the values of trigonometric funtions\)\n\r &amp;quot;);&#xA;    textcolor(LIGHTGREEN);&#xA;    gotoxy(22, 22);&#xA;    cprintf(&amp;quot;:Please try to give appropiate values only\n\r &amp;quot;);&#xA;    gotoxy(22, 23);&#xA;    cprintf(&amp;quot;:Follow the instructions given in brackets\n\r&amp;quot;);&#xA;    gotoxy(22, 24);&#xA;    cprintf(&amp;quot;:Donot attempt malpractices\n\r&amp;quot;);&#xA;    gotoxy(22, 25);&#xA;    cprintf(&amp;quot;:Use only numerical values\n\r&amp;quot;);&#xA;    getch();&#xA;    do {&#xA;        clrscr();&#xA;        gotoxy(30, 9);&#xA;        textcolor(YELLOW + 128);&#xA;        textbackground(RED);&#xA;        cprintf(&amp;quot; SCIENTIFIC CALCULATOR \n\r&amp;quot;); //page3&#xA;        textcolor(YELLOW);&#xA;        textbackground(BLACK);&#xA;        gotoxy(30, 13);&#xA;        cprintf(&amp;quot;       MAIN MENU       \n\r&amp;quot;);&#xA;        gotoxy(30, 15);&#xA;        cprintf(&amp;quot;1.SINE:               \n\r&amp;quot;);&#xA;        gotoxy(30, 16);&#xA;        cprintf(&amp;quot;2.COSINE:             \n\r&amp;quot;);&#xA;        gotoxy(30, 17);&#xA;        cprintf(&amp;quot;3.TANGENT:            \n\r&amp;quot;);&#xA;        gotoxy(30, 18);&#xA;        cprintf(&amp;quot;4.COTANGENT:          \n\r&amp;quot;);&#xA;        gotoxy(30, 19);&#xA;        cprintf(&amp;quot;5.SECANT:             \n\r&amp;quot;);&#xA;        gotoxy(30, 20);&#xA;        cprintf(&amp;quot;6.COSECANT:           \n\r&amp;quot;);&#xA;        gotoxy(30, 21);&#xA;        cprintf(&amp;quot;7.EXIT:               \n\r&amp;quot;);&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter your choice &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;choice;&#xA;        if (choice &amp;lt; 7) {&#xA;            cout&amp;lt;&amp;lt;&amp;quot;\n Enter the angle in degrees &amp;quot;;&#xA;            cout&amp;lt;&amp;lt;&amp;quot;\n (Please enter angle between -360&amp;amp;+360 ) &amp;quot;;&#xA;            cin&amp;gt;&amp;gt;i;&#xA;            if (i &amp;gt; 360 || i &amp;lt; -360) {&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n Sorry!!!!... cannot find the values at present &amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            }&#xA;            x = i * 0.01745;&#xA;        }&#xA;&#xA;        switch (choice) {&#xA;            case 1:&#xA;                sinx = 0; //sine&#xA;                for (j = 1, k = 1; j &amp;lt; 50; j += 2, k++) {&#xA;                    if (k % 2 == 0)&#xA;                        n = -1;&#xA;                    else&#xA;                        n = 1;&#xA;                    sinx = (sinx) + ((n * pow(x, j)) / (rfact(j)));&#xA;                }&#xA;                if (i == 0 || i == 180 || i == 360)&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n sinx=&amp;quot; &amp;lt;&amp;lt;0;&#xA;                else if (i == 90)&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n sinx=&amp;quot; &amp;lt;&amp;lt;1;&#xA;                else if (i == 270)&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n sinx=&amp;quot; &amp;lt;&amp;lt;-1;&#xA;                else&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n sin x=&amp;quot; &amp;lt;&amp;lt;sinx;&#xA;                getch();&#xA;                break;&#xA;            case 2:&#xA;                cosx = 1; //cosine&#xA;                for (j = 2, k = 1; j &amp;lt; 50; j += 2, k++) {&#xA;                    if (k % 2 == 0)&#xA;                        n = 1;&#xA;                    else&#xA;                        n = -1;&#xA;                    cosx = (cosx) + ((n * pow(x, j)) / (rfact(j)));&#xA;                }&#xA;                if (i == 0 || i == 360)&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n cosx=&amp;quot; &amp;lt;&amp;lt;1;&#xA;                else if (i == 180)&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n cosx=&amp;quot; &amp;lt;&amp;lt;-1;&#xA;                else if (i == 90 || i == 270)&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n cosx=&amp;quot; &amp;lt;&amp;lt;0;&#xA;                else&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n cos x=&amp;quot; &amp;lt;&amp;lt;cosx;&#xA;                getch();&#xA;                break;&#xA;            case 3:&#xA;                sinx = 0; //tangent&#xA;                for (j = 1, k = 1; j &amp;lt; 50; j += 2, k++) {&#xA;                    if (k % 2 == 0)&#xA;                        n = -1;&#xA;                    else&#xA;                        n = 1;&#xA;                    sinx = (sinx) + ((n * pow(x, j)) / (rfact(j)));&#xA;                }&#xA;                cosx = 1;&#xA;                for (j = 2, k = 1; j &amp;lt; 50; j += 2, k++) {&#xA;                    if (k % 2 == 0)&#xA;                        n = 1;&#xA;                    else&#xA;                        n = -1;&#xA;                    cosx = (cosx) + ((n * pow(x, j)) / (rfact(j)));&#xA;                }&#xA;                if (i == 90 || i == 270 || cosx == 0) {&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n tan x is not defined &amp;quot;;&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n\( cosx=&amp;quot; &amp;lt;&amp;lt;0 &amp;lt;&amp;lt;&amp;quot; appro\)&amp;quot;;&#xA;                } else if (i == 0 || i == 180 || i == 360)&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n tanx=&amp;quot; &amp;lt;&amp;lt;0;&#xA;                else {&#xA;                    tanx = sinx / cosx;&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n tan x=&amp;quot; &amp;lt;&amp;lt;tanx;&#xA;                    getch();&#xA;                }&#xA;                break;&#xA;            case 4:&#xA;                sinx = 0; //cotangent&#xA;                for (j = 1, k = 1; j &amp;lt; 50; j += 2, k++) {&#xA;                    if (k % 2 == 0)&#xA;                        n = -1;&#xA;                    else&#xA;                        n = 1;&#xA;                    sinx = (sinx) + ((n * pow(x, j)) / (rfact(j)));&#xA;                }&#xA;                cosx = 1;&#xA;                for (j = 2, k = 1; j &amp;lt; 50; j += 2, k++) {&#xA;                    if (k % 2 == 0)&#xA;                        n = 1;&#xA;                    else&#xA;                        n = -1;&#xA;                    cosx = (cosx) + ((n * pow(x, j)) / (rfact(j)));&#xA;                }&#xA;                if (i == 0 || i == 90 || i == 180 || i == 270 || i == 360 || sinx == 0) {&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n cot x is not defined &amp;quot;;&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n\( sinx=&amp;quot; &amp;lt;&amp;lt;0 &amp;lt;&amp;lt;&amp;quot; appro\)&amp;quot;;&#xA;                } else {&#xA;                    cotx = cosx / sinx;&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n cot x=&amp;quot; &amp;lt;&amp;lt;cotx;&#xA;                    getch();&#xA;                }&#xA;                break;&#xA;            case 5:&#xA;                cosx = 1; //secant&#xA;                for (j = 2, k = 1; j &amp;lt; 50; j += 2, k++) {&#xA;                    if (k % 2 == 0)&#xA;                        n = 1;&#xA;                    else&#xA;                        n = -1;&#xA;                    cosx = (cosx) + ((n * pow(x, j)) / (rfact(j)));&#xA;                }&#xA;                if (i == 90 || i == 270 || cosx == 0) {&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n sec x is not defined &amp;quot;;&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n\( cosx=&amp;quot; &amp;lt;&amp;lt;0 &amp;lt;&amp;lt;&amp;quot; appro\)&amp;quot;;&#xA;                } else if (i == 0 || i == 360)&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n secx=&amp;quot; &amp;lt;&amp;lt;1;&#xA;                else if (i == 180)&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n secx=&amp;quot; &amp;lt;&amp;lt;-1;&#xA;                else {&#xA;                    secx = 1 / cosx;&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n sec x=&amp;quot; &amp;lt;&amp;lt;secx;&#xA;                    getch();&#xA;                }&#xA;                break;&#xA;            case 6:&#xA;                sinx = 0; //cosecant&#xA;                for (j = 1, k = 1; j &amp;lt; 50; j += 2, k++) {&#xA;                    if (k % 2 == 0)&#xA;                        n = -1;&#xA;                    else&#xA;                        n = 1;&#xA;                    sinx = (sinx) + ((n * pow(x, j)) / (rfact(j)));&#xA;                }&#xA;                if (i == 0 || i == 180 || i == 360 || sinx == 0) {&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n cosec x is not defined &amp;quot;;&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n\( sinx=&amp;quot; &amp;lt;&amp;lt;0 &amp;lt;&amp;lt;&amp;quot; appro\)&amp;quot;;&#xA;                } else if (i == 90)&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n cosecx=&amp;quot; &amp;lt;&amp;lt;1;&#xA;                else if (i == 270)&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n cosecx=&amp;quot; &amp;lt;&amp;lt;-1;&#xA;                else {&#xA;                    cosecx = 1 / sinx;&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n cosec x=&amp;quot; &amp;lt;&amp;lt;cosecx;&#xA;                    getch();&#xA;                }&#xA;                break;&#xA;            case 7:&#xA;                exit(0);&#xA;            default:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n Invalid choice &amp;quot;;&#xA;        }&#xA;        getch();&#xA;    } while (1);&#xA;}&#xA;&#xA;double rfact(double d) {&#xA;    if (d &amp;lt; 2)&#xA;        return (1);&#xA;    else&#xA;        return (d * rfact(d - 1));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>DATA STRUCTURE PROGRAMS IN C&#43;&#43;</title>
      <link>https://dhanoopbhaskar.github.io/posts/2009-04-23-data-structure-programs-in-c/</link>
      <pubDate>Thu, 23 Apr 2009 19:10:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2009-04-23-data-structure-programs-in-c/</guid>
      <description>&lt;h3 id=&#34;write-a-c-program-to-find-the-sparse-of-a-matrix&#34;&gt;&#xA;  Write a C++ program to find the sparse of a matrix&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-find-the-sparse-of-a-matrix&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;lt;iostream.h&amp;gt;&#xA;#include&amp;lt;conio.h&amp;gt;&#xA;&#xA;void main() {&#xA;    int a[50][50], sp[50][50], i, j, k = 0, m, n;&#xA;    clrscr();&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the order of matrix: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;m&amp;gt;&amp;gt;n;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the elements: &amp;quot;;&#xA;    for (i = 0; i &amp;lt; m; i++) {&#xA;        for (j = 0; j &amp;lt; n; j++) {&#xA;            cin&amp;gt;&amp;gt;a[i][j];&#xA;            if (a[i][j] != 0) {&#xA;                k++;&#xA;                sp[k][0] = i;&#xA;                sp[k][1] = j;&#xA;                sp[k][2] = a[i][j];&#xA;            }&#xA;        }&#xA;    }&#xA;    sp[0][0] = m;&#xA;    sp[0][1] = n;&#xA;    sp[0][2] = k;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n The sparse matrix is:\n&amp;quot;;&#xA;    for (i = 0; i &amp;lt;= k; i++) {&#xA;        for (j = 0; j &amp;lt; 3; j++)&#xA;            cout&amp;lt;&amp;lt;sp[i][j] &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n&amp;quot;;&#xA;    }&#xA;    getch();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;Enter the order of matrix: 3 3  &#xA;  &#xA;Enter the elements:  &#xA;0 1 0  &#xA;2 0 0  &#xA;0 0 3  &#xA;  &#xA;The sparse matrix is:  &#xA;3 3 3  &#xA;0 1 1  &#xA;1 0 2  &#xA;2 2 3  &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-find-the-transpose-of-a-matrix-using-the-given-sparse-matrix&#34;&gt;&#xA;  Write a C++ program to find the transpose of a matrix using the given sparse matrix&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-find-the-transpose-of-a-matrix-using-the-given-sparse-matrix&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;lt;iostream.h&amp;gt;&#xA;#include&amp;lt;conio.h&amp;gt;&#xA;void main() {&#xA;    int a[50][50], sp[50][50], i, j, k = 0, m, n, tsp[50][50], p = 0;&#xA;    clrscr();&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the order of matrix: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;m&amp;gt;&amp;gt;n;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the elements: &amp;quot;;&#xA;    for (i = 0; i &amp;lt; m; i++) {&#xA;        for (j = 0; j &amp;lt; n; j++) {&#xA;            cin&amp;gt;&amp;gt;a[i][j];&#xA;            if (a[i][j] != 0) {&#xA;                k++;&#xA;                sp[k][0] = i;&#xA;                sp[k][1] = j;&#xA;                sp[k][2] = a[i][j];&#xA;            }&#xA;        }&#xA;    }&#xA;    sp[0][0] = m;&#xA;    sp[0][1] = n;&#xA;    sp[0][2] = k;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n The sparse matrix is:\n&amp;quot;;&#xA;    for (i = 0; i &amp;lt;= k; i++) {&#xA;        for (j = 0; j &amp;lt; 3; j++)&#xA;            cout&amp;lt;&amp;lt;sp[i][j] &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n&amp;quot;;&#xA;    }&#xA;    p = 0;&#xA;    for (j = 0; j &amp;lt; n; j++) {&#xA;        for (i = 1; i &amp;lt;= k; i++) {&#xA;            if (sp[i][1] == j) {&#xA;                p++;&#xA;                tsp[p][0] = sp[i][1];&#xA;                tsp[p][1] = sp[i][0];&#xA;                tsp[p][2] = sp[i][2];&#xA;            }&#xA;        }&#xA;    }&#xA;    tsp[0][0] = sp[0][1];&#xA;    tsp[0][1] = sp[0][0];&#xA;    tsp[0][2] = p;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Transpose of sparse \n&amp;quot;;&#xA;    for (i = 0; i &amp;lt;= p; i++) {&#xA;        for (j = 0; j &amp;lt; 3; j++)&#xA;            cout&amp;lt;&amp;lt;tsp[i][j] &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n&amp;quot;;&#xA;    }&#xA;&#xA;    getch();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-1&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-1&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;Enter the order of matrix: 3 3  &#xA;  &#xA;Enter the elements:  &#xA;1 0 0  &#xA;0 0 2  &#xA;0 3 0  &#xA;  &#xA;The sparse matrix is:  &#xA;3 3 3  &#xA;0 0 1  &#xA;1 2 2  &#xA;2 1 3  &#xA;  &#xA;Transpose of sparse  &#xA;3 3 3  &#xA;0 0 1  &#xA;1 2 3  &#xA;2 1 2  &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-find-transpose-of-a-matrix-using-fast-transpose-method&#34;&gt;&#xA;  Write a C++ program to find transpose of a matrix using fast transpose method&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-find-transpose-of-a-matrix-using-fast-transpose-method&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;lt;iostream.h&amp;gt;&#xA;#include&amp;lt;conio.h&amp;gt;&#xA;void main() {&#xA;    int a[50][50], sp[50][50], i, j, k = 0, m, n, t, tsp[50][50];&#xA;    int start[50], size[50];&#xA;    clrscr();&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the order of matrix: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;m&amp;gt;&amp;gt;n;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the elements: &amp;quot;;&#xA;    for (i = 0; i &amp;lt; m; i++) {&#xA;        for (j = 0; j &amp;lt; n; j++) {&#xA;            cin&amp;gt;&amp;gt;a[i][j];&#xA;            if (a[i][j] != 0) {&#xA;                k++;&#xA;                sp[k][0] = i;&#xA;                sp[k][1] = j;&#xA;                sp[k][2] = a[i][j];&#xA;            }&#xA;        }&#xA;    }&#xA;    sp[0][0] = m;&#xA;    sp[0][1] = n;&#xA;    sp[0][2] = k;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n The sparse matrix is:\n&amp;quot;;&#xA;    for (i = 0; i &amp;lt;= k; i++) {&#xA;        for (j = 0; j &amp;lt; 3; j++)&#xA;            cout&amp;lt;&amp;lt;sp[i][j] &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n&amp;quot;;&#xA;    }&#xA;    for (i = 0; i &amp;lt; n; i++)&#xA;        size[i] = 0;&#xA;&#xA;    for (i = 1; i &amp;lt;= k; i++) {&#xA;        t = sp[i][1];&#xA;        size[t]++;&#xA;    }&#xA;    start[0] = 1;&#xA;    for (i = 1; i &amp;lt; n; i++)&#xA;        start[i] = start[i - 1] + size[i - 1];&#xA;&#xA;&#xA;    for (i = 1; i &amp;lt;= k; i++) {&#xA;        j = sp[i][1];&#xA;        t = start[j];&#xA;        tsp[t][0] = sp[i][1];&#xA;        tsp[t][1] = sp[i][0];&#xA;        tsp[t][2] = sp[i][2];&#xA;        start[j]++;&#xA;    }&#xA;&#xA;    tsp[0][0] = sp[0][1];&#xA;    tsp[0][1] = sp[0][0];&#xA;    tsp[0][2] = sp[0][2];&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Transpose \n&amp;quot;;&#xA;    for (i = 0; i &amp;lt;= k; i++) {&#xA;        for (j = 0; j &amp;lt; 3; j++)&#xA;            cout&amp;lt;&amp;lt;tsp[i][j] &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n&amp;quot;;&#xA;    }&#xA;    getch();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-2&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-2&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;Enter the order of matrix: 3 3  &#xA;  &#xA;Enter the elements:  &#xA;0 1 0  &#xA;2 0 0  &#xA;0 0 5  &#xA;  &#xA;The sparse matrix is:  &#xA;3 3 3  &#xA;0 1 1  &#xA;1 0 2  &#xA;2 2 5  &#xA;  &#xA;Transpose  &#xA;3 3 3  &#xA;0 1 2  &#xA;1 0 1  &#xA;2 2 5  &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-convert-the-given-sparse-to-original-matrix&#34;&gt;&#xA;  Write a C++ program to convert the given sparse to original matrix&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-convert-the-given-sparse-to-original-matrix&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;lt;iostream.h&amp;gt;&#xA;#include&amp;lt;conio.h&amp;gt;&#xA;#include&amp;lt;process.h&amp;gt;&#xA;&#xA;void main() {&#xA;    int sp[50][50], a[40][40], k, i, j, m, n, r, c;&#xA;    clrscr();&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the order of sparse matrix: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;n;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the sparse matrix: &amp;quot;;&#xA;    for (i = 0; i &amp;lt; n; i++)&#xA;        for (j = 0; j &amp;lt; 3; j++)&#xA;            cin&amp;gt;&amp;gt;sp[i][j];&#xA;&#xA;    if (sp[0][2] != (n - 1)) {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Error &amp;quot;;&#xA;        getch();&#xA;        exit(0);&#xA;    }&#xA;&#xA;    for (i = 0; i &amp;lt; 40; i++)&#xA;        for (j = 0; j &amp;lt; 40; j++)&#xA;            a[i][j] = 0;&#xA;&#xA;    m = sp[0][0];&#xA;    n = sp[0][1];&#xA;    k = sp[0][2];&#xA;&#xA;    for (i = 1; i &amp;lt;= k; i++) {&#xA;        r = sp[i][0];&#xA;        c = sp[i][1];&#xA;        a[r][c] = sp[i][2];&#xA;    }&#xA;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n The original matrix is: \n&amp;quot;;&#xA;    for (i = 0; i &amp;lt; m; i++) {&#xA;        for (j = 0; j &amp;lt; n; j++)&#xA;            cout&amp;lt;&amp;lt;a[i][j] &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n&amp;quot;;&#xA;    }&#xA;    getch();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-3&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-3&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;Enter the order of sparse matrix: 4  &#xA;  &#xA;Enter the sparse matrix:  &#xA;3 3 3  &#xA;0 1 2  &#xA;1 0 1  &#xA;2 1 3  &#xA;  &#xA;The original matrix is:  &#xA;0 2 0  &#xA;1 0 0  &#xA;0 3 0  &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-perform-sparse-matrix-addition&#34;&gt;&#xA;  Write a C++ program to perform sparse matrix addition&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-perform-sparse-matrix-addition&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;quot;iostream.h&amp;quot;&#xA;#include&amp;quot;conio.h&amp;quot;&#xA;&#xA;void main() {&#xA;    int num, sp1[50][50], i, j, k1 = 0, k2 = 0, k = 0, m1, n1, m2, n2, sp2[50][50], sp[50][50];&#xA;    int m, n;&#xA;    clrscr();&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the order of matrix1: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;m1&amp;gt;&amp;gt;n1;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the elements: &amp;quot;;&#xA;    for (i = 0; i &amp;lt; m1; i++) {&#xA;        for (j = 0; j &amp;lt; n1; j++) {&#xA;            cin&amp;gt;&amp;gt;num;&#xA;            if (num != 0) {&#xA;                k1++;&#xA;                sp1[k1][0] = i;&#xA;                sp1[k1][1] = j;&#xA;                sp1[k1][2] = num;&#xA;            }&#xA;        }&#xA;    }&#xA;    sp1[0][0] = m1;&#xA;    sp1[0][1] = n1;&#xA;    sp1[0][2] = k1;&#xA;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the order of matrix2: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;m2&amp;gt;&amp;gt;n2;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the elements: &amp;quot;;&#xA;    for (i = 0; i &amp;lt; m2; i++) {&#xA;        for (j = 0; j &amp;lt; n2; j++) {&#xA;            cin&amp;gt;&amp;gt;num;&#xA;            if (num != 0) {&#xA;                k2++;&#xA;                sp2[k2][0] = i;&#xA;                sp2[k2][1] = j;&#xA;                sp2[k2][2] = num;&#xA;            }&#xA;        }&#xA;    }&#xA;    sp2[0][0] = m2;&#xA;    sp2[0][1] = n2;&#xA;    sp2[0][2] = k2;&#xA;    i = 1;&#xA;    j = 1;&#xA;    k = 0;&#xA;    while (i &amp;lt;= k1 &amp;amp;&amp;amp; j &amp;lt;= k2) {&#xA;        if (sp1[i][0] == sp2[j][0]) {&#xA;            if (sp1[i][1] &amp;lt; sp2[j][1]) {&#xA;                k++;&#xA;                sp[k][0] = sp1[i][0];&#xA;                sp[k][1] = sp1[i][1];&#xA;                sp[k][2] = sp1[i][2];&#xA;                i++;&#xA;            } else if (sp1[i][1] &amp;gt; sp2[j][1]) {&#xA;                k++;&#xA;                sp[k][0] = sp2[j][0];&#xA;                sp[k][1] = sp2[j][1];&#xA;                sp[k][2] = sp2[j][2];&#xA;                j++;&#xA;            } else {&#xA;                k++;&#xA;                sp[k][0] = sp2[j][0];&#xA;                sp[k][1] = sp2[j][1];&#xA;                sp[k][2] = sp2[j][2] + sp1[i][2];&#xA;                j++;&#xA;                i++;&#xA;            }&#xA;        } else if (sp1[i][0] &amp;lt; sp2[j][0]) {&#xA;            k++;&#xA;            sp[k][0] = sp1[i][0];&#xA;            sp[k][1] = sp1[i][1];&#xA;            sp[k][2] = sp1[i][2];&#xA;            i++;&#xA;        } else if (sp1[i][0] &amp;gt; sp2[j][0]) {&#xA;            k++;&#xA;            sp[k][0] = sp2[j][0];&#xA;            sp[k][1] = sp2[j][1];&#xA;            sp[k][2] = sp2[j][2];&#xA;            j++;&#xA;        }&#xA;    }&#xA;    while (i &amp;lt;= k1) {&#xA;        k++;&#xA;        sp[k][0] = sp1[i][0];&#xA;        sp[k][1] = sp1[i][1];&#xA;        sp[k][2] = sp1[i][2];&#xA;        i++;&#xA;    }&#xA;    while (j &amp;lt;= k2) {&#xA;        k++;&#xA;        sp[k][0] = sp2[j][0];&#xA;        sp[k][1] = sp2[j][1];&#xA;        sp[k][2] = sp2[j][2];&#xA;        j++;&#xA;    }&#xA;    m = ((m1 &amp;gt; m2) ? m1 : m2);&#xA;    n = ((n1 &amp;gt; n2) ? n1 : n2);&#xA;    sp[0][0] = m;&#xA;    sp[0][1] = n;&#xA;    sp[0][2] = k;&#xA;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n The sparse of sum matrix is:\n&amp;quot;;&#xA;    for (i = 0; i &amp;lt;= k; i++) {&#xA;        for (j = 0; j &amp;lt; 3; j++)&#xA;            cout&amp;lt;&amp;lt;sp[i][j] &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n&amp;quot;;&#xA;    }&#xA;    getch();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-4&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-4&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;Enter the order of matrix1: 3 3&#xA;&#xA;Enter the elements:&#xA;1 0 0&#xA;0 5 0&#xA;0 0 6&#xA;&#xA;Enter the order of matrix2: 3 3&#xA;&#xA;Enter the elements:&#xA;0 5 0&#xA;0 6 0&#xA;0 0 3&#xA;&#xA;The sparse of sum matrix is:&#xA;3 3 4&#xA;0 0 1&#xA;0 1 5&#xA;1 1 11&#xA;2 2 9&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-perform-sparse-multiplication&#34;&gt;&#xA;  Write a C++ program to perform sparse multiplication&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-perform-sparse-multiplication&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;quot;iostream.h&amp;quot;&#xA;#include&amp;quot;conio.h&amp;quot;&#xA;#include&amp;quot;process.h&amp;quot;&#xA;&#xA;void main() {&#xA;    int num, sp1[50][50], mul[50][50], i, j, k1 = 0, k2 = 0, k = 0, m1, n1, m2, n2, sp2[50][50], sp[50][50];&#xA;    int m, n, t;&#xA;    clrscr();&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the order of matrix1: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;m1&amp;gt;&amp;gt;n1;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the elements: &amp;quot;;&#xA;    for (i = 0; i &amp;lt; m1; i++) {&#xA;        for (j = 0; j &amp;lt; n1; j++) {&#xA;            cin&amp;gt;&amp;gt;num;&#xA;            if (num != 0) {&#xA;                k1++;&#xA;                sp1[k1][0] = i;&#xA;                sp1[k1][1] = j;&#xA;                sp1[k1][2] = num;&#xA;            }&#xA;        }&#xA;    }&#xA;    sp1[0][0] = m1;&#xA;    sp1[0][1] = n1;&#xA;    sp1[0][2] = k1;&#xA;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the order of matrix2: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;m2&amp;gt;&amp;gt;n2;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the elements: &amp;quot;;&#xA;    for (i = 0; i &amp;lt; m2; i++) {&#xA;        for (j = 0; j &amp;lt; n2; j++) {&#xA;            cin&amp;gt;&amp;gt;num;&#xA;            if (num != 0) {&#xA;                k2++;&#xA;                sp2[k2][0] = i;&#xA;                sp2[k2][1] = j;&#xA;                sp2[k2][2] = num;&#xA;            }&#xA;        }&#xA;    }&#xA;    sp2[0][0] = m2;&#xA;    sp2[0][1] = n2;&#xA;    sp2[0][2] = k2;&#xA;&#xA;    if (n1 != m2) {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Error &amp;quot;;&#xA;        getch();&#xA;        exit(0);&#xA;    }&#xA;&#xA;    k = 0;&#xA;    for (i = 1; i &amp;lt;= k1; i++) {&#xA;        for (j = 1; j &amp;lt;= k2; j++) {&#xA;            if (sp1[i][1] == sp2[j][0]) {&#xA;                k++;&#xA;                sp[k][0] = sp1[i][0];&#xA;                sp[k][1] = sp2[j][1];&#xA;                sp[k][2] = sp1[i][2] * sp2[j][2];&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    sp[0][2] = k;&#xA;    sp[0][0] = m1;&#xA;    sp[0][1] = n2;&#xA;&#xA;    t = 0;&#xA;    for (i = 0; i &amp;lt; sp[0][0]; i++) {&#xA;        for (j = 0; j &amp;lt; sp[0][1]; j++) {&#xA;            for (k1 = 1; k1 &amp;lt;= sp[0][2]; k1++) {&#xA;                if (sp[k1][0] == i &amp;amp;&amp;amp; sp[k1][1] == j) {&#xA;                    t++;&#xA;                    mul[t][0] = sp[k1][0];&#xA;                    mul[t][1] = sp[k1][1];&#xA;                    mul[t][2] = sp[k1][2];&#xA;                }&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    mul[0][2] = k;&#xA;    mul[0][0] = m1;&#xA;    mul[0][1] = n2;&#xA;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n The sparse of product matrix is:\n&amp;quot;;&#xA;    for (i = 0; i &amp;lt;= t; i++) {&#xA;        for (j = 0; j &amp;lt; 3; j++)&#xA;            cout&amp;lt;&amp;lt;mul[i][j] &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n&amp;quot;;&#xA;    }&#xA;&#xA;    getch();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-5&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-5&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;Enter the order of matrix1: 3 3&#xA;&#xA;Enter the elements:&#xA;2 0 9&#xA;0 1 0&#xA;0 0 2&#xA;&#xA;Enter the order of matrix2: 3 3&#xA;&#xA;Enter the elements:&#xA;0 0 3&#xA;1 0 1&#xA;2 1 0&#xA;&#xA;The sparse of product matrix is:&#xA;3 3 7&#xA;0 0 18&#xA;0 1 9&#xA;0 2 6&#xA;1 0 1&#xA;1 2 1&#xA;2 0 4&#xA;2 1 2&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-convert-an-infix-expression-to-postfix-and-evaluate&#34;&gt;&#xA;  Write a C++ program to convert an infix expression to postfix and evaluate&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-convert-an-infix-expression-to-postfix-and-evaluate&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;quot;iostream.h&amp;quot;&#xA;#include&amp;quot;conio.h&amp;quot;&#xA;#include&amp;quot;stdio.h&amp;quot;&#xA;#include&amp;quot;ctype.h&amp;quot;&#xA;#include&amp;quot;string.h&amp;quot;&#xA;#include&amp;quot;process.h&amp;quot;&#xA;#include&amp;quot;math.h&amp;quot;&#xA;&#xA;int top = -1;&#xA;int stack[50];&#xA;int p;&#xA;void evaluate(char[], int);&#xA;&#xA;void display(char a[], int n) {&#xA;    int i;&#xA;    for (i = 0; i &amp;lt;= n; i++) {&#xA;        cout&amp;lt;&amp;lt;a[i];&#xA;    }&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n&amp;quot;;&#xA;}&#xA;&#xA;void inpst(char q[]) {&#xA;        char stk[50], tp[50], op, ot;&#xA;        int s = -1, p = -1, j, k, l, h, flg1, flg2;&#xA;        char pcdn[6] = {&#xA;            &#39;-&#39;,&#xA;            &#39;+&#39;,&#xA;            &#39;/&#39;,&#xA;            &#39;*&#39;,&#xA;            &#39;^&#39;,&#xA;            &#39;\0&#39;&#xA;        };&#xA;        int pval[5] = {&#xA;            1,&#xA;            1,&#xA;            2,&#xA;            2,&#xA;            3&#xA;        };&#xA;&#xA;        for (int i = 0; q[i] != &#39;\0&#39;; i++) {&#xA;            flg1 = flg2 = -1;&#xA;            if (isalpha(q[i])) {&#xA;                p++;&#xA;                tp[p] = q[i];&#xA;&#xA;            } else if (q[i] == &#39;(&#39;) {&#xA;                s++;&#xA;                stk[s] = q[i];&#xA;&#xA;            } else if (q[i] == &#39;)&#39;) {&#xA;                for (j = s; j &amp;gt;= 0; j--) {&#xA;                    if (stk[s] == &#39;(&#39;)&#xA;                        break;&#xA;&#xA;                    if (stk[j] != &#39;(&#39;) {&#xA;                        p++;&#xA;                        tp[p] = stk[j];&#xA;&#xA;                        s--;&#xA;&#xA;                    }&#xA;                }&#xA;&#xA;                s--;&#xA;&#xA;&#xA;            } else {&#xA;                op = q[i];&#xA;                flg1 = -1;&#xA;                /* to find precedence value */&#xA;                for (h = 0; pcdn[h] != &#39;\0&#39;; h++) {&#xA;                    if (op == pcdn[h]) {&#xA;                        flg1 = pval[h];&#xA;                        break;&#xA;                    }&#xA;                }&#xA;&#xA;                /* check for higher precedence operator */&#xA;&#xA;                for (k = s; k &amp;gt;= 0; k--) {&#xA;                    flg2 = -1;&#xA;                    ot = stk[k];&#xA;&#xA;                    for (h = 0; pcdn[h] != &#39;\0&#39;; h++) {&#xA;                        if (ot == pcdn[h]) {&#xA;                            flg2 = pval[h];&#xA;                            break;&#xA;                        }&#xA;                    }&#xA;&#xA;                    if (flg2 &amp;gt; flg1) {&#xA;                        p++;&#xA;                        tp[p] = ot;&#xA;                        for (l = k; l {&#xA;                                stk[k] = stk[k + 1];&#xA;                            }&#xA;                            s--;&#xA;&#xA;                        }&#xA;&#xA;&#xA;                    }&#xA;                    s++;&#xA;                    stk[s] = op;&#xA;                }&#xA;            }&#xA;&#xA;            while (s &amp;gt;= 0) {&#xA;                p++;&#xA;                tp[p] = stk[s];&#xA;                s--;&#xA;            }&#xA;&#xA;            cout&amp;lt;&amp;lt;&amp;quot;\n The post fix expression is: &amp;quot;;&#xA;            display(tp, p);&#xA;&#xA;            evaluate(tp, p);&#xA;        }&#xA;&#xA;        int result(int a, int b, char op) {&#xA;            int c = 0;&#xA;&#xA;            switch (op) {&#xA;                case &#39;+&#39;:&#xA;                    c = a + b;&#xA;                    break;&#xA;                case &#39;-&#39;:&#xA;                    c = a - b;&#xA;                    break;&#xA;                case &#39;*&#39;:&#xA;                    c = a * b;&#xA;                    break;&#xA;                case &#39;/&#39;:&#xA;                    if (b != 0)&#xA;                        c = a / b;&#xA;                    else {&#xA;                        cout&amp;lt;&amp;lt;&amp;quot;\n Error: &amp;quot;;&#xA;                        getch();&#xA;                        exit(0);&#xA;                    }&#xA;                    break;&#xA;                case &#39;^&#39;:&#xA;                    c = (int) pow(a, b);&#xA;                    break;&#xA;                case &#39;%&#39;:&#xA;                    c = a % b;&#xA;                    break;&#xA;            }&#xA;            return c;&#xA;        }&#xA;&#xA;        void push(int item) {&#xA;            stack[++top] = item;&#xA;        }&#xA;&#xA;        int pop() {&#xA;            int s;&#xA;            if (top &amp;gt;= 0) {&#xA;                s = stack[top];&#xA;                top--;&#xA;                return s;&#xA;            } else&#xA;                return 0;&#xA;        }&#xA;&#xA;        void evaluate(char post[], int p) {&#xA;            int a, b, v = 0, q;&#xA;            top = -1;&#xA;&#xA;            for (int i = 0; i &amp;lt;= p; i++) {&#xA;                if (isalpha(post[i])) {&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n Enter value for &amp;quot; &amp;lt;&amp;lt;post[i] &amp;lt;&amp;lt;&amp;quot;: &amp;quot;;&#xA;                    cin&amp;gt;&amp;gt;q;&#xA;                    push(q);&#xA;                    continue;&#xA;                } else {&#xA;                    a = pop();&#xA;                    b = pop();&#xA;                    v = result(a, b, post[i]);&#xA;                    push(v);&#xA;                }&#xA;                a = b = 0;&#xA;            }&#xA;&#xA;        }&#xA;&#xA;        void main() {&#xA;            char q[50];&#xA;            clrscr();&#xA;            cout&amp;lt;&amp;lt;&amp;quot;\n Enter the infix expression: &amp;quot;;&#xA;            gets(q);&#xA;            inpst(q);&#xA;            cout&amp;lt;&amp;lt;&amp;quot;\n Value of expression &amp;quot; &amp;lt;&amp;lt;stack[top];&#xA;            getch();&#xA;        }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-6&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-6&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;Enter the infix expression: a * b + c * d&#xA;&#xA;The post fix expression is: ab * cd * +&#xA;&#xA;Enter value for a: 2&#xA;&#xA;Enter value for b: 3&#xA;&#xA;Enter value for c: 4&#xA;&#xA;Enter value for d: 5&#xA;&#xA;Value of expression 26&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-implement-stack-operations&#34;&gt;&#xA;  Write a C++ program to implement stack operations&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-implement-stack-operations&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;quot;iostream.h&amp;quot;&#xA;#include&amp;quot;conio.h&amp;quot;&#xA;#include&amp;quot;process.h&amp;quot;&#xA;#include&amp;quot;stdio.h&amp;quot;&#xA;&#xA;int stk[50], top = -1, i, j, max, num, ch;&#xA;&#xA;void push() {&#xA;    top++;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the item: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;num;&#xA;    stk[top] = num;&#xA;}&#xA;&#xA;void pop() {&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Popped &amp;quot; &amp;lt;&amp;lt;stk[top];&#xA;    top--;&#xA;}&#xA;&#xA;void display() {&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n ---------------------\n&amp;quot;;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;TOP&amp;gt;&amp;gt;&amp;quot;;&#xA;    for (i = top; i &amp;gt;= 0; i--)&#xA;        cout&amp;lt;&amp;lt;stk[i] &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n ---------------------&amp;quot;;&#xA;}&#xA;void main() {&#xA;&#xA;    clrscr();&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the limit: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;max;&#xA;    do {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n STACK\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n1.Push\n2.Pop\n3.Display\n4.Exit&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter the choice: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;        switch (ch) {&#xA;            case 1:&#xA;                if (top &amp;gt;= max - 1) {&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n Stack full: &amp;quot;;&#xA;                    continue;&#xA;                }&#xA;                push();&#xA;                break;&#xA;            case 2:&#xA;                if (top == -1) {&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n Stack empty: &amp;quot;;&#xA;                    continue;&#xA;                }&#xA;                pop();&#xA;                break;&#xA;            case 3:&#xA;                display();&#xA;                break;&#xA;            case 4:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;.......Thanking you.......&amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            default:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n INVALID KEY-IN &amp;quot;;&#xA;        }&#xA;    } while (1);&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-7&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-7&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;Enter the limit: 3&#xA;&#xA;&#xA;STACK&#xA;&#xA;1. Push&#xA;2. Pop&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 1&#xA;&#xA;Enter the item: 23&#xA;&#xA;&#xA;STACK&#xA;&#xA;1. Push&#xA;2. Pop&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 1&#xA;&#xA;Enter the item: 96&#xA;&#xA;&#xA;STACK&#xA;&#xA;1. Push&#xA;2. Pop&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 3&#xA;&#xA;    -- -- -- -- -- -- -- -- -- -- -&#xA;    TOP&amp;gt;&amp;gt;96 56 23&#xA;    -- -- -- -- -- -- -- -- -- -- -&#xA;&#xA;    STACK&#xA;&#xA;1. Push&#xA;2. Pop&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 2&#xA;&#xA;Popped 96&#xA;&#xA;STACK&#xA;&#xA;1. Push&#xA;2. Pop&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 3&#xA;&#xA;    -- -- -- -- -- -- -- -- -- -- -&#xA;    TOP&amp;gt;&amp;gt;56 23&#xA;    -- -- -- -- -- -- -- -- -- -- -&#xA;&#xA;    STACK&#xA;&#xA;1. Push&#xA;2. Pop&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 4     &#xA;&#xA;.......Thanking you.......&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-reverse-a-string-using-stack&#34;&gt;&#xA;  Write a C++ program to reverse a string using stack&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-reverse-a-string-using-stack&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;quot;iostream.h&amp;quot;&#xA;#include&amp;quot;conio.h&amp;quot;&#xA;#include&amp;quot;process.h&amp;quot;&#xA;#include&amp;quot;stdio.h&amp;quot;&#xA;#include&amp;quot;string.h&amp;quot;&#xA;&#xA;void revstk(char str[]) {&#xA;    char stk[50];&#xA;    int top, i;&#xA;    for (i = 0; str[i] != &#39;\0&#39;; i++)&#xA;        stk[i] = str[i];&#xA;&#xA;    top = --i;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Reversed string: &amp;quot;;&#xA;    for (i = top; i &amp;gt;= 0; i--)&#xA;        cout&amp;lt;&amp;lt;stk[i];&#xA;&#xA;    return;&#xA;}&#xA;&#xA;void main() {&#xA;    char str[50];&#xA;    clrscr();&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter a string:&amp;quot;;&#xA;    gets(str);&#xA;    revstk(str);&#xA;    getch();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-8&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-8&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;Enter a string: english&#xA;&#xA;Reversed string: hsilgne&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-implement-simple-queue-operations&#34;&gt;&#xA;  Write a C++ program to implement simple queue operations&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-implement-simple-queue-operations&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;quot;iostream.h&amp;quot;&#xA;#include&amp;quot;conio.h&amp;quot;&#xA;#include&amp;quot;process.h&amp;quot;&#xA;#include&amp;quot;stdio.h&amp;quot;&#xA;&#xA;int que[50], rear = -1, front = -1, i, j, max, num, ch;&#xA;&#xA;void insert() {&#xA;    rear++;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the item: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;num;&#xA;    que[rear] = num;&#xA;    if (front == -1)&#xA;        front = 0;&#xA;}&#xA;&#xA;void delet() {&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Deleted &amp;quot; &amp;lt;&amp;lt;que[front];&#xA;    if (front == rear)&#xA;        front = rear = -1;&#xA;    else&#xA;        front++;&#xA;}&#xA;&#xA;void display() {&#xA;    if (front == -1) {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\t\t\t QUEUE EMPTY &amp;quot;;&#xA;        return;&#xA;    }&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n -----------------------------\n&amp;quot;;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;FRONT&amp;gt;&amp;gt;&amp;quot;;&#xA;    for (i = front; i &amp;lt;= rear; i++)&#xA;        cout&amp;lt;&amp;lt;que[i] &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;    cout&amp;lt;&amp;lt;&amp;quot; &amp;lt;&amp;lt;REAR&amp;quot;;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n -----------------------------&amp;quot;;&#xA;}&#xA;void main() {&#xA;&#xA;    clrscr();&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the limit: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;max;&#xA;    do {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n SIMPLE QUEUE\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n1.Insert\n2.Delete\n3.Display\n4.Exit&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter the choice: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;        switch (ch) {&#xA;            case 1:&#xA;                if (rear + 1 &amp;gt; max - 1) {&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n\t\t\t Queue full: &amp;quot;;&#xA;                    continue;&#xA;                }&#xA;                insert();&#xA;                break;&#xA;            case 2:&#xA;                if (front == -1 || front &amp;gt; rear) {&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n\t\t\t Queue empty: &amp;quot;;&#xA;                    continue;&#xA;                }&#xA;                delet();&#xA;                break;&#xA;            case 3:&#xA;                display();&#xA;                break;&#xA;            case 4:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;.......Thanking you.......&amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            default:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\t\t\t INVALID KEY-IN &amp;quot;;&#xA;        }&#xA;    } while (1);&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-9&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-9&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;Enter the limit: 2&#xA;&#xA;&#xA;SIMPLE QUEUE&#xA;&#xA;&#xA;1. Insert&#xA;2. Delete&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 1&#xA;&#xA;Enter the item: 23&#xA;&#xA;&#xA;SIMPLE QUEUE&#xA;&#xA;&#xA;1. Insert&#xA;2. Delete&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 1&#xA;&#xA;Enter the item: 96&#xA;&#xA;&#xA;SIMPLE QUEUE&#xA;&#xA;&#xA;1. Insert&#xA;2. Delete&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 3&#xA;&#xA;    -- -- -- -- -- -- -- -- -- -- -- -- -- -- -&#xA;    FRONT&amp;gt;&amp;gt;23 96 &amp;lt;&amp;lt;REAR&#xA;    -- -- -- -- -- -- -- -- -- -- -- -- -- -- -&#xA;&#xA;&#xA;    SIMPLE QUEUE&#xA;&#xA;&#xA;1. Insert&#xA;2. Delete&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 2&#xA;&#xA;Deleted 23&#xA;&#xA;SIMPLE QUEUE&#xA;&#xA;&#xA;1. Insert&#xA;2. Delete&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 3&#xA;&#xA;    -- -- -- -- -- -- -- -- -- -- -- -- -- -- -&#xA;    FRONT&amp;gt;&amp;gt;96 &amp;lt;&amp;lt;REAR&#xA;    -- -- -- -- -- -- -- -- -- -- -- -- -- -- -&#xA;&#xA;    SIMPLE QUEUE&#xA;&#xA;&#xA;1. Insert&#xA;2. Delete&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 4&#xA;    .......Thanking you.......&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-implement-circular-queue-operations&#34;&gt;&#xA;  Write a C++ program to implement circular queue operations&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-implement-circular-queue-operations&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;quot;iostream.h&amp;quot;&#xA;#include&amp;quot;conio.h&amp;quot;&#xA;#include&amp;quot;process.h&amp;quot;&#xA;#include&amp;quot;stdio.h&amp;quot;&#xA;&#xA;int que[50], rear = -1, front = -1, i, j, max, num, ch;&#xA;&#xA;void insert() {&#xA;    rear = (rear + 1) % max;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the item: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;num;&#xA;    que[rear] = num;&#xA;    if (front == -1)&#xA;        front = 0;&#xA;}&#xA;&#xA;void delet() {&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Deleted &amp;quot; &amp;lt;&amp;lt;que[front];&#xA;    if (front == rear)&#xA;        front = rear = -1;&#xA;    else&#xA;        front = (front + 1) % max;&#xA;}&#xA;&#xA;void display() {&#xA;    if (front == -1) {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n QUEUE EMPTY &amp;quot;;&#xA;        return;&#xA;    }&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n -----------------------------\n&amp;quot;;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;FRONT&amp;gt;&amp;gt;&amp;quot;;&#xA;    if (rear &amp;lt; front) {&#xA;        for (i = front; i &amp;lt; max; i++)&#xA;            cout&amp;lt;&amp;lt;que[i] &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;        for (i = 0; i &amp;lt;= rear; i++)&#xA;            cout&amp;lt;&amp;lt;que[i] &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;    } else&#xA;        for (i = front; i &amp;lt;= rear; i++)&#xA;            cout&amp;lt;&amp;lt;que[i] &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;    cout&amp;lt;&amp;lt;&amp;quot; &amp;lt;&amp;lt;REAR&amp;quot;;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n -----------------------------&amp;quot;;&#xA;}&#xA;void main() {&#xA;    clrscr();&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the limit: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;max;&#xA;    do {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n CIRCULAR QUEUE\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n1.Insert\n2.Delete\n3.Display\n4.Exit&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter the choice: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;        switch (ch) {&#xA;            case 1:&#xA;                if ((front == (rear + 1) % max)) {&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n Queue full: &amp;quot;;&#xA;                    continue;&#xA;                }&#xA;                insert();&#xA;                break;&#xA;            case 2:&#xA;                if (front == -1) {&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n Queue empty: &amp;quot;;&#xA;                    continue;&#xA;                }&#xA;                delet();&#xA;                break;&#xA;            case 3:&#xA;                display();&#xA;                break;&#xA;            case 4:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;.......Thanking you.......&amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            default:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n INVALID KEY-IN &amp;quot;;&#xA;        }&#xA;    } while (1);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-10&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-10&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;Enter the limit: 2&#xA;&#xA;&#xA;CIRCULAR QUEUE&#xA;&#xA;&#xA;1. Insert&#xA;2. Delete&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 1&#xA;&#xA;Enter the item: 44&#xA;&#xA;&#xA;CIRCULAR QUEUE&#xA;&#xA;&#xA;1. Insert&#xA;2. Delete&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 1&#xA;&#xA;Enter the item: 56&#xA;&#xA;&#xA;CIRCULAR QUEUE&#xA;&#xA;&#xA;1. Insert&#xA;2. Delete&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 3&#xA;&#xA;    -- -- -- -- -- -- -- -- -- -- -- -- -- -- -&#xA;    FRONT&amp;gt;&amp;gt;44 56 &amp;lt;&amp;lt;REAR&#xA;    -- -- -- -- -- -- -- -- -- -- -- -- -- -- -&#xA;&#xA;&#xA;CIRCULAR QUEUE&#xA;&#xA;&#xA;1. Insert&#xA;2. Delete&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 2&#xA;&#xA;Deleted 44&#xA;&#xA;CIRCULAR QUEUE&#xA;&#xA;&#xA;1. Insert&#xA;2. Delete&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 1&#xA;&#xA;Enter the item: 99&#xA;&#xA;&#xA;CIRCULAR QUEUE&#xA;&#xA;&#xA;1. Insert&#xA;2. Delete&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 3&#xA;&#xA;    -- -- -- -- -- -- -- -- -- -- -- -- -- -- -&#xA;    FRONT&amp;gt;&amp;gt;56 99 &amp;lt;&amp;lt;REAR&#xA;    -- -- -- -- -- -- -- -- -- -- -- -- -- -- -&#xA;&#xA;CIRCULAR QUEUE&#xA;&#xA;&#xA;1. Insert&#xA;2. Delete&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 4&#xA;    .......Thanking you.......&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-implement-double-ended-queue-operations&#34;&gt;&#xA;  Write a C++ program to implement double ended queue operations&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-implement-double-ended-queue-operations&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;quot;iostream.h&amp;quot;&#xA;#include&amp;quot;conio.h&amp;quot;&#xA;#include&amp;quot;process.h&amp;quot;&#xA;#include&amp;quot;stdio.h&amp;quot;&#xA;&#xA;int que[50], rear = -1, front = -1, i, j, max, num, ch;&#xA;&#xA;void r_insert() {&#xA;    rear++;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the item: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;num;&#xA;    que[rear] = num;&#xA;    if (front == -1)&#xA;        front = 0;&#xA;}&#xA;&#xA;void f_insert() {&#xA;    if (front == -1)&#xA;        front = rear = 0;&#xA;    else if (front &amp;gt; 0)&#xA;        front--;&#xA;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the item: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;num;&#xA;    que[front] = num;&#xA;&#xA;}&#xA;&#xA;void r_delet() {&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Deleted &amp;quot; &amp;lt;&amp;lt;que[rear];&#xA;    if (front == rear)&#xA;        front = rear = -1;&#xA;    else&#xA;        rear--;&#xA;}&#xA;&#xA;void f_delet() {&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Deleted &amp;quot; &amp;lt;&amp;lt;que[front];&#xA;    if (front == rear)&#xA;        front = rear = -1;&#xA;    else&#xA;        front++;&#xA;}&#xA;&#xA;void display() {&#xA;    if (front == -1) {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\t\t\t QUEUE EMPTY &amp;quot;;&#xA;        return;&#xA;    }&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n -----------------------------\n&amp;quot;;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;FRONT&amp;gt;&amp;gt;&amp;quot;;&#xA;    for (i = front; i &amp;lt;= rear; i++)&#xA;        cout&amp;lt;&amp;lt;que[i] &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;    cout&amp;lt;&amp;lt;&amp;quot; &amp;lt;&amp;lt;REAR&amp;quot;;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n -----------------------------&amp;quot;;&#xA;}&#xA;void main() {&#xA;&#xA;    clrscr();&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the limit: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;max;&#xA;    do {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n DE-QUEUE\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n1.Insert at rear\n2.Insert at front\n3.Delete at front\n4.Delete at rear\n5.Display\n6.Exit&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter the choice: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;        switch (ch) {&#xA;            case 1:&#xA;                if (rear + 1 &amp;gt; max - 1) {&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n\t\t\t Queue full: &amp;quot;;&#xA;                    continue;&#xA;                }&#xA;                r_insert();&#xA;                break;&#xA;            case 2:&#xA;                if (front == 0) {&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n\t\t\t Cannot insert: &amp;quot;;&#xA;                    continue;&#xA;                }&#xA;                f_insert();&#xA;                break;&#xA;            case 3:&#xA;                if (front == -1 || front &amp;gt; rear) {&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n\t\t\t Queue empty: &amp;quot;;&#xA;                    continue;&#xA;                }&#xA;                f_delet();&#xA;                break;&#xA;            case 4:&#xA;                if (front == -1 || front &amp;gt; rear) {&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n\t\t\t Queue empty: &amp;quot;;&#xA;                    continue;&#xA;                }&#xA;                r_delet();&#xA;                break;&#xA;            case 5:&#xA;                display();&#xA;                break;&#xA;            case 6:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;.......Thanking you.......&amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            default:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\t\t\t INVALID KEY-IN &amp;quot;;&#xA;        }&#xA;    } while (1);&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-11&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-11&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;Enter the limit: 3&#xA;&#xA;DE - QUEUE&#xA;&#xA;1. Insert at rear&#xA;2. Insert at front&#xA;3. Delete at front&#xA;4. Delete at rear&#xA;5. Display&#xA;6. Exit&#xA;&#xA;Enter the choice: 2&#xA;&#xA;Enter the item: 23&#xA;&#xA;DE - QUEUE&#xA;&#xA;1. Insert at rear&#xA;2. Insert at front&#xA;3. Delete at front&#xA;4. Delete at rear&#xA;5. Display&#xA;6. Exit&#xA;Enter the choice: 1&#xA;&#xA;Enter the item: 44&#xA;&#xA;DE - QUEUE&#xA;&#xA;1. Insert at rear&#xA;2. Insert at front&#xA;3. Delete at front&#xA;4. Delete at rear&#xA;5. Display&#xA;6. Exit&#xA;Enter the choice: 1&#xA;&#xA;Enter the item: 96&#xA;&#xA;DE - QUEUE&#xA;&#xA;1. Insert at rear&#xA;2. Insert at front&#xA;3. Delete at front&#xA;4. Delete at rear&#xA;5. Display&#xA;6. Exit&#xA;Enter the choice: 5&#xA;&#xA;    -- -- -- -- -- -- -- -- -- -- -- -- -- -- -&#xA;    FRONT&amp;gt;&amp;gt;23 44 96 &amp;lt;&amp;lt;REAR&#xA;    -- -- -- -- -- -- -- -- -- -- -- -- -- -- -&#xA;&#xA;    DE - QUEUE&#xA;&#xA;1. Insert at rear&#xA;2. Insert at front&#xA;3. Delete at front&#xA;4. Delete at rear&#xA;5. Display&#xA;6. Exit&#xA;Enter the choice: 3&#xA;&#xA;Deleted 23&#xA;&#xA;DE - QUEUE&#xA;&#xA;1. Insert at rear&#xA;2. Insert at front&#xA;3. Delete at front&#xA;4. Delete at rear&#xA;5. Display&#xA;6. Exit&#xA;Enter the choice: 4&#xA;&#xA;Deleted 96&#xA;&#xA;DE - QUEUE&#xA;&#xA;1. Insert at rear&#xA;2. Insert at front&#xA;3. Delete at front&#xA;4. Delete at rear&#xA;5. Display&#xA;6. Exit&#xA;Enter the choice: 5&#xA;&#xA;    -- -- -- -- -- -- -- -- -- -- -- -- -- -- -&#xA;    FRONT&amp;gt;&amp;gt;44 &amp;lt;&amp;lt;REAR&#xA;    -- -- -- -- -- -- -- -- -- -- -- -- -- -- -&#xA;&#xA;    DE - QUEUE&#xA;&#xA;1. Insert at rear&#xA;2. Insert at front&#xA;3. Delete at front&#xA;4. Delete at rear&#xA;5. Display&#xA;6. Exit&#xA;Enter the choice: 6&#xA;    .......Thanking you.......&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-implement-priority-queue-operations&#34;&gt;&#xA;  Write a C++ program to implement priority queue operations&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-implement-priority-queue-operations&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;quot;iostream.h&amp;quot;&#xA;#include&amp;quot;conio.h&amp;quot;&#xA;#include&amp;quot;process.h&amp;quot;&#xA;#include&amp;quot;stdio.h&amp;quot;&#xA;&#xA;int que[50], rear = -1, front = -1, i, j, max, item, ch;&#xA;struct p_que {&#xA;    int num;&#xA;    int pr;&#xA;};&#xA;class pro {&#xA;    public:&#xA;    void insert(p_que ob[]);&#xA;    void delet(p_que ob[]);&#xA;    void display(p_que ob[]);&#xA;};&#xA;&#xA;&#xA;void pro::insert(p_que ob[]) {&#xA;    rear++;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the item: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;item;&#xA;    ob[rear].num = item;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the priority: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;ob[rear].pr;&#xA;    if (front == -1)&#xA;        front = 0;&#xA;}&#xA;&#xA;void pro::delet(p_que ob[]) {&#xA;    p_que temp;&#xA;    int big = ob[front].pr;&#xA;    int p = 0;&#xA;    for (int i = front + 1; i &amp;lt;= rear; i++) {&#xA;        if (ob[i].pr &amp;gt; big) {&#xA;            big = ob[i].pr;&#xA;            p = i;&#xA;        }&#xA;    }&#xA;&#xA;    for (i = p; i &amp;lt;= rear; i++) {&#xA;        ob[i].num = ob[i + 1].num;&#xA;        ob[i].pr = ob[i + 1].pr;&#xA;    }&#xA;&#xA;    if (front == rear)&#xA;        front = rear = -1;&#xA;    else&#xA;        rear--;&#xA;}&#xA;&#xA;void pro::display(p_que ob[]) {&#xA;    if (front == -1) {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\t\t\t QUEUE EMPTY &amp;quot;;&#xA;        return;&#xA;    }&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n -----------------------------\n\n&amp;quot;;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;FRONT&amp;gt;&amp;gt;Pr &amp;quot;;&#xA;    for (i = front; i &amp;lt;= rear; i++)&#xA;        printf(&amp;quot;%3d&amp;quot;, ob[i].pr);&#xA;    cout&amp;lt;&amp;lt;&amp;quot; &amp;lt;&amp;lt;REAR&amp;quot;;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n\n Data&amp;quot;;&#xA;    for (i = front; i &amp;lt;= rear; i++)&#xA;        printf(&amp;quot;%3d&amp;quot;, ob[i].num);&#xA;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n -----------------------------&amp;quot;;&#xA;}&#xA;&#xA;void main() {&#xA;    p_que o[50];&#xA;    pro pp;&#xA;    clrscr();&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the limit: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;max;&#xA;    do {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n PRIORITY QUEUE\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n1.Insert\n2.Delete\n3.Display\n4.Exit&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter the choice: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;        switch (ch) {&#xA;            case 1:&#xA;                if (rear + 1 &amp;gt; max - 1) {&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n\t\t\t Queue full: &amp;quot;;&#xA;                    continue;&#xA;                }&#xA;                pp.insert(o);&#xA;                break;&#xA;            case 2:&#xA;                if (front == -1 || front &amp;gt; rear) {&#xA;                    cout&amp;lt;&amp;lt;&amp;quot;\n\t\t\t Queue empty: &amp;quot;;&#xA;                    continue;&#xA;                }&#xA;                pp.delet(o);&#xA;                break;&#xA;            case 3:&#xA;                pp.display(o);&#xA;                break;&#xA;            case 4:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;.......Thanking you.......&amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            default:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\t\t\t INVALID KEY-IN &amp;quot;;&#xA;        }&#xA;    } while (1);&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-12&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-12&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;Enter the limit: 3&#xA;&#xA;&#xA;PRIORITY QUEUE&#xA;&#xA;1. Insert&#xA;2. Delete&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 1&#xA;&#xA;Enter the item: 23&#xA;&#xA;Enter the priority: 5&#xA;&#xA;&#xA;PRIORITY QUEUE&#xA;&#xA;1. Insert&#xA;2. Delete&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 1&#xA;&#xA;Enter the item: 44&#xA;&#xA;Enter the priority: 6&#xA;&#xA;&#xA;PRIORITY QUEUE&#xA;&#xA;1. Insert&#xA;2. Delete&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 1&#xA;&#xA;Enter the item: 96&#xA;&#xA;Enter the priority: 7&#xA;&#xA;&#xA;PRIORITY QUEUE&#xA;&#xA;1. Insert&#xA;2. Delete&#xA;3. Display&#xA;4. Exit&#xA;&#xA;Enter the choice: 3&#xA;&#xA;&#xA;    -- -- -- -- -- -- -- -- -- -- -- -- -- -- -&#xA;&#xA;    FRONT&amp;gt;&amp;gt;Pr 5 6 7 &amp;lt;&amp;lt;REAR&#xA;&#xA;Data 23 44 96&#xA;-- -- -- -- -- -- -- -- -- -- -- -- -- -- -&#xA;&#xA;PRIORITY QUEUE&#xA;&#xA;1. Insert&#xA;2. Delete&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 2&#xA;&#xA;&#xA;PRIORITY QUEUE&#xA;&#xA;1. Insert&#xA;2. Delete&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 3&#xA;&#xA;    -- -- -- -- -- -- -- -- -- -- -- -- -- -- -&#xA;&#xA;    FRONT&amp;gt;&amp;gt;Pr 5 6 &amp;lt;&amp;lt;REAR&#xA;&#xA;Data 23 44&#xA;-- -- -- -- -- -- -- -- -- -- -- -- -- -- -&#xA;&#xA;PRIORITY QUEUE&#xA;&#xA;1. Insert&#xA;2. Delete&#xA;3. Display&#xA;4. Exit&#xA;Enter the choice: 4&#xA;    .......Thanking you.......&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-represent-a-polynomial&#34;&gt;&#xA;  Write a C++ program to represent a polynomial&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-represent-a-polynomial&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;quot;iostream.h&amp;quot;&#xA;#include&amp;quot;conio.h&amp;quot;&#xA;#include&amp;quot;process.h&amp;quot;&#xA;#include&amp;quot;stdio.h&amp;quot;&#xA;&#xA;class poly {&#xA;    int i, n;&#xA;    struct rep {&#xA;        int co;&#xA;        int ex;&#xA;    }&#xA;    r[10];&#xA;&#xA;    public:&#xA;    void read();&#xA;    void disp();&#xA;};&#xA;&#xA;void poly::read() {&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the number of terms in the polynomial: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;n;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the coefficient and exponent: &amp;quot;;&#xA;&#xA;    for (i = 0; i &amp;lt; n; i++) {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Term &amp;quot; &amp;lt;&amp;lt;i + 1 &amp;lt;&amp;lt;&amp;quot;: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;r[i].co&amp;gt;&amp;gt;r[i].ex;&#xA;    }&#xA;}&#xA;&#xA;void poly::disp() {&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\nThe polynomial is:\n\n&amp;quot;;&#xA;    for (i = 0; i &amp;lt; n - 1; i++) {&#xA;        cout&amp;lt;&amp;lt;r[i].co &amp;lt;&amp;lt;&amp;quot;x^&amp;quot; &amp;lt;&amp;lt;r[i].ex &amp;lt;&amp;lt;&amp;quot;+&amp;quot;;&#xA;    }&#xA;    cout&amp;lt;&amp;lt;r[i].co &amp;lt;&amp;lt;&amp;quot;x^&amp;quot; &amp;lt;&amp;lt;r[i].ex;&#xA;}&#xA;&#xA;void main() {&#xA;    clrscr();&#xA;    poly ob;&#xA;    ob.read();&#xA;    ob.disp();&#xA;    getch();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-13&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-13&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;Enter the number of terms in the polynomial: 3&#xA;&#xA;Enter the coefficient and exponent:&#xA;Term 1: 5 2&#xA;&#xA;Term 2: 6 1&#xA;&#xA;Term 3: 7 0&#xA;&#xA;The polynomial is:&#xA;&#xA;5 x ^ 2 + 6 x ^ 1 + 7 x ^ 0&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-perform-polynomial-addition&#34;&gt;&#xA;  Write a C++ program to perform polynomial addition&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-perform-polynomial-addition&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;quot;iostream.h&amp;quot;&#xA;#include&amp;quot;conio.h&amp;quot;&#xA;#include&amp;quot;process.h&amp;quot;&#xA;#include&amp;quot;stdio.h&amp;quot;&#xA;&#xA;class poly {&#xA;    int i, n;&#xA;    struct rep {&#xA;        int co;&#xA;        int ex;&#xA;    }&#xA;    r[10];&#xA;&#xA;    public:&#xA;    void read();&#xA;    void sum(poly, poly);&#xA;    void disp();&#xA;};&#xA;&#xA;void poly::read() {&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the number of terms in the polynomial: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;n;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the coefficient and exponent: &amp;quot;;&#xA;&#xA;    for (i = 0; i &amp;lt; n; i++) {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Term &amp;quot; &amp;lt;&amp;lt;i + 1 &amp;lt;&amp;lt;&amp;quot;: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;r[i].co&amp;gt;&amp;gt;r[i].ex;&#xA;    }&#xA;}&#xA;&#xA;void poly::disp() {&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n.........................\n&amp;quot;;&#xA;    for (i = 0; i &amp;lt; n - 1; i++) {&#xA;        cout&amp;lt;&amp;lt;r[i].co &amp;lt;&amp;lt;&amp;quot;x^&amp;quot; &amp;lt;&amp;lt;r[i].ex &amp;lt;&amp;lt;&amp;quot;+&amp;quot;;&#xA;    }&#xA;    cout&amp;lt;&amp;lt;r[i].co &amp;lt;&amp;lt;&amp;quot;x^&amp;quot; &amp;lt;&amp;lt;r[i].ex;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n\n&amp;quot;;&#xA;}&#xA;&#xA;void poly::sum(poly c1, poly c2) {&#xA;    int i = 0, j = 0, k = 0, t;&#xA;&#xA;    while (i &amp;lt; c1.n &amp;amp;&amp;amp; j &amp;lt; c2.n) { //1&#xA;        if (c1.r[i].ex == c2.r[j].ex) {&#xA;            r[k].co = c1.r[i].co + c2.r[j].co;&#xA;            r[k].ex = c1.r[i].ex;&#xA;            i++, j++, k++;&#xA;        } else if (c1.r[i].ex &amp;gt; c2.r[j].ex) {&#xA;            r[k].co = c1.r[i].co;&#xA;            r[k].ex = c1.r[i].ex;&#xA;            i++, k++;&#xA;        } else if (c1.r[i].ex &amp;lt; c2.r[j].ex) {&#xA;            r[k].co = c2.r[j].co;&#xA;            r[k].ex = c2.r[j].ex;&#xA;            j++, k++;&#xA;        }&#xA;    } //1&#xA;&#xA;    while (i &amp;lt; c1.n) {&#xA;        r[k].co = c1.r[i].co;&#xA;        r[k].ex = c1.r[i].ex;&#xA;        i++, k++;&#xA;    }&#xA;&#xA;    while (j &amp;lt; c2.n) {&#xA;        r[k].co = c2.r[j].co;&#xA;        r[k].ex = c2.r[j].ex;&#xA;        j++, k++;&#xA;    }&#xA;    n = k--;&#xA;&#xA;&#xA;}&#xA;&#xA;void main() {&#xA;    clrscr();&#xA;    poly c1, c2, c3;&#xA;    c1.read();&#xA;    c2.read();&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Polynomial 1: &amp;quot;;&#xA;    c1.disp();&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Polynomial 2: &amp;quot;;&#xA;    c2.disp();&#xA;    c3.sum(c1, c2);&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Sum polynomial : &amp;quot;;&#xA;    c3.disp();&#xA;    getch();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-14&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-14&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;Enter the number of terms in the polynomial: 3&#xA;&#xA;Enter the coefficient and exponent:&#xA;Term 1: 4 2&#xA;&#xA;Term 2: 5 1&#xA;&#xA;Term 3: 3 0&#xA;&#xA;Enter the number of terms in the polynomial: 2&#xA;&#xA;Enter the coefficient and exponent:&#xA;Term 1: 8 3&#xA;&#xA;Term 2: 5 1&#xA;&#xA;&#xA;Polynomial 1:&#xA;.........................&#xA;4 x ^ 2 + 5 x ^ 1 + 3 x ^ 0&#xA;&#xA;&#xA;Polynomial 2:&#xA;.........................&#xA;8 x ^ 3 + 5 x ^ 1&#xA;&#xA;&#xA;Sum polynomial:&#xA;.........................&#xA;8 x ^ 3 + 4 x ^ 2 + 10 x ^ 1 + 3 x ^ 0&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-implement-a-singly-linked-list&#34;&gt;&#xA;  Write a C++ program to implement a singly linked list&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-implement-a-singly-linked-list&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;quot;iostream.h&amp;quot;&#xA;#include&amp;quot;conio.h&amp;quot;&#xA;#include&amp;quot;process.h&amp;quot;&#xA;#include&amp;quot;stdio.h&amp;quot;&#xA;&#xA;class node {&#xA;    int data;&#xA;    node * next;&#xA;    public:&#xA;    void display();&#xA;    void insertend();&#xA;    void insertbeg();&#xA;    void insertsp();&#xA;    void delbeg();&#xA;    void delend();&#xA;    void delsp();&#xA;};&#xA;node * head, * temp, * start, * t;&#xA;&#xA;void node::display() {&#xA;    temp = start;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Data list: &amp;quot;;&#xA;    while (temp != NULL) {&#xA;        cout&amp;lt;&amp;lt;temp - &amp;gt; data &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;        temp = temp - &amp;gt; next;&#xA;    }&#xA;}&#xA;&#xA;void node::insertbeg() {&#xA;    head = new node;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the data: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;head - &amp;gt; data;&#xA;&#xA;    if (start == NULL) {&#xA;        head - &amp;gt; next = NULL;&#xA;        start = head;&#xA;    } else {&#xA;        head - &amp;gt; next = start;&#xA;        start = head;&#xA;    }&#xA;}&#xA;&#xA;void node::insertend() {&#xA;    head = new node;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the data: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;head - &amp;gt; data;&#xA;&#xA;    if (start == NULL) {&#xA;        start = head;&#xA;    } else {&#xA;        temp = start;&#xA;        while (temp - &amp;gt; next != NULL) {&#xA;            temp = temp - &amp;gt; next;&#xA;        }&#xA;        temp - &amp;gt; next = head;&#xA;        head - &amp;gt; next = NULL;&#xA;    }&#xA;}&#xA;&#xA;void node::insertsp() {&#xA;    int pos, i;&#xA;    head = new node;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the data: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;head - &amp;gt; data;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the position: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;pos;&#xA;    if (pos == 1)&#xA;        insertbeg();&#xA;    else {&#xA;        temp = start;&#xA;        for (i = 1; i &amp;lt; pos - 1; i++) {&#xA;            temp = temp - &amp;gt; next;&#xA;        }&#xA;        head - &amp;gt; next = temp - &amp;gt; next;&#xA;        temp - &amp;gt; next = head;&#xA;&#xA;    }&#xA;}&#xA;&#xA;void node::delbeg() {&#xA;    if (start == NULL)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n LIST EMPTY &amp;quot;;&#xA;    else {&#xA;        //temp=start;&#xA;        cout&amp;lt;&amp;lt;start - &amp;gt; data;&#xA;        start = start - &amp;gt; next;&#xA;        delete temp;&#xA;    }&#xA;}&#xA;&#xA;void node::delend() {&#xA;    temp = start;&#xA;    if (start == NULL)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n LIST EMPTY &amp;quot;;&#xA;&#xA;    else if (temp - &amp;gt; next == NULL) {&#xA;        cout&amp;lt;&amp;lt;temp - &amp;gt; data;&#xA;        start = NULL;&#xA;        delete temp;&#xA;    } else {&#xA;        while (temp - &amp;gt; next != NULL) {&#xA;            t = temp;&#xA;            temp = temp - &amp;gt; next;&#xA;        }&#xA;        cout&amp;lt;&amp;lt;temp - &amp;gt; data;&#xA;        t - &amp;gt; next = NULL;&#xA;        delete temp;&#xA;    }&#xA;}&#xA;&#xA;void node::delsp() {&#xA;&#xA;    if (start == NULL) {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n LIST EMPTY &amp;quot;;&#xA;        return;&#xA;    }&#xA;&#xA;    int num;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the item: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;num;&#xA;    temp = start;&#xA;    while (temp != NULL) {&#xA;        if (temp - &amp;gt; data == num) {&#xA;            if (temp == start)&#xA;                delbeg();&#xA;            else {&#xA;                cout&amp;lt;&amp;lt;temp - &amp;gt; data;&#xA;                t - &amp;gt; next = temp - &amp;gt; next;&#xA;                delete temp;&#xA;            }&#xA;        } else {&#xA;            t = temp;&#xA;            temp = temp - &amp;gt; next;&#xA;        }&#xA;&#xA;    }&#xA;}&#xA;&#xA;void main() {&#xA;    int ch;&#xA;    node ob;&#xA;    start = NULL;&#xA;    clrscr();&#xA;    do {&#xA;        //clrscr();&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n\t...SINGLY LINKED LIST...\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n1.INSERT AT BEGINNING\n2.INSERT AT END\n3.INSERT AT A SPECIFIED POSITION&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n4.DELETION FROM BEGINNING\n5.DELETION FROM END\n6.DELETION FROM A SPECIFIED POSITION&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n7.DISPLAY\n8.EXIT\n\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter your choice: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;        switch (ch) {&#xA;            case 1:&#xA;                ob.insertbeg();&#xA;                break;&#xA;            case 2:&#xA;                ob.insertend();&#xA;                break;&#xA;            case 3:&#xA;                ob.insertsp();&#xA;                break;&#xA;            case 4:&#xA;                ob.delbeg();&#xA;                break;&#xA;            case 5:&#xA;                ob.delend();&#xA;                break;&#xA;            case 6:&#xA;                ob.delsp();&#xA;                break;&#xA;            case 7:&#xA;                ob.display();&#xA;                break;&#xA;            case 8:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\t ....THANKS....&amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            default:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\t INVALID KEY-IN &amp;quot;;&#xA;        }&#xA;    } while (1);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-15&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-15&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;...SINGLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 1&#xA;&#xA;Enter the data: 23&#xA;&#xA;&#xA;...SINGLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 1&#xA;&#xA;Enter the data: 44&#xA;&#xA;&#xA;...SINGLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 2&#xA;&#xA;Enter the data: 56&#xA;&#xA;&#xA;...SINGLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 3&#xA;&#xA;Enter the data: 99&#xA;&#xA;Enter the position: 2&#xA;&#xA;&#xA;...SINGLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 7&#xA;&#xA;Data list: 44 99 23 56&#xA;&#xA;&#xA;&#xA;...SINGLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 4&#xA;44&#xA;&#xA;&#xA;...SINGLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 5&#xA;56&#xA;&#xA;...SINGLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 6&#xA;&#xA;Enter the item: 23&#xA;23&#xA;&#xA;...SINGLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 7&#xA;&#xA;Data list: 99&#xA;&#xA;...SINGLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 8&#xA;&#xA;....THANKS....&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-implement-a-circular-linked-list&#34;&gt;&#xA;  Write a C++ program to implement a circular linked list&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-implement-a-circular-linked-list&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;quot;iostream.h&amp;quot;&#xA;#include&amp;quot;conio.h&amp;quot;&#xA;#include&amp;quot;process.h&amp;quot;&#xA;#include&amp;quot;stdio.h&amp;quot;&#xA;&#xA;#define MAX 25&#xA;&#xA;class node {&#xA;    int data;&#xA;    node * next;&#xA;    public:&#xA;    void display();&#xA;    void insertend();&#xA;    void insertbeg();&#xA;    void insertsp();&#xA;    void delbeg();&#xA;    void delend();&#xA;    void delsp();&#xA;};&#xA;node * head, * temp, * start, * t, * last;&#xA;&#xA;void node::display() {&#xA;    temp = start;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Data list: &amp;quot;;&#xA;    while (temp != last) {&#xA;        cout&amp;lt;&amp;lt;temp - &amp;gt; data &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;        temp = temp - &amp;gt; next;&#xA;    }&#xA;    cout&amp;lt;&amp;lt;last - &amp;gt; data;&#xA;}&#xA;&#xA;void node::insertbeg() {&#xA;    head = new node;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the data: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;head - &amp;gt; data;&#xA;&#xA;    if (start == NULL) {&#xA;        start = last = head;&#xA;        last - &amp;gt; next = NULL;&#xA;    } else {&#xA;        head - &amp;gt; next = start;&#xA;        last - &amp;gt; next = head;&#xA;        start = head;&#xA;    }&#xA;}&#xA;&#xA;void node::insertend() {&#xA;    head = new node;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the data: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;head - &amp;gt; data;&#xA;&#xA;    if (start == NULL) {&#xA;        start = last = head;&#xA;        last - &amp;gt; next = head;&#xA;    } else {&#xA;        last - &amp;gt; next = head;&#xA;        head - &amp;gt; next = start;&#xA;        last = head;&#xA;    }&#xA;}&#xA;&#xA;void node::insertsp() {&#xA;    int pos, i;&#xA;    head = new node;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the data: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;head - &amp;gt; data;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the position: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;pos;&#xA;    if (pos == 1) {&#xA;        insertbeg();&#xA;        return;&#xA;    } else {&#xA;        temp = start;&#xA;        for (i = 1; i &amp;lt; pos - 1; i++) {&#xA;            temp = temp - &amp;gt; next;&#xA;        }&#xA;        head - &amp;gt; next = temp - &amp;gt; next;&#xA;        temp - &amp;gt; next = head;&#xA;&#xA;    }&#xA;}&#xA;&#xA;void node::delbeg() {&#xA;&#xA;    if (start == NULL)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n LIST EMPTY &amp;quot;;&#xA;&#xA;    else if (start - &amp;gt; next == start) {&#xA;        temp = start;&#xA;        cout&amp;lt;&amp;lt;temp - &amp;gt; data;&#xA;        start = last = NULL;&#xA;        delete temp;&#xA;    } else {&#xA;        temp = start;&#xA;        cout&amp;lt;&amp;lt;start - &amp;gt; data;&#xA;        start = start - &amp;gt; next;&#xA;        last - &amp;gt; next = start;&#xA;        delete temp;&#xA;    }&#xA;}&#xA;&#xA;void node::delend() {&#xA;    temp = start;&#xA;    if (start == NULL)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n LIST EMPTY &amp;quot;;&#xA;    else if (start - &amp;gt; next == start) {&#xA;        temp = start;&#xA;        cout&amp;lt;&amp;lt;temp - &amp;gt; data;&#xA;        start = last = NULL;&#xA;        delete temp;&#xA;    } else {&#xA;        temp = start;&#xA;        if (temp - &amp;gt; next != last) {&#xA;            temp = temp - &amp;gt; next;&#xA;        }&#xA;        t = last;&#xA;        cout&amp;lt;&amp;lt;t - &amp;gt; data;&#xA;        temp - &amp;gt; next = start;&#xA;        last = temp;&#xA;        delete t;&#xA;    }&#xA;}&#xA;&#xA;void node::delsp() {&#xA;&#xA;    if (start == NULL) {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n LIST EMPTY &amp;quot;;&#xA;        return;&#xA;    }&#xA;&#xA;    int item;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the item: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;item;&#xA;    int i = 0;&#xA;    for (temp = start; i &amp;lt; MAX; i++, t = temp, temp = temp - &amp;gt; next) {&#xA;        if (temp - &amp;gt; data == item) {&#xA;            if (temp == start) {&#xA;                delbeg();&#xA;                return;&#xA;            } else if (temp == last) {&#xA;                delend();&#xA;                return;&#xA;            } else {&#xA;                t - &amp;gt; next = temp - &amp;gt; next;&#xA;                delete temp;&#xA;                return;&#xA;            }&#xA;        }&#xA;&#xA;&#xA;    }&#xA;}&#xA;&#xA;void main() {&#xA;    int ch;&#xA;    node ob;&#xA;    start = last = NULL;&#xA;    clrscr();&#xA;    do {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n\t...CIRCULAR LINKED LIST...\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n1.INSERT AT BEGINNING\n2.INSERT AT END\n3.INSERT AT A SPECIFIED POSITION&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n4.DELETION FROM BEGINNING\n5.DELETION FROM END\n6.DELETION FROM A SPECIFIED POSITION&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n7.DISPLAY\n8.EXIT\n\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter your choice: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;        switch (ch) {&#xA;            case 1:&#xA;                ob.insertbeg();&#xA;                break;&#xA;            case 2:&#xA;                ob.insertend();&#xA;                break;&#xA;            case 3:&#xA;                ob.insertsp();&#xA;                break;&#xA;            case 4:&#xA;                ob.delbeg();&#xA;                break;&#xA;            case 5:&#xA;                ob.delend();&#xA;                break;&#xA;            case 6:&#xA;                ob.delsp();&#xA;                break;&#xA;            case 7:&#xA;                ob.display();&#xA;                break;&#xA;            case 8:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\t ....THANKS....&amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            default:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\t INVALID KEY-IN &amp;quot;;&#xA;        }&#xA;    } while (1);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-16&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-16&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;...CIRCULAR LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 1&#xA;&#xA;Enter the data: 25&#xA;&#xA;&#xA;...CIRCULAR LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 1&#xA;&#xA;Enter the data: 47&#xA;&#xA;&#xA;...CIRCULAR LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 2&#xA;&#xA;Enter the data: 58&#xA;&#xA;&#xA;...CIRCULAR LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 3&#xA;&#xA;Enter the data: 101&#xA;&#xA;Enter the position: 2&#xA;&#xA;&#xA;...CIRCULAR LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 7&#xA;&#xA;Data list: 47 101 25 58&#xA;&#xA;&#xA;&#xA;...CIRCULAR LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 4&#xA;47&#xA;&#xA;...CIRCULAR LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 5&#xA;58&#xA;&#xA;...CIRCULAR LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 6&#xA;&#xA;Enter the item: 25&#xA;25&#xA;&#xA;...CIRCULAR LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 7&#xA;&#xA;Data list: 101&#xA;&#xA;...CIRCULAR LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 8&#xA;&#xA;....THANKS....&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-implement-a-doubly-linked-list&#34;&gt;&#xA;  Write a C++ program to implement a doubly linked list&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-implement-a-doubly-linked-list&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;quot;iostream.h&amp;quot;&#xA;#include&amp;quot;conio.h&amp;quot;&#xA;#include&amp;quot;process.h&amp;quot;&#xA;#include&amp;quot;stdio.h&amp;quot;&#xA;&#xA;class node {&#xA;    int data;&#xA;    node * next;&#xA;    node * prev;&#xA;    public:&#xA;    void display();&#xA;    void insertend();&#xA;    void insertbeg();&#xA;    void insertsp();&#xA;    void delbeg();&#xA;    void delend();&#xA;    void delsp();&#xA;};&#xA;&#xA;node * head, * temp, * start, * last, * t, * t1, * t2;&#xA;&#xA;void node::display() {&#xA;    temp = start;&#xA;    if (start == NULL) {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n LIST EMPTY &amp;quot;;&#xA;        return;&#xA;    }&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Data list: &amp;quot;;&#xA;    while (temp != last) {&#xA;        cout&amp;lt;&amp;lt;temp - &amp;gt; data &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;        temp = temp - &amp;gt; next;&#xA;    }&#xA;    cout&amp;lt;&amp;lt;last - &amp;gt; data;&#xA;}&#xA;&#xA;void node::insertbeg() {&#xA;    head = new node;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the data: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;head - &amp;gt; data;&#xA;    head - &amp;gt; prev = NULL;&#xA;    if (start == NULL) {&#xA;        head - &amp;gt; next = NULL;&#xA;        start = last = head;&#xA;    } else {&#xA;        head - &amp;gt; next = start;&#xA;        start - &amp;gt; prev = head;&#xA;        start = head;&#xA;    }&#xA;}&#xA;&#xA;void node::insertend() {&#xA;    head = new node;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the data: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;head - &amp;gt; data;&#xA;    head - &amp;gt; next = NULL;&#xA;    if (start == NULL) {&#xA;        start = last = head;&#xA;        head - &amp;gt; prev = NULL;&#xA;    } else {&#xA;        head - &amp;gt; prev = last;&#xA;        last - &amp;gt; next = head;&#xA;        last = head;&#xA;    }&#xA;}&#xA;&#xA;void node::insertsp() {&#xA;    int pos, i;&#xA;    head = new node;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the position: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;pos;&#xA;    if (pos == 1)&#xA;        insertbeg();&#xA;    else {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter the data: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;head - &amp;gt; data;&#xA;        temp = start;&#xA;        for (i = 1; i &amp;lt; pos - 1; i++) {&#xA;            temp = temp - &amp;gt; next;&#xA;        }&#xA;        if (temp - &amp;gt; next == NULL)&#xA;            last = head;&#xA;        head - &amp;gt; next = temp - &amp;gt; next;&#xA;        temp - &amp;gt; next = head;&#xA;&#xA;    }&#xA;}&#xA;&#xA;void node::delbeg() {&#xA;    if (start == NULL)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n LIST EMPTY &amp;quot;;&#xA;    else if (start == last) {&#xA;        cout&amp;lt;&amp;lt;start - &amp;gt; data;&#xA;        temp = start;&#xA;        start = last = NULL;&#xA;        delete temp;&#xA;    } else {&#xA;        temp = start;&#xA;        cout&amp;lt;&amp;lt;start - &amp;gt; data;&#xA;        start = start - &amp;gt; next;&#xA;        start - &amp;gt; prev = NULL;&#xA;        delete temp;&#xA;    }&#xA;}&#xA;&#xA;void node::delend() {&#xA;    temp = start;&#xA;    if (start == NULL)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n LIST EMPTY &amp;quot;;&#xA;    else if (start == last) {&#xA;        cout&amp;lt;&amp;lt;last - &amp;gt; data;&#xA;        temp = last;&#xA;        start = last = NULL;&#xA;        delete temp;&#xA;    } else {&#xA;        temp = last;&#xA;        cout&amp;lt;&amp;lt;last - &amp;gt; data;&#xA;        last = last - &amp;gt; prev;&#xA;        last - &amp;gt; next = NULL;&#xA;        delete temp;&#xA;    }&#xA;}&#xA;&#xA;void node::delsp() {&#xA;&#xA;    if (start == NULL) {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n LIST EMPTY &amp;quot;;&#xA;        return;&#xA;    }&#xA;&#xA;    int num;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the item: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;num;&#xA;    temp = start;&#xA;    while (temp != NULL) {&#xA;        if (temp - &amp;gt; data == num) {&#xA;            if (temp == start) {&#xA;                delbeg();&#xA;                return;&#xA;            } else if (temp == last) {&#xA;                delend();&#xA;                return;&#xA;            } else {&#xA;                cout&amp;lt;&amp;lt;temp - &amp;gt; data;&#xA;                t1 = temp - &amp;gt; prev;&#xA;                t2 = temp - &amp;gt; next;&#xA;                t1 - &amp;gt; next = t2;&#xA;                t2 - &amp;gt; prev = t1;&#xA;                delete temp;&#xA;            }&#xA;        } else {&#xA;            temp = temp - &amp;gt; next;&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;void main() {&#xA;    int ch;&#xA;    node ob;&#xA;    start = last = NULL;&#xA;    clrscr();&#xA;    do {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\t...DOUBLY LINKED LIST...\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n1.INSERT AT BEGINNING\n2.INSERT AT END\n3.INSERT AT A SPECIFIED&#xA;        POSITION &amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n4.DELETION FROM BEGINNING\n5.DELETION FROM END\n6.DELETION&#xA;        FROM A SPECIFIED POSITION &amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n7.DISPLAY\n8.EXIT\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter your choice: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;&#xA;        switch (ch) {&#xA;            case 1:&#xA;                ob.insertbeg();&#xA;                break;&#xA;            case 2:&#xA;                ob.insertend();&#xA;                break;&#xA;            case 3:&#xA;                ob.insertsp();&#xA;                break;&#xA;            case 4:&#xA;                ob.delbeg();&#xA;                break;&#xA;            case 5:&#xA;                ob.delend();&#xA;                break;&#xA;            case 6:&#xA;                ob.delsp();&#xA;                break;&#xA;            case 7:&#xA;                ob.display();&#xA;                break;&#xA;            case 8:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\t ....THANKS....&amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            default:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\t INVALID KEY-IN &amp;quot;;&#xA;        }&#xA;    } while (1);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-17&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-17&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;...DOUBLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;Enter your choice: 1&#xA;&#xA;Enter the data: 45&#xA;&#xA;...DOUBLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;Enter your choice: 1&#xA;&#xA;Enter the data: 25&#xA;&#xA;...DOUBLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;Enter your choice: 2&#xA;&#xA;Enter the data: 96&#xA;&#xA;...DOUBLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;Enter your choice: 3&#xA;&#xA;Enter the position: 3&#xA;&#xA;Enter the data: 56&#xA;&#xA;...DOUBLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;Enter your choice: 7&#xA;&#xA;Data list: 25 45 56 96&#xA;&#xA;...DOUBLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;Enter your choice: 4&#xA;25&#xA;&#xA;...DOUBLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;Enter your choice: 5&#xA;96&#xA;&#xA;...DOUBLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;Enter your choice: 6&#xA;&#xA;Enter the item: 56&#xA;&#xA;...DOUBLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;Enter your choice: 7&#xA;&#xA;Data list: 45&#xA;&#xA;...DOUBLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;Enter your choice: 8&#xA;&#xA;....THANKS....&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-implement-a-circular-doubly-linked-list&#34;&gt;&#xA;  Write a C++ program to implement a circular doubly linked list&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-implement-a-circular-doubly-linked-list&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;quot;iostream.h&amp;quot;&#xA;#include&amp;quot;conio.h&amp;quot;&#xA;#include&amp;quot;process.h&amp;quot;&#xA;#include&amp;quot;stdio.h&amp;quot;&#xA;&#xA;&#xA;class node {&#xA;    int data;&#xA;    node * next;&#xA;    node * prev;&#xA;    public:&#xA;    node() {}&#xA;    void create();&#xA;    void display();&#xA;    void insertend();&#xA;    void insertbeg();&#xA;    void insertsp();&#xA;    void delbeg();&#xA;    void delend();&#xA;    void delsp();&#xA;};&#xA;&#xA;node * temp, * t, * curr, * t1, * t2;&#xA;static node * head;&#xA;&#xA;void node::create() {&#xA;    head = new node;&#xA;    head - &amp;gt; data = 0;&#xA;    head - &amp;gt; next = head;&#xA;    head - &amp;gt; prev = head;&#xA;}&#xA;&#xA;void node::display() {&#xA;    if (head - &amp;gt; next == head)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n DATA LIST EMPTY &amp;quot;;&#xA;    else {&#xA;        temp = head;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Data list: &amp;quot;;&#xA;        while (temp - &amp;gt; next != head) {&#xA;            temp = temp - &amp;gt; next;&#xA;            cout&amp;lt;&amp;lt;temp - &amp;gt; data &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;        }&#xA;    }&#xA;&#xA;}&#xA;&#xA;void node::insertbeg() {&#xA;    curr = new node;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the data: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;curr - &amp;gt; data;&#xA;    if (head - &amp;gt; next == head) {&#xA;        head - &amp;gt; next = curr;&#xA;        curr - &amp;gt; prev = head;&#xA;        head - &amp;gt; prev = curr;&#xA;        curr - &amp;gt; next = head;&#xA;        return;&#xA;    }&#xA;    temp = head - &amp;gt; next;&#xA;    curr - &amp;gt; prev = head;&#xA;    head - &amp;gt; next = curr;&#xA;    curr - &amp;gt; next = temp;&#xA;    temp - &amp;gt; prev = curr;&#xA;&#xA;}&#xA;&#xA;void node::insertend() {&#xA;    curr = new node;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the data: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;curr - &amp;gt; data;&#xA;    temp = head - &amp;gt; prev;&#xA;    curr - &amp;gt; next = head;&#xA;    head - &amp;gt; prev = curr;&#xA;    curr - &amp;gt; prev = temp;&#xA;    temp - &amp;gt; next = curr;&#xA;}&#xA;&#xA;void node::insertsp() {&#xA;    int pos, k;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the position: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;pos;&#xA;    temp = head;&#xA;    if (pos == 1)&#xA;        insertbeg();&#xA;    else {&#xA;        for (k = 1; k &amp;lt; pos; k++) {&#xA;            temp = temp - &amp;gt; next;&#xA;        }&#xA;        curr = new node;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter the data: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;curr - &amp;gt; data;&#xA;        t = temp - &amp;gt; next;&#xA;        temp - &amp;gt; next = curr;&#xA;        curr - &amp;gt; prev = temp;&#xA;        curr - &amp;gt; next = t;&#xA;        t - &amp;gt; prev = curr;&#xA;    }&#xA;&#xA;}&#xA;&#xA;void node::delbeg() {&#xA;    if (head - &amp;gt; next == head)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n DELETION IMPOSSIBLE &amp;quot;;&#xA;&#xA;    else {&#xA;        temp = head - &amp;gt; next;&#xA;        cout&amp;lt;&amp;lt;temp - &amp;gt; data;&#xA;        t = head - &amp;gt; next = temp - &amp;gt; next;&#xA;        t - &amp;gt; prev = head;&#xA;        delete temp;&#xA;    }&#xA;}&#xA;&#xA;void node::delend() {&#xA;    if (head - &amp;gt; prev == head)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n DELETION IMPOSSIBLE &amp;quot;;&#xA;&#xA;    else {&#xA;        temp = head - &amp;gt; prev;&#xA;        cout&amp;lt;&amp;lt;temp - &amp;gt; data;&#xA;        t = head - &amp;gt; prev = temp - &amp;gt; prev;&#xA;        t - &amp;gt; next = head;&#xA;        delete temp;&#xA;    }&#xA;}&#xA;&#xA;void node::delsp() {&#xA;    if (head - &amp;gt; next == head) {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n DELETION IMPOSSIBLE &amp;quot;;&#xA;        return;&#xA;    } else {&#xA;        int item;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter the item: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;item;&#xA;        temp = head;&#xA;        do {&#xA;            if (temp - &amp;gt; data == item) {&#xA;                if (temp - &amp;gt; prev == head) {&#xA;                    delbeg();&#xA;                    return;&#xA;                } else if (temp - &amp;gt; next == head) {&#xA;                    delend();&#xA;                    return;&#xA;                } else {&#xA;                    t1 = temp - &amp;gt; prev;&#xA;                    t2 = temp - &amp;gt; next;&#xA;                    t1 - &amp;gt; next = t2;&#xA;                    t2 - &amp;gt; prev = t1;&#xA;                    delete temp;&#xA;                    return;&#xA;                }&#xA;            } else {&#xA;                temp = temp - &amp;gt; next;&#xA;            }&#xA;        } while (temp != head);&#xA;    }&#xA;&#xA;}&#xA;&#xA;void main() {&#xA;    int ch;&#xA;    node ob;&#xA;    clrscr();&#xA;    ob.create();&#xA;    do {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n\t...CIRCULAR DOUBLY LINKED LIST...\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n1.INSERT AT BEGINNING\n2.INSERT AT END\n3.INSERT AT A SPECIFIED POSITION&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n4.DELETION FROM BEGINNING\n5.DELETION FROM END\n6.DELETION FROM A SPECIFIED POSITION&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n7.DISPLAY\n8.EXIT\n\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter your choice: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;        switch (ch) {&#xA;            case 1:&#xA;                ob.insertbeg();&#xA;                break;&#xA;            case 2:&#xA;                ob.insertend();&#xA;                break;&#xA;            case 3:&#xA;                ob.insertsp();&#xA;                break;&#xA;            case 4:&#xA;                ob.delbeg();&#xA;                break;&#xA;            case 5:&#xA;                ob.delend();&#xA;                break;&#xA;            case 6:&#xA;                ob.delsp();&#xA;                break;&#xA;            case 7:&#xA;                ob.display();&#xA;                break;&#xA;            case 8:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\t ....THANKS....&amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            default:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\t INVALID KEY-IN &amp;quot;;&#xA;        }&#xA;    } while (1);&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-18&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-18&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;...CIRCULAR DOUBLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 1&#xA;&#xA;Enter the data: 21&#xA;&#xA;&#xA;...CIRCULAR DOUBLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 1&#xA;&#xA;Enter the data: 41&#xA;&#xA;&#xA;...CIRCULAR DOUBLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 2&#xA;&#xA;Enter the data: 51&#xA;&#xA;&#xA;...CIRCULAR DOUBLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 3&#xA;&#xA;Enter the position: 2&#xA;&#xA;Enter the data: 91&#xA;&#xA;&#xA;...CIRCULAR DOUBLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 7&#xA;&#xA;Data list: 41 91 21 51&#xA;&#xA;&#xA;&#xA;...CIRCULAR DOUBLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 4&#xA;41&#xA;&#xA;...CIRCULAR DOUBLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 5&#xA;51&#xA;&#xA;...CIRCULAR DOUBLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;Enter your choice: 6&#xA;&#xA;Enter the item: 21&#xA;21&#xA;&#xA;...CIRCULAR DOUBLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 7&#xA;&#xA;Data list: 91&#xA;&#xA;...CIRCULAR DOUBLY LINKED LIST...&#xA;&#xA;1. INSERT AT BEGINNING&#xA;2. INSERT AT END&#xA;3. INSERT AT A SPECIFIED POSITION&#xA;4. DELETION FROM BEGINNING&#xA;5. DELETION FROM END&#xA;6. DELETION FROM A SPECIFIED POSITION&#xA;7. DISPLAY&#xA;8. Exit&#xA;&#xA;&#xA;Enter your choice: 8&#xA;&#xA;....THANKS....&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-implement-a-stack-using-linked-list&#34;&gt;&#xA;  Write a C++ program to implement a stack using linked list&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-implement-a-stack-using-linked-list&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;quot;iostream.h&amp;quot;&#xA;#include&amp;quot;conio.h&amp;quot;&#xA;#include&amp;quot;process.h&amp;quot;&#xA;#include&amp;quot;stdio.h&amp;quot;&#xA;&#xA;class node {&#xA;    int data;&#xA;    node * next;&#xA;    public:&#xA;    void display();&#xA;    void push();&#xA;    void pop();&#xA;};&#xA;node * head, * temp, * start, * t;&#xA;&#xA;void node::display() {&#xA;    temp = start;&#xA;    if (temp == NULL)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n STACK EMPTY &amp;quot;;&#xA;    else&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n STACK: &amp;quot;;&#xA;    while (temp != NULL) {&#xA;        cout&amp;lt;&amp;lt;temp - &amp;gt; data &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;        temp = temp - &amp;gt; next;&#xA;    }&#xA;}&#xA;&#xA;&#xA;void node::push() {&#xA;    head = new node;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the data: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;head - &amp;gt; data;&#xA;    head - &amp;gt; next = NULL;&#xA;&#xA;    if (start == NULL) {&#xA;        start = head;&#xA;    } else {&#xA;        temp = start;&#xA;        while (temp - &amp;gt; next != NULL) {&#xA;            temp = temp - &amp;gt; next;&#xA;        }&#xA;        temp - &amp;gt; next = head;&#xA;    }&#xA;}&#xA;&#xA;void node::pop() {&#xA;    temp = start;&#xA;    if (start == NULL)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n STACK EMPTY &amp;quot;;&#xA;&#xA;    else if (temp - &amp;gt; next == NULL) {&#xA;        cout&amp;lt;&amp;lt;temp - &amp;gt; data;&#xA;        start = NULL;&#xA;        delete temp;&#xA;    } else {&#xA;        while (temp - &amp;gt; next != NULL) {&#xA;            t = temp;&#xA;            temp = temp - &amp;gt; next;&#xA;        }&#xA;        cout&amp;lt;&amp;lt;temp - &amp;gt; data;&#xA;        t - &amp;gt; next = NULL;&#xA;        delete temp;&#xA;    }&#xA;}&#xA;&#xA;void main() {&#xA;    int ch;&#xA;    node ob;&#xA;    start = NULL;&#xA;    clrscr();&#xA;    do {&#xA;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n\t...STACK USING LINKED LIST...\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n1.PUSH\n2.POP\n3.DISPLAY\n4.EXIT\n\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter your choice: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;        switch (ch) {&#xA;            case 1:&#xA;                ob.push();&#xA;                break;&#xA;            case 2:&#xA;                ob.pop();&#xA;                break;&#xA;            case 3:&#xA;                ob.display();&#xA;                break;&#xA;            case 4:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\t ....THANKS....&amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            default:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\t INVALID KEY-IN &amp;quot;;&#xA;        }&#xA;    } while (1);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-19&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-19&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;...STACK USING LINKED LIST...&#xA;&#xA;1. PUSH&#xA;2. POP&#xA;3. DISPLAY&#xA;4. Exit&#xA;&#xA;Enter your choice: 1&#xA;&#xA;Enter the data: 23&#xA;&#xA;...STACK USING LINKED LIST...&#xA;&#xA;1. PUSH&#xA;2. POP&#xA;3. DISPLAY&#xA;4. Exit&#xA;&#xA;Enter your choice: 1&#xA;&#xA;Enter the data: 45&#xA;&#xA;...STACK USING LINKED LIST...&#xA;&#xA;1. PUSH&#xA;2. POP&#xA;3. DISPLAY&#xA;4. Exit&#xA;&#xA;Enter your choice: 3&#xA;&#xA;STACK: 23 45&#xA;&#xA;...STACK USING LINKED LIST...&#xA;&#xA;1. PUSH&#xA;2. POP&#xA;3. DISPLAY&#xA;4. Exit&#xA;&#xA;Enter your choice: 2&#xA;45&#xA;&#xA;...STACK USING LINKED LIST...&#xA;&#xA;1. PUSH&#xA;2. POP&#xA;3. DISPLAY&#xA;4. Exit&#xA;&#xA;Enter your choice: 3&#xA;&#xA;STACK: 23&#xA;&#xA;...STACK USING LINKED LIST...&#xA;&#xA;1. PUSH&#xA;2. POP&#xA;3. DISPLAY&#xA;4. Exit&#xA;&#xA;Enter your choice: 4&#xA;&#xA;....THANKS....&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-implement-a-simple-queue-using-linked-list&#34;&gt;&#xA;  Write a C++ program to implement a simple queue using linked list&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-implement-a-simple-queue-using-linked-list&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;quot;iostream.h&amp;quot;&#xA;#include&amp;quot;conio.h&amp;quot;&#xA;#include&amp;quot;process.h&amp;quot;&#xA;#include&amp;quot;stdio.h&amp;quot;&#xA;&#xA;class node {&#xA;    int data;&#xA;    node * next;&#xA;    public:&#xA;    void display();&#xA;    void insert();&#xA;    void del();&#xA;};&#xA;&#xA;node * head, * temp, * start, * t;&#xA;&#xA;void node::display() {&#xA;    temp = start;&#xA;    if (temp == NULL)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n QUEUE EMPTY &amp;quot;;&#xA;    else&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n QUEUE: &amp;quot;;&#xA;    while (temp != NULL) {&#xA;        cout&amp;lt;&amp;lt;temp - &amp;gt; data &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;        temp = temp - &amp;gt; next;&#xA;    }&#xA;}&#xA;&#xA;void node::insert() {&#xA;    head = new node;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the data: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;head - &amp;gt; data;&#xA;    head - &amp;gt; next = NULL;&#xA;&#xA;    if (start == NULL) {&#xA;        start = head;&#xA;    } else {&#xA;        temp = start;&#xA;        while (temp - &amp;gt; next != NULL) {&#xA;            temp = temp - &amp;gt; next;&#xA;        }&#xA;        temp - &amp;gt; next = head;&#xA;    }&#xA;}&#xA;&#xA;void node::del() {&#xA;    if (start == NULL)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n QUEUE EMPTY &amp;quot;;&#xA;    else {&#xA;        temp = start;&#xA;        cout&amp;lt;&amp;lt;start - &amp;gt; data;&#xA;        start = start - &amp;gt; next;&#xA;        delete temp;&#xA;    }&#xA;}&#xA;&#xA;void main() {&#xA;    int ch;&#xA;    node ob;&#xA;    start = NULL;&#xA;    clrscr();&#xA;    do {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\t...QUEUE USING LINKED LIST...\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n1.INSERTION\n2.DELETION\n3.DISPLAY\n4.EXIT\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter your choice: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;        switch (ch) {&#xA;            case 1:&#xA;                ob.insert();&#xA;                break;&#xA;            case 2:&#xA;                ob.del();&#xA;                break;&#xA;            case 3:&#xA;                ob.display();&#xA;                break;&#xA;            case 4:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\t ....THANKS....&amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            default:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\t INVALID KEY-IN &amp;quot;;&#xA;        }&#xA;    } while (1);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-20&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-20&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;...QUEUE USING LINKED LIST...&#xA;&#xA;1. INSERTION&#xA;2. DELETION&#xA;3. DISPLAY&#xA;4. Exit&#xA;&#xA;Enter your choice: 1&#xA;&#xA;Enter the data: 25&#xA;&#xA;...QUEUE USING LINKED LIST...&#xA;&#xA;1. INSERTION&#xA;2. DELETION&#xA;3. DISPLAY&#xA;4. Exit&#xA;&#xA;Enter your choice: 1&#xA;&#xA;Enter the data: 50&#xA;&#xA;...QUEUE USING LINKED LIST...&#xA;&#xA;1. INSERTION&#xA;2. DELETION&#xA;3. DISPLAY&#xA;4. Exit&#xA;&#xA;Enter your choice: 3&#xA;&#xA;QUEUE: 25 50&#xA;&#xA;...QUEUE USING LINKED LIST...&#xA;&#xA;1. INSERTION&#xA;2. DELETION&#xA;3. DISPLAY&#xA;4. Exit&#xA;&#xA;Enter your choice: 2&#xA;25&#xA;&#xA;...QUEUE USING LINKED LIST...&#xA;&#xA;1. INSERTION&#xA;2. DELETION&#xA;3. DISPLAY&#xA;4. Exit&#xA;&#xA;Enter your choice: 3&#xA;&#xA;QUEUE: 50&#xA;&#xA;...QUEUE USING LINKED LIST...&#xA;&#xA;1. INSERTION&#xA;2. DELETION&#xA;3. DISPLAY&#xA;4. Exit&#xA;&#xA;Enter your choice: 4&#xA;&#xA;....THANKS....&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-implement-a-circular-queue-using-linked-list&#34;&gt;&#xA;  Write a C++ program to implement a circular queue using linked list&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-implement-a-circular-queue-using-linked-list&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;quot;iostream.h&amp;quot;&#xA;#include&amp;quot;conio.h&amp;quot;&#xA;#include&amp;quot;process.h&amp;quot;&#xA;#include&amp;quot;stdio.h&amp;quot;&#xA;&#xA;class node {&#xA;    int data;&#xA;    node * next;&#xA;    public:&#xA;    node() {}&#xA;    void display();&#xA;    void insert();&#xA;    void del();&#xA;};&#xA;&#xA;node * head, * temp, * start, * t, * last;&#xA;&#xA;void node::display() {&#xA;    temp = start;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Data list: &amp;quot;;&#xA;    while (temp != last) {&#xA;        cout&amp;lt;&amp;lt;temp - &amp;gt; data &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;        temp = temp - &amp;gt; next;&#xA;    }&#xA;    cout&amp;lt;&amp;lt;last - &amp;gt; data;&#xA;}&#xA;&#xA;void node::insert() {&#xA;    head = new node;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the data: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;head - &amp;gt; data;&#xA;&#xA;    if (start == NULL) {&#xA;        start = last = head;&#xA;        last - &amp;gt; next = head;&#xA;    } else {&#xA;        last - &amp;gt; next = head;&#xA;        head - &amp;gt; next = start;&#xA;        last = head;&#xA;    }&#xA;&#xA;}&#xA;&#xA;void node::del() {&#xA;&#xA;    if (start == NULL)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n LIST EMPTY &amp;quot;;&#xA;&#xA;    else if (start - &amp;gt; next == start) {&#xA;        temp = start;&#xA;        cout&amp;lt;&amp;lt;temp - &amp;gt; data;&#xA;        start = last = NULL;&#xA;        delete temp;&#xA;&#xA;    } else {&#xA;        temp = start;&#xA;        cout&amp;lt;&amp;lt;start - &amp;gt; data;&#xA;        start = start - &amp;gt; next;&#xA;        last - &amp;gt; next = start;&#xA;        delete temp;&#xA;    }&#xA;}&#xA;&#xA;void main() {&#xA;    int ch;&#xA;    node ob;&#xA;    start = last = NULL;&#xA;&#xA;    clrscr();&#xA;    do {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n\t...CIRCULAR QUEUE USING LL...\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n1.INSERTION\n2.DELETION\n3.DISPLAY\n4.EXIT\n\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter your choice: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;        switch (ch) {&#xA;            case 1:&#xA;                ob.insert();&#xA;                break;&#xA;            case 2:&#xA;                ob.del();&#xA;                break;&#xA;            case 3:&#xA;                ob.display();&#xA;                break;&#xA;            case 4:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\t ....THANKS....&amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            default:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\t INVALID KEY-IN &amp;quot;;&#xA;        }&#xA;    } while (1);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-21&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-21&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;...CIRCULAR QUEUE USING LL...&#xA;&#xA;1. INSERTION&#xA;2. DELETION&#xA;3. DISPLAY&#xA;4. Exit&#xA;&#xA;Enter your choice: 1&#xA;&#xA;Enter the data: 23&#xA;&#xA;...CIRCULAR QUEUE USING LL...&#xA;&#xA;1. INSERTION&#xA;2. DELETION&#xA;3. DISPLAY&#xA;4. Exit&#xA;&#xA;Enter your choice: 1&#xA;&#xA;Enter the data: 44&#xA;&#xA;&#xA;...CIRCULAR QUEUE USING LL...&#xA;&#xA;1. INSERTION&#xA;2. DELETION&#xA;3. DISPLAY&#xA;4. Exit&#xA;&#xA;Enter your choice: 3&#xA;&#xA;Data list: 23 44&#xA;&#xA;...CIRCULAR QUEUE USING LL...&#xA;&#xA;1. INSERTION&#xA;2. DELETION&#xA;3. DISPLAY&#xA;4. Exit&#xA;&#xA;Enter your choice: 2&#xA;23&#xA;&#xA;&#xA;...CIRCULAR QUEUE USING LL...&#xA;&#xA;1. INSERTION&#xA;2. DELETION&#xA;3. DISPLAY&#xA;4. Exit&#xA;&#xA;Enter your choice: 3&#xA;&#xA;Data list: 44&#xA;&#xA;&#xA;...CIRCULAR QUEUE USING LL...&#xA;&#xA;1. INSERTION&#xA;2. DELETION&#xA;3. DISPLAY&#xA;4. Exit&#xA;&#xA;Enter your choice: 4&#xA;&#xA;....THANKS....&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-implement-a-priority-queue-using-linked-list&#34;&gt;&#xA;  Write a C++ program to implement a priority queue using linked list&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-implement-a-priority-queue-using-linked-list&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;quot;iostream.h&amp;quot;&#xA;#include&amp;quot;conio.h&amp;quot;&#xA;#include&amp;quot;process.h&amp;quot;&#xA;#include&amp;quot;stdio.h&amp;quot;&#xA;&#xA;class node {&#xA;    int data;&#xA;    int prty;&#xA;    node * next;&#xA;    public:&#xA;    void display();&#xA;    void insert();&#xA;    void del();&#xA;    void delbeg();&#xA;};&#xA;&#xA;node * head, * temp, * start, * t;&#xA;&#xA;void node::display() {&#xA;&#xA;    temp = start;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Data list: &amp;quot;;&#xA;&#xA;    while (temp != NULL) {&#xA;        printf(&amp;quot;%3d &amp;quot;, temp - &amp;gt; data);&#xA;        temp = temp - &amp;gt; next;&#xA;    }&#xA;&#xA;    temp = start;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Priority: &amp;quot;;&#xA;&#xA;    while (temp != NULL) {&#xA;        printf(&amp;quot;%3d &amp;quot;, temp - &amp;gt; prty);&#xA;        temp = temp - &amp;gt; next;&#xA;    }&#xA;&#xA;}&#xA;&#xA;&#xA;void node::insert() {&#xA;&#xA;    head = new node;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the data: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;head - &amp;gt; data;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter the priority: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;head - &amp;gt; prty;&#xA;    head - &amp;gt; next = NULL;&#xA;&#xA;    if (start == NULL) {&#xA;        start = head;&#xA;    } else {&#xA;        temp = start;&#xA;        while (temp - &amp;gt; next != NULL) {&#xA;            temp = temp - &amp;gt; next;&#xA;        }&#xA;        temp - &amp;gt; next = head;&#xA;&#xA;    }&#xA;&#xA;}&#xA;&#xA;void node::delbeg() {&#xA;    if (start == NULL)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n LIST EMPTY &amp;quot;;&#xA;    else {&#xA;        cout&amp;lt;&amp;lt;start - &amp;gt; data;&#xA;        start = start - &amp;gt; next;&#xA;        delete temp;&#xA;    }&#xA;}&#xA;&#xA;&#xA;void node::del() {&#xA;&#xA;    if (start == NULL) {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n LIST EMPTY &amp;quot;;&#xA;        return;&#xA;    }&#xA;&#xA;    int lp;&#xA;    temp = start;&#xA;    lp = temp - &amp;gt; prty;&#xA;&#xA;    while (temp != NULL) {&#xA;        if (temp - &amp;gt; prty &amp;gt; lp) {&#xA;            lp = temp - &amp;gt; prty;&#xA;        }&#xA;        temp = temp - &amp;gt; next;&#xA;    }&#xA;&#xA;    temp = start;&#xA;    while (temp != NULL) {&#xA;        if (temp - &amp;gt; prty == lp) {&#xA;            if (temp == start) {&#xA;                delbeg();&#xA;                return;&#xA;            } else {&#xA;                cout&amp;lt;&amp;lt;temp - &amp;gt; data;&#xA;                t - &amp;gt; next = temp - &amp;gt; next;&#xA;                delete temp;&#xA;                return;&#xA;            }&#xA;        } else {&#xA;            t = temp;&#xA;            temp = temp - &amp;gt; next;&#xA;        }&#xA;&#xA;    }&#xA;}&#xA;&#xA;void main() {&#xA;    int ch;&#xA;    node ob;&#xA;    start = NULL;&#xA;    clrscr();&#xA;    do {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n\t...PRIORITY QUEUE USING LL...\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n1.INSERTION\n2.DELETION\n3.DISPLAY\n4.EXIT\n\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter your choice: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;        switch (ch) {&#xA;            case 1:&#xA;                ob.insert();&#xA;                break;&#xA;            case 2:&#xA;                ob.del();&#xA;                break;&#xA;            case 3:&#xA;                ob.display();&#xA;                break;&#xA;            case 4:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\t ....THANKS....&amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            default:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\t INVALID KEY-IN &amp;quot;;&#xA;        }&#xA;    } while (1);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-22&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-22&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;...PRIORITY QUEUE USING LL...&#xA;&#xA;1. INSERTION&#xA;2. DELETION&#xA;3. DISPLAY&#xA;4. Exit&#xA;&#xA;&#xA;Enter your choice: 1&#xA;&#xA;Enter the data: 23&#xA;&#xA;Enter the priority: 5&#xA;&#xA;&#xA;...PRIORITY QUEUE USING LL...&#xA;&#xA;1. INSERTION&#xA;2. DELETION&#xA;3. DISPLAY&#xA;4. Exit&#xA;&#xA;&#xA;Enter your choice: 1&#xA;&#xA;Enter the data: 96&#xA;&#xA;Enter the priority: 6&#xA;&#xA;&#xA;...PRIORITY QUEUE USING LL...&#xA;&#xA;1. INSERTION&#xA;2. DELETION&#xA;3. DISPLAY&#xA;4. Exit&#xA;&#xA;&#xA;Enter your choice: 3&#xA;&#xA;Data list: 23 96&#xA;Priority: 5 6&#xA;&#xA;&#xA;...PRIORITY QUEUE USING LL...&#xA;&#xA;1. INSERTION&#xA;2. DELETION&#xA;3. DISPLAY&#xA;4. Exit&#xA;&#xA;&#xA;Enter your choice: 2&#xA;96&#xA;&#xA;&#xA;...PRIORITY QUEUE USING LL...&#xA;&#xA;1. INSERTION&#xA;2. DELETION&#xA;3. DISPLAY&#xA;4. Exit&#xA;&#xA;&#xA;Enter your choice: 3&#xA;&#xA;Data list: 23&#xA;Priority: 5&#xA;&#xA;...PRIORITY QUEUE USING LL...&#xA;&#xA;&#xA;1. INSERTION&#xA;2. DELETION&#xA;3. DISPLAY&#xA;4. Exit&#xA;&#xA;&#xA;Enter your choice: 4&#xA;&#xA;....THANKS....&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-perform-polynomial-addition-using-linked-list&#34;&gt;&#xA;  Write a C++ program to perform polynomial addition using linked list&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-perform-polynomial-addition-using-linked-list&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;quot;iostream.h&amp;quot;&#xA;#include&amp;quot;conio.h&amp;quot;&#xA;#include&amp;quot;process.h&amp;quot;&#xA;&#xA;struct node {&#xA;    int co, exp;&#xA;    node * next;&#xA;};&#xA;&#xA;class poly {&#xA;    node * start, * temp, * head;&#xA;    public:&#xA;    poly() {&#xA;        start = NULL;&#xA;    }&#xA;    void create();&#xA;    void display();&#xA;    void add(poly, poly);&#xA;};&#xA;&#xA;void poly::create() {&#xA;    int n;&#xA;    do {&#xA;        head = new node;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter values for coefficient and exponent: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;head - &amp;gt; co&amp;gt;&amp;gt;head - &amp;gt; exp;&#xA;        head - &amp;gt; next = NULL;&#xA;        if (head - &amp;gt; co == 0)&#xA;            goto PROCEED;&#xA;        else if (start == NULL)&#xA;            start = temp = head;&#xA;        else {&#xA;            temp - &amp;gt; next = head;&#xA;            temp = head;&#xA;        }&#xA;&#xA;        PROCEED:&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Continue? ,then press \&amp;quot;1\&amp;quot;:&amp;quot;;&#xA;        cin&amp;gt;&amp;gt;n;&#xA;    } while (n == 1);&#xA;}&#xA;&#xA;void poly::display() {&#xA;    temp = start;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n\n........................................\n\n\n\t&amp;quot;;&#xA;    while (temp - &amp;gt; next != NULL) {&#xA;        cout&amp;lt;&amp;lt;temp - &amp;gt; co &amp;lt;&amp;lt;&amp;quot;x^&amp;quot; &amp;lt;&amp;lt;temp - &amp;gt; exp &amp;lt;&amp;lt;&amp;quot;+&amp;quot;;&#xA;        temp = temp - &amp;gt; next;&#xA;    }&#xA;    cout&amp;lt;&amp;lt;temp - &amp;gt; co &amp;lt;&amp;lt;&amp;quot;x^&amp;quot; &amp;lt;&amp;lt;temp - &amp;gt; exp;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n\n........................................\n&amp;quot;;&#xA;}&#xA;&#xA;void poly::add(poly r1, poly r2) {&#xA;    r1.temp = r1.start;&#xA;    r2.temp = r2.start;&#xA;    while (r1.temp != NULL &amp;amp;&amp;amp; r2.temp != NULL) {&#xA;        if (r1.temp - &amp;gt; exp &amp;gt; r2.temp - &amp;gt; exp) {&#xA;            head = new node;&#xA;            head - &amp;gt; co = r1.temp - &amp;gt; co;&#xA;            head - &amp;gt; exp = r1.temp - &amp;gt; exp;&#xA;            head - &amp;gt; next = NULL;&#xA;            if (start == NULL)&#xA;                start = temp = head;&#xA;            else {&#xA;                temp - &amp;gt; next = head;&#xA;                temp = head;&#xA;            }&#xA;            r1.temp = r1.temp - &amp;gt; next;&#xA;        } else if (r1.temp - &amp;gt; expexp) {&#xA;            head = new node;&#xA;            head - &amp;gt; co = r2.temp - &amp;gt; co;&#xA;            head - &amp;gt; exp = r2.temp - &amp;gt; exp;&#xA;            head - &amp;gt; next = NULL;&#xA;            if (start == NULL)&#xA;                start = temp = head;&#xA;            else {&#xA;                temp - &amp;gt; next = head;&#xA;                temp = head;&#xA;            }&#xA;            r2.temp = r2.temp - &amp;gt; next;&#xA;        } else {&#xA;            head = new node;&#xA;            head - &amp;gt; co = r1.temp - &amp;gt; co + r2.temp - &amp;gt; co;&#xA;            head - &amp;gt; exp = r1.temp - &amp;gt; exp;&#xA;            head - &amp;gt; next = NULL;&#xA;            if (start == NULL)&#xA;                start = temp = head;&#xA;            else {&#xA;                temp - &amp;gt; next = head;&#xA;                temp = head;&#xA;            }&#xA;            r1.temp = r1.temp - &amp;gt; next;&#xA;            r2.temp = r2.temp - &amp;gt; next;&#xA;        }&#xA;    }&#xA;&#xA;    while (r1.temp != NULL) {&#xA;        head = new node;&#xA;        head - &amp;gt; co = r1.temp - &amp;gt; co;&#xA;        head - &amp;gt; exp = r1.temp - &amp;gt; exp;&#xA;        head - &amp;gt; next = NULL;&#xA;        if (start == NULL)&#xA;            start = temp = head;&#xA;        else {&#xA;            temp - &amp;gt; next = head;&#xA;            temp = head;&#xA;        }&#xA;        r1.temp = r1.temp - &amp;gt; next;&#xA;    }&#xA;&#xA;    while (r2.temp != NULL) {&#xA;        head = new node;&#xA;        head - &amp;gt; co = r2.temp - &amp;gt; co;&#xA;        head - &amp;gt; exp = r2.temp - &amp;gt; exp;&#xA;        head - &amp;gt; next = NULL;&#xA;        if (start == NULL)&#xA;            start = temp = head;&#xA;        else {&#xA;            temp - &amp;gt; next = head;&#xA;            temp = head;&#xA;        }&#xA;        r2.temp = r2.temp - &amp;gt; next;&#xA;    }&#xA;&#xA;}&#xA;&#xA;void main() {&#xA;    poly p1, p2, p3;&#xA;    clrscr();&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n First polynomial...&amp;quot;;&#xA;    p1.create();&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Second polynomial...&amp;quot;;&#xA;    p2.create();&#xA;    p3.add(p1, p2);&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Result of addition: &amp;quot;;&#xA;    p3.display();&#xA;    getch();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-23&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-23&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;First polynomial...&#xA;Enter values for coefficient and exponent: 4 3&#xA;&#xA;Continue ? , then press &amp;quot;1&amp;quot; : 1&#xA;&#xA;Enter values for coefficient and exponent: 5 2&#xA;&#xA;Continue ? , then press &amp;quot;1&amp;quot; : 1&#xA;&#xA;Enter values for coefficient and exponent: 3 1&#xA;&#xA;Continue ? , then press &amp;quot;1&amp;quot; : 1&#xA;&#xA;Enter values for coefficient and exponent: 6 0&#xA;&#xA;Continue ? , then press &amp;quot;1&amp;quot; : 0&#xA;&#xA;Second polynomial...&#xA;Enter values for coefficient and exponent: 3 3&#xA;&#xA;Continue ? , then press &amp;quot;1&amp;quot; : 1&#xA;&#xA;Enter values for coefficient and exponent: 2 2&#xA;&#xA;Continue ? , then press &amp;quot;1&amp;quot; : 1&#xA;&#xA;Enter values for coefficient and exponent: 3 1&#xA;&#xA;Continue ? , then press &amp;quot;1&amp;quot; : 1&#xA;&#xA;Enter values for coefficient and exponent: 1 0&#xA;&#xA;Continue ? , then press &amp;quot;1&amp;quot; : 0&#xA;&#xA;Result of addition:&#xA;&#xA;.................&#xA;&#xA;&#xA;7 x ^ 3 + 7 x ^ 2 + 6 x ^ 1 + 7 x ^ 0&#xA;&#xA;.................&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-implement-a-binary-tree&#34;&gt;&#xA;  Write a C++ program to implement a binary tree&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-implement-a-binary-tree&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include”iostream.h”&#xA;#include”conio.h”&#xA;#include”process.h”&#xA;#include&amp;quot;stdio.h&amp;quot;&#xA;&#xA;struct node {&#xA;    char data;&#xA;    node * lchild, * rchild;&#xA;};&#xA;&#xA;node * head;&#xA;&#xA;class tree {&#xA;    node * root;&#xA;    public:&#xA;    tree() {&#xA;        root = NULL;&#xA;    }&#xA;    node * read();&#xA;    node * makenode(char);&#xA;    void createtree(node * );&#xA;    void inorder(node * );&#xA;    void preorder(node * );&#xA;    void postorder(node * );&#xA;};&#xA;&#xA;node * tree::read() {&#xA;    char item;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter data: &amp;quot;;&#xA;    cin&amp;gt;&amp;gt;item;&#xA;    root = makenode(item);&#xA;    createtree(root);&#xA;    return root;&#xA;}&#xA;&#xA;node * tree::makenode(char x) {&#xA;    head = new node;&#xA;    head - &amp;gt; data = x;&#xA;    head - &amp;gt; lchild = head - &amp;gt; rchild = NULL;&#xA;    return head;&#xA;}&#xA;&#xA;void tree::createtree(node * root) {&#xA;    int ch;&#xA;    char item;&#xA;    if (root != NULL) {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Create left child for &amp;quot; &amp;lt;&amp;lt;root - &amp;gt; data &amp;lt;&amp;lt;&amp;quot; (if so press \&amp;quot;1\&amp;quot;)&amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;        if (ch == 1) {&#xA;            cout&amp;lt;&amp;lt;&amp;quot;\n Enter data: &amp;quot;;&#xA;            cin&amp;gt;&amp;gt;item;&#xA;            root - &amp;gt; lchild = makenode(item);&#xA;            createtree(root - &amp;gt; lchild);&#xA;        }&#xA;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Create right child for &amp;quot; &amp;lt;&amp;lt;root - &amp;gt; data &amp;lt;&amp;lt;&amp;quot; (if so press \&amp;quot;1\&amp;quot;)&amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;        if (ch == 1) {&#xA;            cout&amp;lt;&amp;lt;&amp;quot;\n Enter data: &amp;quot;;&#xA;            cin&amp;gt;&amp;gt;item;&#xA;            root - &amp;gt; rchild = makenode(item);&#xA;            createtree(root - &amp;gt; rchild);&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;void tree::inorder(node * root) {&#xA;    if (root != NULL) {&#xA;        inorder(root - &amp;gt; lchild);&#xA;        cout&amp;lt;&amp;lt;root - &amp;gt; data &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;        inorder(root - &amp;gt; rchild);&#xA;    }&#xA;}&#xA;&#xA;void tree::preorder(node * root) {&#xA;    if (root != NULL) {&#xA;        cout&amp;lt;&amp;lt;root - &amp;gt; data &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;        preorder(root - &amp;gt; lchild);&#xA;        preorder(root - &amp;gt; rchild);&#xA;    }&#xA;}&#xA;&#xA;void tree::postorder(node * root) {&#xA;    if (root != NULL) {&#xA;        postorder(root - &amp;gt; lchild);&#xA;        postorder(root - &amp;gt; rchild);&#xA;        cout&amp;lt;&amp;lt;root - &amp;gt; data &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;    }&#xA;}&#xA;&#xA;&#xA;void main() {&#xA;    tree ob;&#xA;    node * root;&#xA;    int ch;&#xA;    clrscr();&#xA;    do {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n.... BINARY TREE ....\n\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n1.Creation\n2.Inorder Traversal\n3.Preorder Traversal&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n4.Postorder Traversal\n5.Exit&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\t Enter your choice: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;        switch (ch) {&#xA;            case 1:&#xA;                root = ob.read();&#xA;                break;&#xA;            case 2:&#xA;                ob.inorder(root);&#xA;                break;&#xA;            case 3:&#xA;                ob.preorder(root);&#xA;                break;&#xA;            case 4:&#xA;                ob.postorder(root);&#xA;                break;&#xA;            case 5:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\n\t... Thanking You ...&amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            default:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n Invalid key-in &amp;quot;;&#xA;        }&#xA;&#xA;    } while (1);&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-24&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-24&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;....BINARY TREE....&#xA;&#xA;&#xA;1. Creation&#xA;2. Inorder Traversal&#xA;3. Preorder Traversal&#xA;4. Postorder Traversal&#xA;5. Exit&#xA;Enter your choice: 1&#xA;&#xA;Enter data: A&#xA;&#xA;Create left child for A(if so press &amp;quot;1&amp;quot;) 1&#xA;&#xA;Enter data: B&#xA;&#xA;Create left child for B(if so press &amp;quot;1&amp;quot;) 1&#xA;&#xA;Enter data: C&#xA;&#xA;Create left child for C(if so press &amp;quot;1&amp;quot;) 0&#xA;&#xA;Create right child for C(if so press &amp;quot;1&amp;quot;) 0&#xA;&#xA;Create right child for B(if so press &amp;quot;1&amp;quot;) 1&#xA;&#xA;Enter data: D&#xA;&#xA;Create left child for D(if so press &amp;quot;1&amp;quot;) 0&#xA;&#xA;Create right child for D(if so press &amp;quot;1&amp;quot;) 0&#xA;&#xA;Create right child for A(if so press &amp;quot;1&amp;quot;) 1&#xA;&#xA;Enter data: E&#xA;&#xA;Create left child for E(if so press &amp;quot;1&amp;quot;) 0&#xA;&#xA;Create right child for E(if so press &amp;quot;1&amp;quot;) 0&#xA;&#xA;&#xA;....BINARY TREE....&#xA;&#xA;&#xA;1. Creation&#xA;2. Inorder Traversal&#xA;3. Preorder Traversal&#xA;4. Postorder Traversal&#xA;5. Exit&#xA;Enter your choice: 2&#xA;C B D A E&#xA;&#xA;....BINARY TREE....&#xA;&#xA;&#xA;1. Creation&#xA;2. Inorder Traversal&#xA;3. Preorder Traversal&#xA;4. Postorder Traversal&#xA;5. Exit&#xA;Enter your choice: 3&#xA;A B C D E&#xA;&#xA;....BINARY TREE....&#xA;&#xA;&#xA;1. Creation&#xA;2. Inorder Traversal&#xA;3. Preorder Traversal&#xA;4. Postorder Traversal&#xA;5. Exit&#xA;Enter your choice: 4&#xA;C D B E A&#xA;&#xA;&#xA;....BINARY TREE....&#xA;&#xA;&#xA;1. Creation&#xA;2. Inorder Traversal&#xA;3. Preorder Traversal&#xA;4. Postorder Traversal&#xA;5. Exit&#xA;Enter your choice: 5&#xA;&#xA;&#xA;...Thanking You...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-implement-binary-search-tree&#34;&gt;&#xA;  Write a C++ program to implement Binary Search Tree&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-implement-binary-search-tree&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;quot;iostream.h&amp;quot;&#xA;#include&amp;quot;conio.h&amp;quot;&#xA;#include&amp;quot;process.h&amp;quot;&#xA;#include&amp;quot;stdio.h&amp;quot;&#xA;&#xA;struct node {&#xA;    int data;&#xA;    node * left;&#xA;    node * right;&#xA;};&#xA;&#xA;node * root;&#xA;&#xA;class bst {&#xA;    public:&#xA;    bst() {&#xA;        root = NULL;&#xA;    }&#xA;    node * insert(node * , int);&#xA;    void delet(node * , node * );&#xA;    void search(node * , int);&#xA;    node * find(node * , int);&#xA;&#xA;};&#xA;&#xA;node * bst::insert(node * root, int item) {&#xA;    if (root == NULL) {&#xA;        root = new node;&#xA;        root - &amp;gt; data = item;&#xA;        root - &amp;gt; left = root - &amp;gt; right = NULL;&#xA;    } else if (itemdata)&#xA;        root - &amp;gt; left = insert(root - &amp;gt; left, item);&#xA;    else&#xA;        root - &amp;gt; right = insert(root - &amp;gt; right, item);&#xA;&#xA;    return root;&#xA;&#xA;}&#xA;void bst::search(node * root, int item) {&#xA;    if (root == NULL)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Number doesnot exist &amp;quot;;&#xA;    else if (root - &amp;gt; data == item)&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Number is present &amp;quot;;&#xA;    else if (itemdata)&#xA;        search(root - &amp;gt; left, item);&#xA;    else&#xA;        search(root - &amp;gt; right, item);&#xA;&#xA;}&#xA;&#xA;node * bst::find(node * root, int item) {&#xA;    node * temp;&#xA;    temp = root;&#xA;    node * parent;&#xA;    while (root != NULL) {&#xA;        if (itemdata) {&#xA;            parent = root;&#xA;            root = root - &amp;gt; left;&#xA;        } else if (item &amp;gt; root - &amp;gt; data) {&#xA;            parent = root;&#xA;            root = root - &amp;gt; right;&#xA;        } else {&#xA;            delet(root, parent);&#xA;            break;&#xA;        }&#xA;    }&#xA;    if (root == NULL) {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Item doesnot exist &amp;quot;;&#xA;    }&#xA;&#xA;    return temp;&#xA;&#xA;}&#xA;&#xA;void bst::delet(node * root, node * parent) {&#xA;&#xA;    if (root - &amp;gt; left == NULL &amp;amp;&amp;amp; root - &amp;gt; right == NULL) //terminal node&#xA;    {&#xA;        if (parent - &amp;gt; left == root)&#xA;            parent - &amp;gt; left = NULL;&#xA;        else&#xA;            parent - &amp;gt; right = NULL;&#xA;&#xA;        return;&#xA;    } else if (root - &amp;gt; left != NULL &amp;amp;&amp;amp; root - &amp;gt; right != NULL) //node with 2 childs&#xA;    {&#xA;        node * ptr, * temp;&#xA;        parent = root;&#xA;        temp = root - &amp;gt; left;&#xA;        ptr = root - &amp;gt; right;&#xA;        if (ptr - &amp;gt; left == NULL) {&#xA;            root - &amp;gt; data = ptr - &amp;gt; data;&#xA;        }&#xA;        while (ptr - &amp;gt; left != NULL) {&#xA;            parent = ptr;&#xA;            ptr = ptr - &amp;gt; left;&#xA;            root - &amp;gt; data = ptr - &amp;gt; data;&#xA;        }&#xA;        root - &amp;gt; left = temp;&#xA;        delete ptr;&#xA;&#xA;        return;&#xA;&#xA;    } else //node with 1 child&#xA;    {&#xA;        if (parent - &amp;gt; left == root) {&#xA;            if (root - &amp;gt; left == NULL)&#xA;                parent - &amp;gt; left = root - &amp;gt; right;&#xA;            else&#xA;                parent - &amp;gt; left = root - &amp;gt; left;&#xA;        } else if (parent - &amp;gt; right == root) {&#xA;            if (root - &amp;gt; left == NULL)&#xA;                parent - &amp;gt; right = root - &amp;gt; right;&#xA;            else&#xA;                parent - &amp;gt; right = root - &amp;gt; left;&#xA;        }&#xA;        return;&#xA;    }&#xA;&#xA;}&#xA;&#xA;void main() {&#xA;    clrscr();&#xA;    bst ob;&#xA;    int item, ch;&#xA;    node * temp;&#xA;    do {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n ... BINARY SEARCH TREE ... &amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n1.Insertion\n2.Deletion\n3.Searching\n4.Exit&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\t Enter your choice: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;&#xA;        switch (ch) {&#xA;            case 1:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n Enter an item: &amp;quot;;&#xA;                cin&amp;gt;&amp;gt;item;&#xA;                root = ob.insert(root, item);&#xA;                break;&#xA;            case 2:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n Enter the item: &amp;quot;;&#xA;                cin&amp;gt;&amp;gt;item;&#xA;                root = ob.find(root, item);&#xA;                break;&#xA;            case 3:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n Enter the item: &amp;quot;;&#xA;                cin&amp;gt;&amp;gt;item;&#xA;                ob.search(root, item);&#xA;                break;&#xA;            case 4:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n ... Thanking You ...&amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            default:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n Invalid key-in &amp;quot;;&#xA;&#xA;        }&#xA;&#xA;    } while (1);&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-25&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-25&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;...BINARY SEARCH TREE...&#xA;&#xA;1. Insertion&#xA;2. Deletion&#xA;3. Searching&#xA;4. Exit&#xA;&#xA;Enter your choice: 1&#xA;&#xA;Enter an item: 25&#xA;&#xA;&#xA;...BINARY SEARCH TREE...&#xA;&#xA;1. Insertion&#xA;2. Deletion&#xA;3. Searching&#xA;4. Exit&#xA;&#xA;Enter your choice: 1&#xA;&#xA;Enter an item: 10&#xA;&#xA;&#xA;...BINARY SEARCH TREE...&#xA;&#xA;&#xA;1. Insertion&#xA;2. Deletion&#xA;3. Searching&#xA;4. Exit&#xA;&#xA;Enter your choice: 1&#xA;&#xA;Enter an item: 20&#xA;&#xA;...BINARY SEARCH TREE...&#xA;&#xA;1. Insertion&#xA;2. Deletion&#xA;3. Searching&#xA;4. Exit&#xA;&#xA;Enter your choice: 1&#xA;&#xA;Enter an item: 5&#xA;&#xA;...BINARY SEARCH TREE...&#xA;&#xA;1. Insertion&#xA;2. Deletion&#xA;3. Searching&#xA;4. Exit&#xA;&#xA;Enter your choice: 1&#xA;&#xA;Enter an item: 35&#xA;&#xA;&#xA;...BINARY SEARCH TREE...&#xA;&#xA;1. Insertion&#xA;2. Deletion&#xA;3. Searching&#xA;4. Exit&#xA;&#xA;Enter your choice: 1&#xA;&#xA;Enter an item: 32&#xA;&#xA;...BINARY SEARCH TREE...&#xA;&#xA;1. Insertion&#xA;2. Deletion&#xA;3. Searching&#xA;4. Exit&#xA;&#xA;Enter your choice: 3&#xA;&#xA;Enter the item: 10&#xA;&#xA;Number is present&#xA;&#xA;&#xA;...BINARY SEARCH TREE...&#xA;&#xA;1. Insertion&#xA;2. Deletion&#xA;3. Searching&#xA;4. Exit&#xA;&#xA;Enter your choice: 2&#xA;&#xA;Enter the item: 10&#xA;&#xA;&#xA;...BINARY SEARCH TREE...&#xA;&#xA;&#xA;1. Insertion&#xA;2. Deletion&#xA;3. Searching&#xA;4. Exit&#xA;&#xA;Enter your choice: 3&#xA;&#xA;Enter the item: 10&#xA;&#xA;Number doesnot exist&#xA;&#xA;&#xA;...BINARY SEARCH TREE...&#xA;&#xA;&#xA;1. Insertion&#xA;2. Deletion&#xA;3. Searching&#xA;4. Exit&#xA;&#xA;Enter your choice: 4&#xA;&#xA;...Thanking You...&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-create-and-evaluate-an-expression-tree&#34;&gt;&#xA;  Write a C++ program to create and evaluate an Expression Tree&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-create-and-evaluate-an-expression-tree&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;quot;iostream.h&amp;quot;&#xA;#include&amp;quot;conio.h&amp;quot;&#xA;#include&amp;quot;process.h&amp;quot;&#xA;#include&amp;quot;ctype.h&amp;quot;&#xA;#include &amp;quot;stdio.h&amp;quot;&#xA;&#xA;&#xA;struct node {&#xA;    char data;&#xA;    node * lchild;&#xA;    node * rchild;&#xA;};&#xA;&#xA;node * head;&#xA;char p[50];&#xA;node * stack[50];&#xA;int top = -1;&#xA;float c;&#xA;float v;&#xA;node * q;&#xA;&#xA;class tree {&#xA;    node * root;&#xA;    public:&#xA;    tree() {}&#xA;    float evaluate(node * );&#xA;    node * makenode(char);&#xA;    void createtree();&#xA;    void push(node * );&#xA;    node * pop();&#xA;    float result(float, float, char);&#xA;};&#xA;&#xA;void tree::createtree() {&#xA;    int i = 0;&#xA;    while (p[i] != &#39;\0&#39;) {&#xA;        root = makenode(p[i]);&#xA;        if (!isalpha(p[i])) {&#xA;            root - &amp;gt; rchild = pop();&#xA;            root - &amp;gt; lchild = pop();&#xA;        }&#xA;&#xA;        push(root);&#xA;        i++;&#xA;    }&#xA;&#xA;}&#xA;&#xA;void tree::push(node * root) {&#xA;    top++;&#xA;    stack[top] = root;&#xA;}&#xA;&#xA;node * tree::pop() {&#xA;    q = stack[top];&#xA;    top--;&#xA;    return q;&#xA;}&#xA;&#xA;node * tree::makenode(char x) {&#xA;    head = new node;&#xA;    head - &amp;gt; data = x;&#xA;    head - &amp;gt; lchild = head - &amp;gt; rchild = NULL;&#xA;    return head;&#xA;}&#xA;&#xA;float tree::evaluate(node * root) {&#xA;    float a, b;&#xA;    if (!isalpha(root - &amp;gt; lchild - &amp;gt; data))&#xA;        a = evaluate(root - &amp;gt; lchild);&#xA;    else {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter the value for &amp;quot; &amp;lt;&amp;lt;root - &amp;gt; lchild - &amp;gt; data &amp;lt;&amp;lt;&amp;quot;: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;a;&#xA;    }&#xA;&#xA;    if (!isalpha(root - &amp;gt; rchild - &amp;gt; data))&#xA;        b = evaluate(root - &amp;gt; rchild);&#xA;    else {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n Enter the value for &amp;quot; &amp;lt;&amp;lt;root - &amp;gt; rchild - &amp;gt; data &amp;lt;&amp;lt;&amp;quot;: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;b;&#xA;    }&#xA;&#xA;&#xA;    v = result(a, b, root - &amp;gt; data);&#xA;    return v;&#xA;&#xA;}&#xA;&#xA;float tree::result(float a, float b, char op) {&#xA;    float c = 0;&#xA;&#xA;    switch (op) {&#xA;        case &#39;+&#39;:&#xA;            c = a + b;&#xA;            break;&#xA;        case &#39;-&#39;:&#xA;            c = a - b;&#xA;            break;&#xA;        case &#39;*&#39;:&#xA;            c = a * b;&#xA;            break;&#xA;        case &#39;/&#39;:&#xA;            if (b != 0)&#xA;                c = a / b;&#xA;            else {&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n Error: &amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            }&#xA;            break;&#xA;    }&#xA;&#xA;    return c;&#xA;}&#xA;&#xA;void main() {&#xA;    clrscr();&#xA;    float ans;&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Enter a postfix expression: &amp;quot;;&#xA;    gets(p);&#xA;    tree ob;&#xA;    ob.createtree();&#xA;    ans = ob.evaluate(stack[top]);&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Value of the expression is: &amp;quot; &amp;lt;&amp;lt;ans;&#xA;    getch();&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-26&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-26&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;Enter a postfix expression: ab/cd/*&#xA;&#xA;Enter the value for a: 15&#xA;&#xA;Enter the value for b: 5&#xA;&#xA;Enter the value for c: 20&#xA;&#xA;Enter the value for d: 4&#xA;&#xA;Value of the expression is: 15&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-implement-various-sorting-techniques&#34;&gt;&#xA;  Write a C++ program to implement various Sorting techniques&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-implement-various-sorting-techniques&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;quot;iostream.h&amp;quot;&#xA;#include&amp;quot;conio.h&amp;quot;&#xA;#include&amp;quot;process.h&amp;quot;&#xA;&#xA;int item;&#xA;&#xA;void display(int a[], int n) {&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Sorted elements are: \n&amp;quot;;&#xA;&#xA;    for (int i = 0; i &amp;lt; n; i++)&#xA;        cout&amp;lt;&amp;lt;a[i] &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;}&#xA;&#xA;void bubblesort(int a[], int n) {&#xA;    int i, j, t;&#xA;    for (i = 0; i &amp;lt; n; i++) {&#xA;        for (j = 0; j &amp;lt; n - 1 - i; j++) {&#xA;            if (a[j] &amp;gt; a[j + 1]) {&#xA;                t = a[j];&#xA;                a[j] = a[j + 1];&#xA;                a[j + 1] = t;&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;}&#xA;&#xA;void seletionsort(int a[], int n) {&#xA;    int i, j, t;&#xA;    for (i = 0; i &amp;lt; n; i++) {&#xA;        for (j = i + 1; j &amp;lt; n; j++) {&#xA;            if (a[i] &amp;gt; a[j]) {&#xA;                t = a[i];&#xA;                a[i] = a[j];&#xA;                a[j] = t;&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;}&#xA;&#xA;void insertionsort(int a[], int n) {&#xA;    int k, j, t;&#xA;    for (k = 1; k &amp;lt; n; k++) {&#xA;        t = a[k];&#xA;        j = k - 1;&#xA;        while (t &amp;lt; a[j] &amp;amp;&amp;amp; j &amp;gt;= 0) {&#xA;            a[j + 1] = a[j];&#xA;            j--;&#xA;        }&#xA;        a[j + 1] = t;&#xA;    }&#xA;&#xA;}&#xA;&#xA;void quicksort(int a[], int low, int high) {&#xA;    int l, h, key, t;&#xA;    l = low;&#xA;    h = high;&#xA;    key = a[(low + high) / 2];&#xA;&#xA;    do {&#xA;        while (key &amp;gt; a[low])&#xA;            low++;&#xA;        while (key &amp;lt; a[high])&#xA;            high--;&#xA;        if (low &amp;lt;= high) {&#xA;            t = a[low];&#xA;            a[low++] = a[high];&#xA;            a[high--] = t;&#xA;        }&#xA;&#xA;    } while (low &amp;lt;= high);&#xA;&#xA;    if (l &amp;lt; high)&#xA;        quicksort(a, l, high);&#xA;&#xA;    if (low &amp;lt; h)&#xA;        quicksort(a, low, h);&#xA;&#xA;}&#xA;&#xA;void bucketsort(int a[], int n) {&#xA;    int i, j, pass, k, l, div = 1, num = 0, large = a[0];&#xA;    int buck[10], q[15][15];&#xA;&#xA;    for (i = 1; i &amp;lt; n; i++) {&#xA;        if (a[i] &amp;gt; large)&#xA;            large = a[i];&#xA;    }&#xA;&#xA;    while (large &amp;gt; 0) {&#xA;        num++;&#xA;        large = large / 10;&#xA;    }&#xA;&#xA;    for (pass = 0; pass &amp;lt; num; pass++) {&#xA;        for (k = 0; k &amp;lt; 10; k++)&#xA;            buck[k] = 0;&#xA;&#xA;        for (i = 0; i &amp;lt; n; i++) {&#xA;            l = (a[i] / div) % 10;&#xA;            q[l][buck[l]] = a[i];&#xA;            buck[l]++;&#xA;        }&#xA;        i = 0;&#xA;&#xA;        for (k = 0; k &amp;lt; 10; k++)&#xA;            for (j = 0; j &amp;lt; buck[k]; j++) {&#xA;                a[i] = q[k][j];&#xA;                i++;&#xA;            }&#xA;&#xA;        div = div * 10;&#xA;    }&#xA;&#xA;}&#xA;&#xA;void merge(int a[], int low, int mid, int high) {&#xA;    int i, h, j, b[30], k;&#xA;    i = low;&#xA;    h = low;&#xA;    j = mid + 1;&#xA;&#xA;    while (h &amp;lt;= mid &amp;amp;&amp;amp; j &amp;lt;= high) {&#xA;        if (a[h] &amp;lt; a[j]) {&#xA;            b[i] = a[h];&#xA;            h++;&#xA;        } else {&#xA;            b[i] = a[j];&#xA;            j++;&#xA;        }&#xA;        i++;&#xA;    }&#xA;&#xA;    if (h &amp;gt; mid) {&#xA;        for (k = j; k &amp;lt;= high; k++) {&#xA;            b[i] = a[k];&#xA;            i++;&#xA;        }&#xA;    } else {&#xA;        for (k = h; k &amp;lt;= mid; k++) {&#xA;            b[i] = a[k];&#xA;            i++;&#xA;        }&#xA;    }&#xA;&#xA;    for (k = low; k &amp;lt;= high; k++) {&#xA;        a[k] = b[k];&#xA;    }&#xA;&#xA;}&#xA;&#xA;void mergesort(int a[], int low, int high) {&#xA;    int mid;&#xA;    if (low &amp;lt; high) {&#xA;        mid = (low + high) / 2;&#xA;        mergesort(a, low, mid);&#xA;        mergesort(a, mid + 1, high);&#xA;        merge(a, low, mid, high);&#xA;    }&#xA;&#xA;}&#xA;/* for tree sort */&#xA;struct node {&#xA;    int data;&#xA;    node * left;&#xA;    node * right;&#xA;};&#xA;&#xA;node * root;&#xA;&#xA;class bst {&#xA;    public:&#xA;    bst() {&#xA;        root = NULL;&#xA;    }&#xA;    node * insert(node * , int);&#xA;&#xA;};&#xA;&#xA;node * bst::insert(node * root, int item) {&#xA;    if (root == NULL) {&#xA;        root = new node;&#xA;        root - &amp;gt; data = item;&#xA;        root - &amp;gt; left = root - &amp;gt; right = NULL;&#xA;    } else if (itemdata)&#xA;        root - &amp;gt; left = insert(root - &amp;gt; left, item);&#xA;    else&#xA;        root - &amp;gt; right = insert(root - &amp;gt; right, item);&#xA;&#xA;    return root;&#xA;&#xA;}&#xA;&#xA;void inorder(node * root) {&#xA;    if (root != NULL) {&#xA;        inorder(root - &amp;gt; left);&#xA;        cout&amp;lt;&amp;lt;root - &amp;gt; data &amp;lt;&amp;lt;&amp;quot; &amp;quot;;&#xA;        inorder(root - &amp;gt; right);&#xA;    }&#xA;}&#xA;&#xA;void treesort(int a[], int n) {&#xA;    node * root;&#xA;    bst ob;&#xA;    for (int i = 0; i &amp;lt; n; i++) {&#xA;        root = ob.insert(root, a[i]);&#xA;    }&#xA;    cout&amp;lt;&amp;lt;&amp;quot;\n Sorted elements are: \n&amp;quot;;&#xA;    inorder(root);&#xA;}&#xA;&#xA;/* end of tree sort */&#xA;&#xA;void heapsort(int a[], int n) {&#xA;    int i, s, f, item, value;&#xA;    for (i = 0; i &amp;lt; n; i++) {&#xA;        item = a[i];&#xA;        s = i;&#xA;        f = (s - 1) / 2;&#xA;        while (s &amp;gt; 0 &amp;amp;&amp;amp; a[f] &amp;lt; item) {&#xA;            a[s] = a[f];&#xA;            s = f;&#xA;            f = (s - 1) / 2;&#xA;        }&#xA;        a[s] = item;&#xA;    }&#xA;&#xA;    for (i = n - 1; i &amp;gt; 0; i--) {&#xA;        value = a[i];&#xA;        a[i] = a[0];&#xA;        f = 0;&#xA;        if (i == 1)&#xA;            s = -1;&#xA;        else&#xA;            s = 1;&#xA;        if (i &amp;gt; 2 &amp;amp;&amp;amp; a[2] &amp;gt; a[1])&#xA;            s = 2;&#xA;&#xA;        while (s &amp;gt;= 0 &amp;amp;&amp;amp; value &amp;lt; a[s]) {&#xA;            a[f] = a[s];&#xA;            f = s;&#xA;            s = 2 * f + 1;&#xA;            if (s + 1 &amp;lt;= i - 1 &amp;amp;&amp;amp; a[s] s = s + 1;&#xA;                if (s &amp;gt; i - 1)&#xA;                    s = -1;&#xA;        }&#xA;&#xA;            a[f] = value;&#xA;    }&#xA;&#xA;}&#xA;&#xA;&#xA;void main() {&#xA;&#xA;    int a[50], num[50], n, i, flag = 1, ch, low, high;&#xA;    clrscr();&#xA;    do {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n..... SORTING ....\n\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n1.BUBBLE SORT\n2.SELECTION SORT\n3.INSERTION SORT\n4.QUICK SORT&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n5.RADIX SORT\n6.MERGE SORT\n7.TREE SORT\n8.HEAP SORT\n9.EXIT&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\t Enter your choice: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;&#xA;        if (ch &amp;gt;= 1 &amp;amp;&amp;amp; ch &amp;lt;= 8 &amp;amp;&amp;amp; flag == 1) {&#xA;            cout&amp;lt;&amp;lt;&amp;quot;\n Enter the limit: &amp;quot;;&#xA;            cin&amp;gt;&amp;gt;n;&#xA;            cout&amp;lt;&amp;lt;&amp;quot;\n Enter the elements: &amp;quot;;&#xA;            for (i = 0; i &amp;lt; n; i++) {&#xA;                cin&amp;gt;&amp;gt;a[i];&#xA;            }&#xA;            flag = 0;&#xA;        }&#xA;&#xA;        for (i = 0; i &amp;lt; n; i++)&#xA;            num[i] = a[i];&#xA;&#xA;        switch (ch) {&#xA;            case 1:&#xA;                bubblesort(num, n);&#xA;                break;&#xA;            case 2:&#xA;                seletionsort(num, n);&#xA;                break;&#xA;            case 3:&#xA;                insertionsort(num, n);&#xA;                break;&#xA;            case 4:&#xA;                low = 0;&#xA;                high = n - 1;&#xA;                quicksort(num, low, high);&#xA;                break;&#xA;            case 5:&#xA;                bucketsort(num, n);&#xA;                break;&#xA;            case 6:&#xA;                low = 0;&#xA;                high = n - 1;&#xA;                mergesort(num, low, high);&#xA;                break;&#xA;            case 7:&#xA;                flag = 0;&#xA;                treesort(num, n);&#xA;                break;&#xA;            case 8:&#xA;                heapsort(num, n);&#xA;                break;&#xA;            case 9:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\t .....Thanking You .....&amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            default:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\t Invalid key-in &amp;quot;;&#xA;        }&#xA;&#xA;        if (ch &amp;gt;= 1 &amp;amp;&amp;amp; ch &amp;lt;= 8 &amp;amp;&amp;amp; ch != 7) {&#xA;            display(num, n);&#xA;        }&#xA;&#xA;    } while (1);&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-27&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-27&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;.....SORTING....&#xA;&#xA;&#xA;1. BUBBLE SORT&#xA;2. SELECTION SORT&#xA;3. INSERTION SORT&#xA;4. QUICK SORT&#xA;5. RADIX SORT&#xA;6. MERGE SORT&#xA;7. TREE SORT&#xA;8. HEAP SORT&#xA;9. Exit&#xA;Enter your choice: 1&#xA;&#xA;Enter the limit: 5&#xA;&#xA;Enter the elements: 99 12 56 3 4&#xA;&#xA;Sorted elements are:&#xA;3 4 12 56 99&#xA;&#xA;&#xA;.....SORTING....&#xA;&#xA;&#xA;1. BUBBLE SORT&#xA;2. SELECTION SORT&#xA;3. INSERTION SORT&#xA;4. QUICK SORT&#xA;5. RADIX SORT&#xA;6. MERGE SORT&#xA;7. TREE SORT&#xA;8. HEAP SORT&#xA;9. Exit&#xA;Enter your choice: 2&#xA;&#xA;Sorted elements are:&#xA;3 4 12 56 99&#xA;&#xA;&#xA;.....SORTING....&#xA;&#xA;&#xA;1. BUBBLE SORT&#xA;2. SELECTION SORT&#xA;3. INSERTION SORT&#xA;4. QUICK SORT&#xA;5. RADIX SORT&#xA;6. MERGE SORT&#xA;7. TREE SORT&#xA;8. HEAP SORT&#xA;9. Exit&#xA;Enter your choice: 3&#xA;&#xA;Sorted elements are:&#xA;3 4 12 56 99&#xA;&#xA;&#xA;.....SORTING....&#xA;&#xA;&#xA;1. BUBBLE SORT&#xA;2. SELECTION SORT&#xA;3. INSERTION SORT&#xA;4. QUICK SORT&#xA;5. RADIX SORT&#xA;6. MERGE SORT&#xA;7. TREE SORT&#xA;8. HEAP SORT&#xA;9. Exit&#xA;Enter your choice: 4&#xA;&#xA;Sorted elements are:&#xA;3 4 12 56 99&#xA;&#xA;&#xA;.....SORTING....&#xA;&#xA;&#xA;1. BUBBLE SORT&#xA;2. SELECTION SORT&#xA;3. INSERTION SORT&#xA;4. QUICK SORT&#xA;5. RADIX SORT&#xA;6. MERGE SORT&#xA;7. TREE SORT&#xA;8. HEAP SORT&#xA;9. Exit&#xA;Enter your choice: 5&#xA;&#xA;Sorted elements are:&#xA;3 4 12 56 99&#xA;&#xA;&#xA;.....SORTING....&#xA;&#xA;&#xA;1. BUBBLE SORT&#xA;2. SELECTION SORT&#xA;3. INSERTION SORT&#xA;4. QUICK SORT&#xA;5. RADIX SORT&#xA;6. MERGE SORT&#xA;7. TREE SORT&#xA;8. HEAP SORT&#xA;9. Exit&#xA;Enter your choice: 6&#xA;&#xA;Sorted elements are:&#xA;3 4 12 56 99&#xA;&#xA;&#xA;.....SORTING....&#xA;&#xA;&#xA;1. BUBBLE SORT&#xA;2. SELECTION SORT&#xA;3. INSERTION SORT&#xA;4. QUICK SORT&#xA;5. RADIX SORT&#xA;6. MERGE SORT&#xA;7. TREE SORT&#xA;8. HEAP SORT&#xA;9. Exit&#xA;Enter your choice: 7&#xA;&#xA;Sorted elements are:&#xA;3 4 12 56 99&#xA;&#xA;&#xA;.....SORTING....&#xA;&#xA;&#xA;1. BUBBLE SORT&#xA;2. SELECTION SORT&#xA;3. INSERTION SORT&#xA;4. QUICK SORT&#xA;5. RADIX SORT&#xA;6. MERGE SORT&#xA;7. TREE SORT&#xA;8. HEAP SORT&#xA;9. Exit&#xA;Enter your choice: 8&#xA;&#xA;Sorted elements are:&#xA;3 4 12 56 99&#xA;&#xA;&#xA;.....SORTING....&#xA;&#xA;&#xA;1. BUBBLE SORT&#xA;2. SELECTION SORT&#xA;3. INSERTION SORT&#xA;4. QUICK SORT&#xA;5. RADIX SORT&#xA;6. MERGE SORT&#xA;7. TREE SORT&#xA;8. HEAP SORT&#xA;9. Exit&#xA;Enter your choice: 9&#xA;&#xA;.....Thanking You.....&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;write-a-c-program-to-implement-various-searching-techniques&#34;&gt;&#xA;  Write a C++ program to implement various Searching techniques&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#write-a-c-program-to-implement-various-searching-techniques&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;pre&gt;&lt;code&gt;#include&amp;quot;iostream.h&amp;quot;&#xA;#include&amp;quot;conio.h&amp;quot;&#xA;#include&amp;quot;process.h&amp;quot;&#xA;&#xA;void sequential(int a[], int n, int item) {&#xA;    int flag = 0, i;&#xA;    for (i = 0; i &amp;lt; n; i++) {&#xA;        if (a[i] == item) {&#xA;            cout&amp;lt;&amp;lt;&amp;quot;\n Item is found at position &amp;quot; &amp;lt;&amp;lt;i + 1;&#xA;            flag = 1;&#xA;            break;&#xA;        }&#xA;    }&#xA;    if (flag == 0) cout&amp;lt;&amp;lt;&amp;quot;\n Item not found &amp;quot;;&#xA;&#xA;}&#xA;&#xA;void binary(int a[], int n, int item) {&#xA;    int loc = -1, b = 0, e = n - 1, mid = -1;&#xA;    while ((b &amp;lt;= e) &amp;amp;&amp;amp; (a[mid] != item)) {&#xA;        mid = (b + e) / 2;&#xA;        if (item == a[mid]) {&#xA;            cout&amp;lt;&amp;lt;&amp;quot;\n Item is found at position &amp;quot; &amp;lt;&amp;lt;mid + 1;&#xA;            loc = mid;&#xA;        } else if (item &amp;lt; a[mid])&#xA;            e = mid - 1;&#xA;        else&#xA;            b = mid + 1;&#xA;    }&#xA;    if (loc == -1) cout&amp;lt;&amp;lt;&amp;quot;\n Item not found &amp;quot;;&#xA;&#xA;}&#xA;&#xA;&#xA;void main() {&#xA;    int num[50], n, item, ch, flag = 1, i;&#xA;    clrscr();&#xA;    do {&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\n\n .... SEARCHING .... \n\n\n&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n1.Sequential Search\n2.Binary Search\n3.Enter another list\n4.Exit&amp;quot;;&#xA;        cout&amp;lt;&amp;lt;&amp;quot;\n\t Enter your choice: &amp;quot;;&#xA;        cin&amp;gt;&amp;gt;ch;&#xA;&#xA;        if (ch == 3) flag = 1;&#xA;&#xA;        if (ch &amp;gt;= 1 &amp;amp;&amp;amp; ch &amp;lt;= 3 &amp;amp;&amp;amp; flag == 1) {&#xA;            cout&amp;lt;&amp;lt;&amp;quot;\n Enter the limit: &amp;quot;;&#xA;            cin&amp;gt;&amp;gt;n;&#xA;            cout&amp;lt;&amp;lt;&amp;quot;\n Enter the elements: &amp;quot;;&#xA;            for (i = 0; i &amp;lt; n; i++)&#xA;                cin&amp;gt;&amp;gt;num[i];&#xA;        }&#xA;        if (ch &amp;gt;= 1 &amp;amp;&amp;amp; ch &amp;lt;= 2) {&#xA;            cout&amp;lt;&amp;lt;&amp;quot;\n Enter the element to be searched: &amp;quot;;&#xA;            cin&amp;gt;&amp;gt;item;&#xA;        }&#xA;&#xA;        switch (ch) {&#xA;            case 1:&#xA;                sequential(num, n, item);&#xA;                break;&#xA;            case 2:&#xA;                binary(num, n, item);&#xA;                break;&#xA;            case 3:&#xA;                break;&#xA;            case 4:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\t.... Thanking You .... &amp;quot;;&#xA;                getch();&#xA;                exit(0);&#xA;            default:&#xA;                cout&amp;lt;&amp;lt;&amp;quot;\n\t Invalid key-in&amp;quot;;&#xA;        }&#xA;        flag = 0;&#xA;&#xA;    } while (1);&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;output-28&#34;&gt;&#xA;  OUTPUT&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#output-28&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;....SEARCHING....&#xA;&#xA;1. Sequential Search&#xA;2. Binary Search&#xA;3. Enter another list&#xA;4. Exit&#xA;Enter your choice: 1&#xA;&#xA;Enter the limit: 5&#xA;&#xA;Enter the elements: 12 56 10 45 96&#xA;&#xA;Enter the element to be searched: 10&#xA;&#xA;Item is found at position 3&#xA;&#xA;&#xA;....SEARCHING....&#xA;&#xA;&#xA;1. Sequential Search&#xA;2. Binary Search&#xA;3. Enter another list&#xA;4. Exit&#xA;Enter your choice: 3&#xA;&#xA;Enter the limit: 5&#xA;&#xA;Enter the elements: 10 20 30 40 50&#xA;&#xA;&#xA;....SEARCHING....&#xA;&#xA;1. Sequential Search&#xA;2. Binary Search&#xA;3. Enter another list&#xA;4. Exit&#xA;&#xA;Enter your choice: 2&#xA;&#xA;Enter the element to be searched: 40&#xA;&#xA;Item is found at position 4&#xA;&#xA;&#xA;....SEARCHING....&#xA;&#xA;1. Sequential Search&#xA;2. Binary Search&#xA;3. Enter another list&#xA;4. Exit&#xA;&#xA;Enter your choice: 4&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
  </channel>
</rss>
