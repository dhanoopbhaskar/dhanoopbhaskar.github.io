<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ruby on The Insane Techie</title>
    <link>https://dhanoopbhaskar.github.io/categories/ruby/</link>
    <description>Recent content in Ruby on The Insane Techie</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Fri, 16 Sep 2011 19:28:00 +0530</lastBuildDate>
    <atom:link href="https://dhanoopbhaskar.github.io/categories/ruby/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ruby - Objects</title>
      <link>https://dhanoopbhaskar.github.io/posts/2011-09-16-ruby-objects/</link>
      <pubDate>Fri, 16 Sep 2011 19:28:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2011-09-16-ruby-objects/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Creating an object&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;irb(main):012:0&amp;gt; g = Greeter.new(&amp;quot;Ruby&amp;quot;)&#xA;=&amp;gt; #&amp;lt;Greeter:0x16cac @name=&amp;quot;Ruby&amp;quot;&amp;gt;&#xA;irb(main):013:0&amp;gt; g.say_hi&#xA;Hi Ruby!&#xA;=&amp;gt; nil&#xA;irb(main):014:0&amp;gt; g.say_bye&#xA;Bye Ruby, come back soon&#xA;=&amp;gt; nil&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Once the object &lt;code&gt;g&lt;/code&gt; is created, it remembers that the name is Ruby. Hmm, what if we want to get at the name directly?&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;irb(main):015:0&amp;gt; g.@name&#xA;SyntaxError: compile error&#xA;(irb):52: syntax error&#xA;        from (irb):52&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Nope, can’t do it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ruby - Classes</title>
      <link>https://dhanoopbhaskar.github.io/posts/2011-09-16-ruby-classes/</link>
      <pubDate>Fri, 16 Sep 2011 19:13:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2011-09-16-ruby-classes/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Defining a class&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;irb(main):001:0&amp;gt; class Greeter&#xA;irb(main):002:1&amp;gt;  def initialize(name = &amp;quot;World&amp;quot;)&#xA;irb(main):003:2&amp;gt;   @name = name&#xA;irb(main):004:2&amp;gt;  end&#xA;irb(main):005:1&amp;gt;  def say_hi&#xA;irb(main):006:2&amp;gt;   puts &amp;quot;Hi #{@name}!&amp;quot;&#xA;irb(main):007:2&amp;gt;  end&#xA;irb(main):008:1&amp;gt;  def say_bye&#xA;irb(main):009:2&amp;gt;   puts &amp;quot;Bye #{@name}, come back soon&amp;quot;&#xA;irb(main):010:2&amp;gt;  end&#xA;irb(main):011:1&amp;gt; end&#xA;=&amp;gt; nil&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;The new keyword here is &lt;code&gt;class&lt;/code&gt;. This defines a new class called &lt;code&gt;Greeter&lt;/code&gt; and a bunch of methods for that class. Also notice &lt;code&gt;@name&lt;/code&gt;. This is an instance variable, and is available to all the methods of the class. As you can see it is used by &lt;code&gt;say_hi&lt;/code&gt; and &lt;code&gt;say_bye&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ruby- Defining a method</title>
      <link>https://dhanoopbhaskar.github.io/posts/2011-09-16-ruby-defining-a-method/</link>
      <pubDate>Fri, 16 Sep 2011 18:44:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2011-09-16-ruby-defining-a-method/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s start with an example&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;irb(main):001:0&amp;gt; def h&#xA;irb(main):002:1&amp;gt; puts &amp;quot;Ruby Language&amp;quot;&#xA;irb(main):003:1&amp;gt; end&#xA;=&amp;gt; nil&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;The definition of the method starts with keyword &lt;code&gt;def&lt;/code&gt; and an identifier to the method (i.e., &lt;code&gt;h&lt;/code&gt;). Next comes the actual body of the method and the keyword &lt;code&gt;end&lt;/code&gt; as the delimiter.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Running a method&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;irb(main):004:0&amp;gt; h&#xA;Ruby Language&#xA;=&amp;gt; nil&#xA;irb(main):005:0&amp;gt; h()&#xA;Ruby Language&#xA;=&amp;gt; nil&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Calling a method in Ruby is as easy as just mentioning its name to Ruby. If the method does not take parameters that’s all you need. You can add empty parentheses if you would like, but they are not needed.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Starting with Ruby!!</title>
      <link>https://dhanoopbhaskar.github.io/posts/2011-09-16-starting-with-ruby/</link>
      <pubDate>Fri, 16 Sep 2011 13:57:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2011-09-16-starting-with-ruby/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Interactive Ruby&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Ruby comes with a program that will show the results of any Ruby&#xA;statements you feed it.&lt;br&gt;&#xA;Playing with Ruby code in interactive sessions like this is a terrific&#xA;way to learn the&lt;br&gt;&#xA;language.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;To print something to the interactive ruby terminal (IRB)&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Just type in something enclosed within double quotes and click enter&#xA;key.&lt;/p&gt;&#xA;&lt;p&gt;For example type: &amp;ldquo;Ruby Language&amp;rdquo;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;irb(main):001:0&amp;gt; &amp;quot;Ruby Language&amp;quot;&#xA;=&amp;gt; &amp;quot;Ruby Language&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Actually the second line is just IRB’s way of telling us the result of&#xA;the last expression it evaluated.&lt;/p&gt;</description>
    </item>
    <item>
      <title>About Ruby Programming Language</title>
      <link>https://dhanoopbhaskar.github.io/posts/2011-09-16-about-ruby-programming-language/</link>
      <pubDate>Fri, 16 Sep 2011 13:43:00 +0530</pubDate>
      <guid>https://dhanoopbhaskar.github.io/posts/2011-09-16-about-ruby-programming-language/</guid>
      <description>&lt;p&gt;Wondering why Ruby is so popular? Its fans call it a beautiful, artful language. And yet, they say it’s handy and practical. What gives?&lt;/p&gt;&#xA;&lt;h3 id=&#34;the-ideals-of-rubys-creator&#34;&gt;&#xA;  The Ideals of Ruby’s Creator&#xA;  &lt;a class=&#34;heading-link&#34; href=&#34;#the-ideals-of-rubys-creator&#34;&gt;&#xA;    &lt;i class=&#34;fa-solid fa-link&#34; aria-hidden=&#34;true&#34; title=&#34;Link to heading&#34;&gt;&lt;/i&gt;&#xA;    &lt;span class=&#34;sr-only&#34;&gt;Link to heading&lt;/span&gt;&#xA;  &lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Ruby is a language of careful balance. Its creator, &lt;code&gt;Yukihiro “matz” Matsumoto&lt;/code&gt;, blended parts of his favorite languages (Perl, Smalltalk, Eiffel, Ada, and Lisp) to form a new language that balanced functional programming with imperative programming.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
