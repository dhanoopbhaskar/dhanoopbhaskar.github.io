<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on The Insane Techie</title>
    <link>https://dhanoopbhaskar.github.io/blog/</link>
    <description>Recent content in Blog on The Insane Techie</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 07 May 2020 14:35:00 +0530</lastBuildDate>
    
	<atom:link href="https://dhanoopbhaskar.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ROS In Docker Container</title>
      <link>https://dhanoopbhaskar.github.io/blog/2020-05-07-ros-in-docker-container/</link>
      <pubDate>Thu, 07 May 2020 14:35:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2020-05-07-ros-in-docker-container/</guid>
      <description>ROS (Robot Operating System) - Documentation - http://wiki.ros.org/
In this example I use docker image of ROS Melodic and a Dockerfile for creating the required docker container. Python3 (python3.7) is also installed in this example.
Please refer https://docs.docker.com/get-started/ for more information on Dockers.
  Pull the docker image for ROS Melodic
 docker pull ros:melodic    Creating the Dockerfile FROM ros:melodic MAINTAINER dhanoopbhaskar@gmail.com RUN apt-get update &amp;amp;&amp;amp; apt-get upgrade -y \ &amp;amp;&amp;amp; apt-get install -y software-properties-common \ &amp;amp;&amp;amp; add-apt-repository ppa:deadsnakes/ppa \ &amp;amp;&amp;amp; apt-get install -y python3.</description>
    </item>
    
    <item>
      <title>Working With Python 3 In ROS Kinetic Or Melodic</title>
      <link>https://dhanoopbhaskar.github.io/blog/2020-05-07-working-with-python-3-in-ros-kinetic-or-melodic/</link>
      <pubDate>Thu, 07 May 2020 14:07:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2020-05-07-working-with-python-3-in-ros-kinetic-or-melodic/</guid>
      <description>ROS (Robot Operating System) - Documentation - http://wiki.ros.org/
 The Robot Operating System (ROS) is a flexible framework for writing robot software. It is a collection of tools, libraries, and conventions that aim to simplify the task of creating complex and robust robot behavior across a wide variety of robotic platforms. — https://www.ros.org/ 1 ROS (upto Melodic) officially supports only python2 and NOT python3. However some libraries we use in our projects (eg.</description>
    </item>
    
    <item>
      <title>Biped Walking Robot</title>
      <link>https://dhanoopbhaskar.github.io/blog/2019-10-28-biped-walking-robot/</link>
      <pubDate>Mon, 28 Oct 2019 12:10:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2019-10-28-biped-walking-robot/</guid>
      <description>We, a team of 3, attended a course titled &amp;ldquo;2 Mechatronics Project&amp;rdquo; conducted by Skyfi Labs in the month of October 2019. Thought of sharing the assignments done as a part of the course.
Biped Walking Robot
  </description>
    </item>
    
    <item>
      <title>Robotic Arm</title>
      <link>https://dhanoopbhaskar.github.io/blog/2019-10-28-robotic-arm/</link>
      <pubDate>Mon, 28 Oct 2019 12:05:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2019-10-28-robotic-arm/</guid>
      <description>We, a team of 3, attended a course titled &amp;ldquo;2 Mechatronics Project&amp;rdquo; conducted by Skyfi Labs in the month of October 2019. Thought of sharing the assignments done as a part of the course.
Robotic Arm
  </description>
    </item>
    
    <item>
      <title>7 Robots in 6 Days</title>
      <link>https://dhanoopbhaskar.github.io/blog/2019-10-28-7-robots-in-6-days/</link>
      <pubDate>Mon, 28 Oct 2019 12:00:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2019-10-28-7-robots-in-6-days/</guid>
      <description>7 Robots in 6 Days
We, a team of 3, attended a course titled &amp;ldquo;7 Robots in 6 Days&amp;rdquo; conducted by Skyfi Labs in the month of June 2019. Thought of sharing the assignments done as a part of the course.
1. Line Follower Robot using Arduino
  2. Obstacle Avoider Robot using Arduino
  3. Obstacle Follower Robot using Arduino
  4. Gesture Based Robotics
  5.</description>
    </item>
    
    <item>
      <title>Mounting an iPhone to Linux Mint as an external drive to copy images and videos</title>
      <link>https://dhanoopbhaskar.github.io/blog/2018-07-02-mounting-an-iphone-to-linux-mint-as-an-external-drive-to-copy-images-and-videos/</link>
      <pubDate>Mon, 02 Jul 2018 20:01:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2018-07-02-mounting-an-iphone-to-linux-mint-as-an-external-drive-to-copy-images-and-videos/</guid>
      <description>Phone: iPhone SE
Operating System: Linux Mint 18.1(should work in Ubuntu as well)
It is done by compiling most of the sources yourself.
Only one library - usbmuxd - must be installed as root
All others are installed in the home account.
Install necessary software for building the source packages.
To check-out and compile the needed packages from source, you have to install git first.
Open a terminal and do the following:</description>
    </item>
    
    <item>
      <title>RESTful Web Services in Java</title>
      <link>https://dhanoopbhaskar.github.io/blog/2016-08-22-restful-web-services-in-java/</link>
      <pubDate>Mon, 22 Aug 2016 20:13:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2016-08-22-restful-web-services-in-java/</guid>
      <description>Read about REST here&amp;hellip;
In the example program REST is implemented using Jersey Framework.
Download Jersey framework from here&amp;hellip;
I used Dynamic Web Project in Eclipse for coding. Extract jersey zip file and copy all the .jar files from api, ext, lib folders to WebContent/WEB-INF/lib folder.
Employee.java
package in.theinsanetechie.rest; import java.io.Serializable; import javax.xml.bind.annotation.XmlElement; import javax.xml.bind.annotation.XmlRootElement; @XmlRootElement(name = &amp;#34;employee&amp;#34;) public class Employee implements Serializable { private static final long serialVersionUID = 1L; private int empcode; private String name; private String designation; private float basicpay; public Employee() { } public Employee(int empcode, String name, String designation, float basicpay) { super(); this.</description>
    </item>
    
    <item>
      <title>Installing and Configuring phpMyAdmin in Ubuntu/Linux Mint</title>
      <link>https://dhanoopbhaskar.github.io/blog/2016-03-09-installing-and-configuring-phpmyadmin-in-ubuntu-linux-mint/</link>
      <pubDate>Wed, 09 Mar 2016 21:57:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2016-03-09-installing-and-configuring-phpmyadmin-in-ubuntu-linux-mint/</guid>
      <description>Install phpmyadmin
sudo apt-get install phpmyadmin  Configure phpmyadmin
sudo dpkg-reconfigure -plow phpmyadmin  Then select Apache 2 for the webserver you wish to configure.
Try hitting the URL http://localhost/phpmyadmin/
If this does not work, then you have to include the phpMyAdmin-shipped Apache configuration into Apache:
sudo ln -s /etc/phpmyadmin/apache.conf /etc/apache2/conf.d/phpmyadmin.conf sudo /etc/init.d/apache2 reload  Since Ubuntu 13.10 (Saucy Salamander), Apache no longer loads configuration files from the /etc/apache2/conf.d directory.</description>
    </item>
    
    <item>
      <title>DNS Lookup - Implementation in C</title>
      <link>https://dhanoopbhaskar.github.io/blog/2016-02-14-dns-lookup-implementation-in-c/</link>
      <pubDate>Sun, 14 Feb 2016 01:23:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2016-02-14-dns-lookup-implementation-in-c/</guid>
      <description>Read about DNS here&amp;hellip;
DNS Lookup - Implementation in C
/**dnsclient.c**/ #include&amp;#34;stdio.h&amp;#34;  #include&amp;#34;stdlib.h&amp;#34;  #include&amp;#34;sys/types.h&amp;#34;  #include&amp;#34;sys/socket.h&amp;#34;  #include&amp;#34;string.h&amp;#34;  #include&amp;#34;netinet/in.h&amp;#34;  #include&amp;#34;netdb.h&amp;#34; #include&amp;#34;arpa/inet.h&amp;#34; #define BUF_SIZE 512  #define SERVER &amp;#34;8.8.8.8&amp;#34;  #define PORT 53  #define WIDTH 16  int createSocket(); void createRequest(char * url); void hexdump (char *desc, void *addr, int len); void lookUp(); struct query { uint16_t length; char * url; unsigned char request[BUF_SIZE]; uint16_t reqType; }; struct query dnsQuery = { .</description>
    </item>
    
    <item>
      <title>Java program to find the distance between two GPS locations.</title>
      <link>https://dhanoopbhaskar.github.io/blog/2015-03-11-java-program-to-find-the-distance-between-two-gps-locations/</link>
      <pubDate>Wed, 11 Mar 2015 11:04:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2015-03-11-java-program-to-find-the-distance-between-two-gps-locations/</guid>
      <description>Location.java
package com.cables.gps; public class Location { private int latDegree; private int latMinutes; private int latSeconds; private char latDirection; private int longDegree; private int longMinutes; private int longSeconds; private char longDirection; private float latitude; private float longitude; private void init() throws Exception { latitude = latDegree + (latMinutes / 60.0f) + (latSeconds / 3600.0f); if (latDirection == &amp;#39;N&amp;#39;) { latitude *= 1f; } else if (latDirection == &amp;#39;S&amp;#39;) { latitude *= -1f; } else { throw new Exception(&amp;#34;Invalid Latitude Direction: &amp;#34; + latDirection); } longitude = longDegree + (longMinutes / 60.</description>
    </item>
    
    <item>
      <title>Sum of Prime Numbers Between 1000000 and 1000100 Using Sieve of Eratosthenes</title>
      <link>https://dhanoopbhaskar.github.io/blog/2014-12-30-sum-of-prime-numbers-between-1000000-and-1000100-using-sieve-of-eratosthenes/</link>
      <pubDate>Tue, 30 Dec 2014 09:36:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2014-12-30-sum-of-prime-numbers-between-1000000-and-1000100-using-sieve-of-eratosthenes/</guid>
      <description>For more information on Sieve of Eratosthenes please refer wikipedia page
#include &amp;#34;stdio.h&amp;#34; #include &amp;#34;string.h&amp;#34; #include &amp;#34;stdlib.h&amp;#34; #include &amp;#34;assert.h&amp;#34; typedef unsigned long long biggerint; void findPrimeNumbers(biggerint start, biggerint end) { char * primeList = malloc(sizeof(unsigned char) * (end + 1)); int i; biggerint sum = 0; assert(primeList != NULL); /* set prime status */ for (i = 0; i &amp;lt;= end + 1 ; i++) { *(primeList + i) = 1; } primeList[0] = 0; primeList[1] = 0; /* mark all the non-prime numbers */ biggerint currentFactor = 2; biggerint lastSquare = 0; biggerint currentSquare = 0; while (currentFactor * currentFactor &amp;lt;= end) { /* mark all the multiples of the current factor */ biggerint mark = currentFactor + currentFactor; while (mark &amp;lt;= end) { *(primeList + mark) = 0; mark += currentFactor; } /* set currentFactor to next prime number */ currentFactor++; while (*(primeList+currentFactor) == 0) currentFactor++; assert(currentFactor &amp;lt;= end); } for(i = start; i &amp;lt;= end ; i++) { if(*(primeList + i)) sum += i; } free(primeList); printf(&amp;#34;%llu\n&amp;#34;, sum); } int main(int argc, char *argv[]) { biggerint start = 1000000; biggerint end = 1000100; findPrimeNumbers(start, end); return 0; } </description>
    </item>
    
    <item>
      <title>AES Implementation In Java with ECB | CBC | OFB | CFB Modes Of Operation</title>
      <link>https://dhanoopbhaskar.github.io/blog/2014-07-30-aes-implementation-in-java-with-ecb-cbc-ofb-cfb-modes-of-operation/</link>
      <pubDate>Wed, 30 Jul 2014 23:19:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2014-07-30-aes-implementation-in-java-with-ecb-cbc-ofb-cfb-modes-of-operation/</guid>
      <description>Note that these are ONLY basic level programs for easy understanding of the Advanced Encryption Standard (AES) algorithm
Key Generation - AESkeygen.java
import java.io.File; import java.io.FileWriter; public class AESkeygen { private final File file = new File(&amp;#34;AESkey.txt&amp;#34;); private final int KEY_LENGTH = 32; private final static char[] hexArray = &amp;#34;0123456789ABCDEF&amp;#34;.toCharArray(); public AESkeygen() { try { FileWriter fileWriter = new FileWriter(file); fileWriter.write(&amp;#34;&amp;#34;); for (int i = 0; i &amp;lt; KEY_LENGTH; i++) { double random = Math.</description>
    </item>
    
    <item>
      <title>DES Implementation In Java with ECB | CBC | OFB | CFB Modes Of Operation</title>
      <link>https://dhanoopbhaskar.github.io/blog/2014-07-30-des-implementation-in-java-with-ecb-cbc-ofb-cfb-modes-of-operation/</link>
      <pubDate>Wed, 30 Jul 2014 21:35:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2014-07-30-des-implementation-in-java-with-ecb-cbc-ofb-cfb-modes-of-operation/</guid>
      <description>Note that these are ONLY basic level programs for easy understanding of the Data Encryption Standard (DES) algorithm
Key Generation - DESkeygen.java
import java.io.File; import java.io.FileWriter; public class DESkeygen { private final File file = new File(&amp;#34;DESkey.txt&amp;#34;); private final int KEY_LENGTH = 16; private final static char[] hexArray = &amp;#34;0123456789ABCDEF&amp;#34;.toCharArray(); public DESkeygen() { try { FileWriter fileWriter = new FileWriter(file); fileWriter.write(&amp;#34;&amp;#34;); for (int i = 0; i &amp;lt; KEY_LENGTH; i++) { double random = Math.</description>
    </item>
    
    <item>
      <title>AES Implementation in Java</title>
      <link>https://dhanoopbhaskar.github.io/blog/2014-07-30-aes-implementation-in-java/</link>
      <pubDate>Wed, 30 Jul 2014 12:48:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2014-07-30-aes-implementation-in-java/</guid>
      <description>AES.java
import java.util.Arrays; public class AES { private static final int BITS = 16; private static final int ROUNDS = 10; private static final int NO_OF_WORDS_IN_KEY = 44; private static final int KEY_LENGTH = 16; private static final int BLOCK_LENGTH = 16; final protected static char[] hexArray = &amp;#34;0123456789ABCDEF&amp;#34;.toCharArray(); int[] RC = { 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36 }; Word[] Rcon = new Word[ROUNDS]; private byte[] word = null; static final int[] sBox = { 0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 }; static final int[] invSBox = { 0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d }; public AES() { for (int i = 0; i &amp;lt; ROUNDS; i++) { Rcon[i] = new Word(); byte[] temp = new byte[4]; temp[0] = (byte) (RC[i] &amp;amp; 0xff); temp[1] = 0; temp[2] = 0; temp[3] = 0; Rcon[i].</description>
    </item>
    
    <item>
      <title>DES Implementation In Java</title>
      <link>https://dhanoopbhaskar.github.io/blog/2014-06-20-des-implementation-in-java/</link>
      <pubDate>Fri, 20 Jun 2014 00:12:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2014-06-20-des-implementation-in-java/</guid>
      <description>DES.java
public class DES { /* Initial Permutation */ static final int[] IP = { 58, 50, 42, 34, 26, 18, 10, 2, 60, 52, 44, 36, 28, 20, 12, 4, 62, 54, 46, 38, 30, 22, 14, 6, 64, 56, 48, 40, 32, 24, 16, 8, 57, 49, 41, 33, 25, 17, 9, 1, 59, 51, 43, 35, 27, 19, 11, 3, 61, 53, 45, 37, 29, 21, 13, 5, 63, 55, 47, 39, 31, 23, 15, 7 }; /* Inverse Initial Permutation */ static final int[] IIP = { 40, 8, 48, 16, 56, 24, 64, 32, 39, 7, 47, 15, 55, 23, 63, 31, 38, 6, 46, 14, 54, 22, 62, 30, 37, 5, 45, 13, 53, 21, 61, 29, 36, 4, 44, 12, 52, 20, 60, 28, 35, 3, 43, 11, 51, 19, 59, 27, 34, 2, 42, 10, 50, 18, 58, 26, 33, 1, 41, 9, 49, 17, 57, 25 }; /* Expansion Permutation */ static final int[] E = { 32, 1, 2, 3, 4, 5, 4, 5, 6, 7, 8, 9, 8, 9, 10, 11, 12, 13, 12, 13, 14, 15, 16, 17, 16, 17, 18, 19, 20, 21, 20, 21, 22, 23, 24, 25, 24, 25, 26, 27, 28, 29, 28, 29, 30, 31, 32, 1 }; /* Permutation Function */ static final int[] P = { 16, 7, 20, 21, 29, 12, 28, 17, 1, 15, 23, 26, 5, 18, 31, 10, 2, 8, 24, 14, 32, 27, 3, 9, 19, 13, 30, 6, 22, 11, 4, 25 }; /* S-Boxes*/ static final int[] S1 = { 14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7, 0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8, 4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0, 15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13 }; static final int[] S2 = { 15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10, 3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5, 0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15, 13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9 }; static final int[] S3 = { 10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8, 13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1, 13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7, 1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12 }; static final int[] S4 = { 7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15, 13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9, 10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4, 3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14 }; static final int[] S5 = { 2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9, 14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6, 4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14, 11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3 }; static final int[] S6 = { 12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11, 10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8, 9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6, 4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13 }; static final int[] S7 = { 4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1, 13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6, 1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2, 6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12 }; static final int[] S8 = { 13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7, 1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2, 7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8, 2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11 }; /* Permuted Choice One */ static final int[] PC1 = { 57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4 }; /* Permuted Choice Two */ static final int[] PC2 = { 14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4, 26, 8, 16, 7, 27, 20, 13, 2, 41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33, 48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32 }; /* Schedule of Left Shifts */ static final int[] SHIFTS = { 1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1 }; public DES() { } private byte[] performXOR(byte[] one, byte[] two) { byte[] result = new byte[one.</description>
    </item>
    
    <item>
      <title>Total Views Crossed 50K !! Thanks for your support !!</title>
      <link>https://dhanoopbhaskar.github.io/blog/2014-05-19-total-views-crossed-50k-thanks-for-your-support/</link>
      <pubDate>Mon, 19 May 2014 23:23:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2014-05-19-total-views-crossed-50k-thanks-for-your-support/</guid>
      <description> Today, the total page views crossed 50K :-)
Thanks for your support!
 </description>
    </item>
    
    <item>
      <title>Java - Common Problems (and Their Solutions)</title>
      <link>https://dhanoopbhaskar.github.io/blog/2014-04-26-java-common-problems-and-their-solutions/</link>
      <pubDate>Sat, 26 Apr 2014 17:51:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2014-04-26-java-common-problems-and-their-solutions/</guid>
      <description>Original Link:
http://docs.oracle.com/javase/tutorial/getStarted/problems/
Check the license before redistribution: http://docs.oracle.com/javase/tutorial/information/license.html</description>
    </item>
    
    <item>
      <title>Java - Encryption and Decryption of an Image Using Another Image (Blowfish Algorithm)</title>
      <link>https://dhanoopbhaskar.github.io/blog/2014-04-09-java-encryption-and-decryption-of-an-image-using-another-image-blowfish-algorithm/</link>
      <pubDate>Wed, 09 Apr 2014 20:00:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2014-04-09-java-encryption-and-decryption-of-an-image-using-another-image-blowfish-algorithm/</guid>
      <description>Here an image file is encrypted and decrypted using another image file as the password
/* EncryptFile.java */ import java.io.File; import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.FileOutputStream; import java.io.IOException; import java.io.InputStream; import java.io.OutputStream; import java.security.InvalidKeyException; import java.security.NoSuchAlgorithmException; import javax.crypto.BadPaddingException; import javax.crypto.Cipher; import javax.crypto.IllegalBlockSizeException; import javax.crypto.NoSuchPaddingException; import javax.crypto.SecretKey; import javax.crypto.spec.SecretKeySpec; /** * * @author dhanoopbhaskar */ public class EncryptFile { SecretKey secretKey = null; Cipher cipher = null; String filePath = null; public EncryptFile(String filePath) { this.</description>
    </item>
    
    <item>
      <title>Java - Encryption and Decryption of an Image Using Blowfish Algorithm (using password)</title>
      <link>https://dhanoopbhaskar.github.io/blog/2014-04-05-java-encryption-and-decryption-of-an-image-using-blowfish-algorithm-using-password/</link>
      <pubDate>Sat, 05 Apr 2014 22:22:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2014-04-05-java-encryption-and-decryption-of-an-image-using-blowfish-algorithm-using-password/</guid>
      <description>package com.java.blowfish; import java.io.File; import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.FileOutputStream; import java.io.IOException; import java.io.InputStream; import java.io.OutputStream; import java.security.InvalidKeyException; import java.security.NoSuchAlgorithmException; import javax.crypto.BadPaddingException; import javax.crypto.Cipher; import javax.crypto.IllegalBlockSizeException; import javax.crypto.KeyGenerator; import javax.crypto.NoSuchPaddingException; import javax.crypto.SecretKey; import javax.crypto.spec.SecretKeySpec; /** * * @author dhanoopbhaskar */ public class EncryptFile { KeyGenerator keyGenerator = null; SecretKey secretKey = null; Cipher cipher = null; String masterPassword = null; public EncryptFile(String masterPassword) { this.masterPassword = masterPassword; try { /** * Create a Blowfish key */ keyGenerator = KeyGenerator.</description>
    </item>
    
    <item>
      <title>A simple HTTP client and a server in C</title>
      <link>https://dhanoopbhaskar.github.io/blog/2014-02-13-a-simple-http-client-and-a-server-in-c/</link>
      <pubDate>Thu, 13 Feb 2014 23:06:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2014-02-13-a-simple-http-client-and-a-server-in-c/</guid>
      <description>The HTTP server sends the files requested by the client, if it is available at the server. The HTTP client uses GET method for requesting files from the server. Only .html, .txt and .pdf files are implemented. On receiving the file, the client program opens it using firefox or gedit or acrobat reader, as per the file type. Note that the given programs were done in Linux (Debian) environment.
httpserver.c</description>
    </item>
    
    <item>
      <title>A simple chat program in C (TCP)</title>
      <link>https://dhanoopbhaskar.github.io/blog/2014-01-22-a-simple-chat-program-in-c-tcp/</link>
      <pubDate>Wed, 22 Jan 2014 20:26:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2014-01-22-a-simple-chat-program-in-c-tcp/</guid>
      <description>tcpserver.c
#include&amp;#34;stdio.h&amp;#34; #include&amp;#34;stdlib.h&amp;#34; #include&amp;#34;sys/types.h&amp;#34; #include&amp;#34;sys/socket.h&amp;#34; #include&amp;#34;string.h&amp;#34; #include&amp;#34;netinet/in.h&amp;#34; #include&amp;#34;pthread.h&amp;#34; #define PORT 4444  #define BUF_SIZE 2000  #define CLADDR_LEN 100  void * receiveMessage(void * socket) { int sockfd, ret; char buffer[BUF_SIZE]; sockfd = (int) socket; memset(buffer, 0, BUF_SIZE); for (;;) { ret = recvfrom(sockfd, buffer, BUF_SIZE, 0, NULL, NULL); if (ret &amp;lt; 0) { printf(&amp;#34;Error receiving data!\n&amp;#34;); } else { printf(&amp;#34;client: &amp;#34;); fputs(buffer, stdout); //printf(&amp;#34;\n&amp;#34;);  } } } void main() { struct sockaddr_in addr, cl_addr; int sockfd, len, ret, newsockfd; char buffer[BUF_SIZE]; pid_t childpid; char clientAddr[CLADDR_LEN]; pthread_t rThread; sockfd = socket(AF_INET, SOCK_STREAM, 0); if (sockfd &amp;lt; 0) { printf(&amp;#34;Error creating socket!</description>
    </item>
    
    <item>
      <title>TCP in C (one server and multiple clients) </title>
      <link>https://dhanoopbhaskar.github.io/blog/2014-01-16-tcp-in-c-one-server-and-multiple-clients/</link>
      <pubDate>Thu, 16 Jan 2014 21:12:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2014-01-16-tcp-in-c-one-server-and-multiple-clients/</guid>
      <description>tcpserver.c
#include&amp;#34;stdio.h&amp;#34; #include&amp;#34;stdlib.h&amp;#34; #include&amp;#34;sys/types.h&amp;#34; #include&amp;#34;sys/socket.h&amp;#34; #include&amp;#34;string.h&amp;#34; #include&amp;#34;netinet/in.h&amp;#34; #define PORT 4444  #define BUF_SIZE 2000  #define CLADDR_LEN 100  void main() { struct sockaddr_in addr, cl_addr; int sockfd, len, ret, newsockfd; char buffer[BUF_SIZE]; pid_t childpid; char clientAddr[CLADDR_LEN]; sockfd = socket(AF_INET, SOCK_STREAM, 0); if (sockfd &amp;lt; 0) { printf(&amp;#34;Error creating socket!\n&amp;#34;); exit(1); } printf(&amp;#34;Socket created...\n&amp;#34;); memset(&amp;amp;addr, 0, sizeof(addr)); addr.sin_family = AF_INET; addr.sin_addr.s_addr = INADDR_ANY; addr.sin_port = PORT; ret = bind(sockfd, (struct sockaddr *) &amp;amp;addr, sizeof(addr)); if (ret &amp;lt; 0) { printf(&amp;#34;Error binding!</description>
    </item>
    
    <item>
      <title>Socket Programming in C, TCP over a network (2 systems)</title>
      <link>https://dhanoopbhaskar.github.io/blog/2014-01-16-socket-programming-in-c-tcp-over-a-network-2-systems/</link>
      <pubDate>Thu, 16 Jan 2014 20:53:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2014-01-16-socket-programming-in-c-tcp-over-a-network-2-systems/</guid>
      <description>tcpserver.c
#include&amp;#34;stdio.h&amp;#34; #include&amp;#34;stdlib.h&amp;#34; #include&amp;#34;sys/types.h&amp;#34; #include&amp;#34;sys/socket.h&amp;#34; #include&amp;#34;string.h&amp;#34; #include&amp;#34;netinet/in.h&amp;#34; #define PORT 4444  #define BUF_SIZE 2000  void main() { struct sockaddr_in addr, cl_addr; int sockfd, len, ret, newsockfd; char buffer[BUF_SIZE]; sockfd = socket(AF_INET, SOCK_STREAM, 0); if (sockfd &amp;lt; 0) { printf(&amp;#34;Error creating socket!\n&amp;#34;); exit(1); } printf(&amp;#34;Socket created...\n&amp;#34;); memset(&amp;amp;addr, 0, sizeof(addr)); addr.sin_family = AF_INET; addr.sin_addr.s_addr = INADDR_ANY; addr.sin_port = PORT; ret = bind(sockfd, (struct sockaddr *) &amp;amp;addr, sizeof(addr)); if (ret &amp;lt; 0) { printf(&amp;#34;Error binding!</description>
    </item>
    
    <item>
      <title>Socket Programming In C (TCP)</title>
      <link>https://dhanoopbhaskar.github.io/blog/2014-01-05-socket-programming-in-c-tcp/</link>
      <pubDate>Sun, 05 Jan 2014 01:03:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2014-01-05-socket-programming-in-c-tcp/</guid>
      <description>tcpserver.c
#include&amp;#34;stdio.h&amp;#34; #include&amp;#34;stdlib.h&amp;#34; #include&amp;#34;sys/types.h&amp;#34; #include&amp;#34;sys/socket.h&amp;#34; #include&amp;#34;string.h&amp;#34; #include&amp;#34;netinet/in.h&amp;#34; #define PORT 4444  #define BUF_SIZE 20  void main() { struct sockaddr_in addr, cl_addr; int sockfd, len, ret, newsockfd; char buffer[BUF_SIZE]; sockfd = socket(AF_INET, SOCK_STREAM, 0); if (sockfd &amp;lt; 0) { printf(&amp;#34;Error creating socket!\n&amp;#34;); exit(1); } printf(&amp;#34;Socket created...\n&amp;#34;); memset(&amp;amp;addr, 0, sizeof(addr)); addr.sin_family = AF_INET; addr.sin_addr.s_addr = INADDR_ANY; addr.sin_port = PORT; ret = bind(sockfd, (struct sockaddr *) &amp;amp;addr, sizeof(addr)); if (ret &amp;lt; 0) { printf(&amp;#34;Error binding!</description>
    </item>
    
    <item>
      <title>Initialization-on-demand holder idiom</title>
      <link>https://dhanoopbhaskar.github.io/blog/2013-08-31-initialization-on-demand-holder-idiom/</link>
      <pubDate>Sat, 31 Aug 2013 19:19:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2013-08-31-initialization-on-demand-holder-idiom/</guid>
      <description>See Singleton Pattern here&amp;hellip;
package me.dhanoop.singleton; /** * * @author dhanoopbhaskar */ public class Singleton { private static class HelperHolder { public static Helper helper = new Helper(); } public static Helper getHelper() { return HelperHolder.helper; } public static void main(String[] args) { Runnable runnable = new Runnable() { @Override public void run() { Singleton.getHelper(); } }; new Thread(runnable).start(); new Thread(runnable).start(); new Thread(runnable).start(); } }  Here, as the helper object is static, an alternative is used - initialization-on-demand holder idiom.</description>
    </item>
    
    <item>
      <title>Eager initialization</title>
      <link>https://dhanoopbhaskar.github.io/blog/2013-08-31-eager-initialization/</link>
      <pubDate>Sat, 31 Aug 2013 17:20:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2013-08-31-eager-initialization/</guid>
      <description>See Singleton Pattern here&amp;hellip;
If the program will always need an instance, or if the cost of creating the instance is not too large in terms of time/resources, the programmer can switch to eager initialization, which always creates an instance.
Singleton.java
package me.dhanoop.singleton; /** * * @author dhanoopbhaskar */ public class Singleton { private static final Helper helper = new Helper(); public static Helper getHelper() { return helper; } public static void main(String[] args) { Runnable runnable = new Runnable() { @Override public void run() { Singleton.</description>
    </item>
    
    <item>
      <title>Double-checked locking and Lazy initialization</title>
      <link>https://dhanoopbhaskar.github.io/blog/2013-08-31-double-checked-locking-and-lazy-initialization/</link>
      <pubDate>Sat, 31 Aug 2013 16:58:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2013-08-31-double-checked-locking-and-lazy-initialization/</guid>
      <description>Lazy initialization is the tactic of delaying the creation of an object, the calculation of a value, or some other expensive process until the first time it is needed.
This is generally accomplished by maintaining a flag indicating whether the process has taken place. Each time the desired object is summoned, the flag is tested. If it is ready, it is returned. If not, it is initialized on the spot. In multithreaded code, access to the flag must be synchronized to guard against a race condition.</description>
    </item>
    
    <item>
      <title>Singleton Pattern</title>
      <link>https://dhanoopbhaskar.github.io/blog/2013-08-31-singleton-pattern/</link>
      <pubDate>Sat, 31 Aug 2013 16:29:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2013-08-31-singleton-pattern/</guid>
      <description>In software engineering, the singleton pattern is a design pattern that restricts a class from creating more than one object (Instantiation is restricted to one object). Such a design is generally used in a software system which operates more efficiently when only one object exists. It is useful when exactly one object is needed to coordinate actions across the system.
Read more about singleton pattern here&amp;hellip;
Java implementation
1. Single Threaded version</description>
    </item>
    
    <item>
      <title>Software Design Pattern</title>
      <link>https://dhanoopbhaskar.github.io/blog/2013-08-31-software-design-pattern/</link>
      <pubDate>Sat, 31 Aug 2013 15:33:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2013-08-31-software-design-pattern/</guid>
      <description>A software design pattern is a general reusable solution to a commonly occurring problem within a given context in software design. A design pattern is not a finished or completed design. It is actually a description or template for solution to a problem.
 Design patterns are of many types, such as:
 Algorithm strategy patterns Computational design patterns Execution patterns Implementation strategy patterns Structural design patterns  Read more about design patterns here&amp;hellip;</description>
    </item>
    
    <item>
      <title>[SOLVED] Missing verify.dll</title>
      <link>https://dhanoopbhaskar.github.io/blog/2013-08-29-solved-missing-verify-dll/</link>
      <pubDate>Thu, 29 Aug 2013 23:58:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2013-08-29-solved-missing-verify-dll/</guid>
      <description>Error: The program can&amp;rsquo;t start because verify.dll is missing from your computer. Try reinstalling the program to fix this problem.
This error also occurred when I tried to run a program using Java Virtual Machine Launcher.
The permanent solution to this error is adding the path JDK_HOME\jre\bin (e.g. C:\Java\jdk1.7.0\jre\bin; - in my case) to the System Environment Variable - PATH</description>
    </item>
    
    <item>
      <title>[SOLVED] Could not open jvm.cfg</title>
      <link>https://dhanoopbhaskar.github.io/blog/2013-08-29-solved-could-not-open-jvm-cfg/</link>
      <pubDate>Thu, 29 Aug 2013 23:49:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2013-08-29-solved-could-not-open-jvm-cfg/</guid>
      <description>Error: could not open &amp;lsquo;C:\Java\jre7\lib\i386\jvm.cfg&amp;rsquo; This error occurred when I tried to run a program using Java Virtual Machine Launcher.
Solution: As a temporary fix what I did was searching for the file jvm.cfg (which was found somewhere under JDK_HOME) and made the file available in the path mentioned in the error message.
The following is the content of the file jvm.cfg
-client KNOWN -server KNOWN -hotspot ALIASED_TO -client -classic WARN -native ERROR -green ERROR  The permanent solution to this error is adding the path JDK_HOME\jre\bin (e.</description>
    </item>
    
    <item>
      <title>Java - Avoid multiple occurrence of some character in a String</title>
      <link>https://dhanoopbhaskar.github.io/blog/2013-08-29-java-avoid-multiple-occurrence-of-some-character-in-a-string/</link>
      <pubDate>Thu, 29 Aug 2013 23:34:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2013-08-29-java-avoid-multiple-occurrence-of-some-character-in-a-string/</guid>
      <description>The following is a Java method/function which avoids multiple occurrence (in a row) of some character in an input String. The parameters to the method (i.e., inputs) to the method/function include:
 input - The parent String under consideration character - The character of which multiple occurrence (in a row) should be avoided.  public static String avoidMultipleOccurrence(String input, char character) { if (input == null) { return null; } if (input.</description>
    </item>
    
    <item>
      <title>Another Milestone</title>
      <link>https://dhanoopbhaskar.github.io/blog/2013-08-20-another-milestone/</link>
      <pubDate>Tue, 20 Aug 2013 00:54:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2013-08-20-another-milestone/</guid>
      <description>Within the time period from Aug 19, 2013 12:30 AM IST to Aug 19, 2013 11:30 PM IST, the blog had 1K+ hits :) Out of which 900+ were from United States!!!
 
From today, the 20th of August 2013, onwards the blog will be available under another domain - https://theinsanetechie.in</description>
    </item>
    
    <item>
      <title>Independence Day Wishes</title>
      <link>https://dhanoopbhaskar.github.io/blog/2013-08-15-independence-day-wishes/</link>
      <pubDate>Thu, 15 Aug 2013 00:10:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2013-08-15-independence-day-wishes/</guid>
      <description>വന്ദേ മാതരം!
സുജലാം സുഫലാം, മലയജ ശീതളാം,
സസ്യ ശ്യാമളാം, മാതരം!
ശുഭ്രജ്യോത്സ്ന പുളകിതയാമിണിം,
ഫുല്ലകുസുമിത ദ്രുമതല ശോഭിണിം,
സുഹാസിനിം, സുമദുര ഭാഷിണിം ,
സുഖദാം, വരദാം ,മാതരം!
സപ്തകോടികാന്ത കള കള നിനാദ കരാളെ
ദ്വിസപ്തകോടി ഭുജൈര്‍ ധൃത-ഖാര കരവലെ
അബല കേണ മാ ഇതാ ബലെ
ബഹുബല ധരിണിം, നമാമി തരിണിം,
രിപുതളവാരിണിം മാതരം !
തുമി വിദ്യ, തുമി ധര്‍മ്മ,
തുമി ഹൃദി , തുമി മര്‍മ്മ ,
ത്വം ഹി പ്രാണ ശാരിരെ!
ബാഹുതെ തുമി മാ ശക്തി ,
ഹൃദയേ തുമി മാ ഭക്തി,
തോമര്യ പ്രതിമ ഗാരി മന്ദിരേ മന്ദിരേ!</description>
    </item>
    
    <item>
      <title>Java - Encryption and Decryption of an Image Using Blowfish Algorithm</title>
      <link>https://dhanoopbhaskar.github.io/blog/2013-08-11-java-encryption-and-decryption-of-an-image-using-blowfish-algorithm/</link>
      <pubDate>Sun, 11 Aug 2013 19:16:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2013-08-11-java-encryption-and-decryption-of-an-image-using-blowfish-algorithm/</guid>
      <description>EncryptFile.java
package com.java.blowfish; import java.io.File; import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.FileOutputStream; import java.io.IOException; import java.io.InputStream; import java.io.OutputStream; import java.security.InvalidKeyException; import java.security.NoSuchAlgorithmException; import javax.crypto.BadPaddingException; import javax.crypto.Cipher; import javax.crypto.IllegalBlockSizeException; import javax.crypto.KeyGenerator; import javax.crypto.NoSuchPaddingException; import javax.crypto.SecretKey; /** * * @author dhanoopbhaskar */ public class EncryptFile { KeyGenerator keyGenerator = null; SecretKey secretKey = null; Cipher cipher = null; public EncryptFile() { try { /** * Create a Blowfish key */ keyGenerator = KeyGenerator.getInstance(&amp;#34;Blowfish&amp;#34;); secretKey = keyGenerator.</description>
    </item>
    
    <item>
      <title>Java - Blowfish Encryption Algorithm</title>
      <link>https://dhanoopbhaskar.github.io/blog/2013-08-11-java-blowfish-encryption-algorithm/</link>
      <pubDate>Sun, 11 Aug 2013 16:08:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2013-08-11-java-blowfish-encryption-algorithm/</guid>
      <description>BlowfishAlgorithm.java
package com.java.blowfish; import com.sun.org.apache.xml.internal.security.exceptions.Base64DecodingException; import com.sun.org.apache.xml.internal.security.utils.Base64; import java.security.InvalidKeyException; import java.security.NoSuchAlgorithmException; import javax.crypto.BadPaddingException; import javax.crypto.Cipher; import javax.crypto.IllegalBlockSizeException; import javax.crypto.KeyGenerator; import javax.crypto.NoSuchPaddingException; import javax.crypto.SecretKey; /** * * @author dhanoopbhaskar */ public class BlowfishAlgorithm { KeyGenerator keyGenerator = null; SecretKey secretKey = null; Cipher cipher = null; public BlowfishAlgorithm() { try { /** * Create a Blowfish key */ keyGenerator = KeyGenerator.getInstance(&amp;#34;Blowfish&amp;#34;); secretKey = keyGenerator.generateKey(); /** * Create an instance of cipher mentioning the name of algorithm * - Blowfish */ cipher = Cipher.</description>
    </item>
    
    <item>
      <title>Java - Advanced Encryption Standard (AES) Algorithm</title>
      <link>https://dhanoopbhaskar.github.io/blog/2013-08-11-java-advanced-encryption-standard-aes-algorithm/</link>
      <pubDate>Sun, 11 Aug 2013 15:23:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2013-08-11-java-advanced-encryption-standard-aes-algorithm/</guid>
      <description>AESAlgorithm.java
package com.java.aes; import com.sun.org.apache.xml.internal.security.exceptions.Base64DecodingException; import com.sun.org.apache.xml.internal.security.utils.Base64; import java.security.InvalidKeyException; import java.security.NoSuchAlgorithmException; import javax.crypto.BadPaddingException; import javax.crypto.Cipher; import javax.crypto.IllegalBlockSizeException; import javax.crypto.KeyGenerator; import javax.crypto.NoSuchPaddingException; import javax.crypto.SecretKey; /** * * @author dhanoopbhaskar */ public class AESAlgorithm { KeyGenerator keyGenerator = null; SecretKey secretKey = null; Cipher cipher = null; public AESAlgorithm() { try { /** * Create a AES key */ keyGenerator = KeyGenerator.getInstance(&amp;#34;AES&amp;#34;); secretKey = keyGenerator.generateKey(); /** * Create an instance of cipher providing the following info * separated by slash.</description>
    </item>
    
    <item>
      <title>Java - JButton in a JTable cell</title>
      <link>https://dhanoopbhaskar.github.io/blog/2013-08-03-java-jbutton-in-a-jtable-cell/</link>
      <pubDate>Sat, 03 Aug 2013 17:04:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2013-08-03-java-jbutton-in-a-jtable-cell/</guid>
      <description>Now we shall discuss how to include a JButton in a table cell.
ButtonJTable.java
/* * ButtonJTable.java * * Created on Aug 3, 2013, 02:57:58 PM */ package me.dhanoop.forblog; import java.awt.Component; import java.awt.event.ActionEvent; import java.awt.event.ActionListener; import javax.swing.JButton; import javax.swing.JCheckBox; import javax.swing.JFrame; import javax.swing.JOptionPane; import javax.swing.JTable; import javax.swing.UIManager; import javax.swing.table.DefaultTableModel; import javax.swing.table.TableCellRenderer; /** * * @author dhanoopbhaskar */ public class ButtonJTable extends javax.swing.JFrame { private JButton tableData = null; /** Creates new form ButtonJTable */ public ButtonJTable() { initComponents(); customizeTable(); } /** This method is called from within the constructor to * initialize the form.</description>
    </item>
    
    <item>
      <title>Java - JCheckBox in a JTable cell</title>
      <link>https://dhanoopbhaskar.github.io/blog/2013-08-03-java-jcheckbox-in-a-jtable-cell/</link>
      <pubDate>Sat, 03 Aug 2013 14:56:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2013-08-03-java-jcheckbox-in-a-jtable-cell/</guid>
      <description>Now we shall discuss how to include a JCheckBox in a table cell.
CheckBoxJFrame.java
/** * CheckBoxJFrame.java * * Created on Aug 2, 2013, 11:57:36 PM */ package me.dhanoop.forblog; import java.awt.Component; import java.awt.event.ItemEvent; import java.awt.event.ItemListener; import javax.swing.DefaultCellEditor; import javax.swing.JCheckBox; import javax.swing.JFrame; import javax.swing.JOptionPane; import javax.swing.JTable; import javax.swing.table.DefaultTableModel; import javax.swing.table.TableCellRenderer; /** * * @author dhanoopbhaskar */ public class CheckBoxJFrame extends javax.swing.JFrame { private JCheckBox tableData = null; /** Creates new form CheckBoxJFrame */ public CheckBoxJFrame() { initComponents(); customizeTable(); } /** This method is called from within the constructor to * initialize the form.</description>
    </item>
    
    <item>
      <title>Java - JComboBox in a JTable cell (with event handling)</title>
      <link>https://dhanoopbhaskar.github.io/blog/2013-08-03-java-jcombobox-in-a-jtable-cell-with-event-handling/</link>
      <pubDate>Sat, 03 Aug 2013 14:04:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2013-08-03-java-jcombobox-in-a-jtable-cell-with-event-handling/</guid>
      <description>Please refer to the previous post here&amp;hellip;
The function customizeTable() has been modified in order to include event handling functionality in the combo box.
private void customizeTable() { Object[] columnNames = new Object[1]; columnNames[0] = &amp;#34;ComboBox&amp;#34;; Object[][] rowData = new Object[1][1]; rowData[0][0] = &amp;#34;select gender&amp;#34;; DefaultTableModel tableModel = new DBTableModel(rowData, columnNames); dbTable.setModel(tableModel); String[] gender = {&amp;#34;Male&amp;#34;, &amp;#34;Female&amp;#34;}; tableData = new JComboBox(gender); tableData.addActionListener(new ActionListener() { public void actionPerformed(ActionEvent e) { String item = (String) tableData.</description>
    </item>
    
    <item>
      <title>Java - JComboBox in a JTable cell</title>
      <link>https://dhanoopbhaskar.github.io/blog/2013-08-03-java-jcombobox-in-a-jtable-cell/</link>
      <pubDate>Sat, 03 Aug 2013 00:47:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2013-08-03-java-jcombobox-in-a-jtable-cell/</guid>
      <description>MainJFrame.java
/** * MainJFrame.java * * Created on Aug 2, 2013, 11:57:36 PM */ package me.dhanoop.forblog; import javax.swing.DefaultCellEditor; import javax.swing.JComboBox; import javax.swing.table.DefaultTableModel; import javax.swing.table.TableCellEditor; /** * * @author dhanoopbhaskar */ public class MainJFrame extends javax.swing.JFrame { /** Creates new form MainJFrame */ public MainJFrame() { initComponents(); customizeTable(); } /** This method is called from within the constructor to * initialize the form. * WARNING: Do NOT modify this code. The content of this method is * always regenerated by the Form Editor.</description>
    </item>
    
    <item>
      <title>Talend - Out of Memory Error and Java Heap Space Error</title>
      <link>https://dhanoopbhaskar.github.io/blog/2013-07-21-talend-out-of-memory-error-and-java-heap-space-error/</link>
      <pubDate>Sun, 21 Jul 2013 20:48:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2013-07-21-talend-out-of-memory-error-and-java-heap-space-error/</guid>
      <description>The Out of Memory Error and Java Heap Space Error are two of the common errors which occur in the Talend jobs handling a large volume of data. These errors can be avoided to an extent by following some design guidelines.
 Keep in mind that tMap is a heavy component. Minimize its use in your jobs.   Avoid tMap if you need just simple transformations like trimming the string values, replacing null numbers by zeroes, etc.</description>
    </item>
    
    <item>
      <title>Google&#39;s Project Loon: Balloon-powered Internet access</title>
      <link>https://dhanoopbhaskar.github.io/blog/2013-06-16-googles-project-loon-balloon-powered-internet-access/</link>
      <pubDate>Sun, 16 Jun 2013 20:43:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2013-06-16-googles-project-loon-balloon-powered-internet-access/</guid>
      <description>The Google is introducing its new project named Project Loon to overcome the terrestrial challenges to Internet connectivity such as jungles, archipelagos, mountains, etc.
It is nothing but balloon-powered Internet access. A ring of balloons, flying around the globe on the stratospheric winds, provides Internet access to the earth below. These balloons are carried by the wind at altitudes twice as high as commercial planes and they beam Internet access to the ground at speeds similar to today’s 3G networks or faster.</description>
    </item>
    
    <item>
      <title>Talend Equivalent for Index Function in Datastage</title>
      <link>https://dhanoopbhaskar.github.io/blog/2013-06-16-talend-equivalent-for-index-function-in-datastage/</link>
      <pubDate>Sun, 16 Jun 2013 14:38:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2013-06-16-talend-equivalent-for-index-function-in-datastage/</guid>
      <description>package routines; public class UserString { public static int Index(String string, String substring, Integer instance) { int index = -1; if (string == null) { return 0; } if (substring == null) { return 0; } if (substring.equals(&amp;#34;&amp;#34;)) { return 1; } if (instance == null) { throw new UnsupportedOperationException(&amp;#34;Instance is supposed to be NOT NULL!!&amp;#34;); } if (!string.contains(substring)) { return 0; } index = string.indexOf(substring, 0); while (--instance &amp;gt; 0 &amp;amp;&amp;amp; index !</description>
    </item>
    
    <item>
      <title>Talend Equivalent for TRIM Function in Datastage</title>
      <link>https://dhanoopbhaskar.github.io/blog/2013-06-16-talend-equivalent-for-trim-function-in-datastage/</link>
      <pubDate>Sun, 16 Jun 2013 14:30:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2013-06-16-talend-equivalent-for-trim-function-in-datastage/</guid>
      <description>package routines; public class UserString { /** * * L Removes leading occurrences of character. * T Removes trailing occurrences of character. * B Removes leading and trailing occurrences of character. * R Removes leading and trailing occurrences of character, and reduces multiple occurrences to a single occurrence. * A Removes all occurrences of character. * F Removes leading spaces and tabs * E Removes trailing spaces and tabs * D Removes leading and trailing spaces and tabs, and reduces multiple spaces and tabs to single ones.</description>
    </item>
    
    <item>
      <title>Talend Equivalent for MatchField Function in Datastage</title>
      <link>https://dhanoopbhaskar.github.io/blog/2013-06-16-talend-equivalent-for-matchfield-function-in-datastage/</link>
      <pubDate>Sun, 16 Jun 2013 13:59:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2013-06-16-talend-equivalent-for-matchfield-function-in-datastage/</guid>
      <description>package routines; import java.util.regex.*; public class UserString { public static String MatchField(String sourceStr, String patternStr, Integer fieldNo) { String matchedStr = &amp;#34;&amp;#34;; if (fieldNo == null) { throw new UnsupportedOperationException(&amp;#34;fieldNo is supposed to be NOT NULL!!&amp;#34;); } if (patternStr == null) { return &amp;#34;&amp;#34;; } if (sourceStr == null) { return &amp;#34;&amp;#34;; } patternStr = formatPatternDStoTld(patternStr); Pattern pattern = Pattern.compile(patternStr); Matcher matcher = pattern.matcher(sourceStr); if (matcher.find()) { matchedStr = matcher.group(fieldNo); } else { matchedStr = &amp;#34;&amp;#34;; } return matchedStr; } public static String formatPatternDStoTld(String input) { StringBuilder output = new StringBuilder(); String outputStr = &amp;#34;&amp;#34;; for (int i = 0; i &amp;lt; input.</description>
    </item>
    
    <item>
      <title>Exporting Google Contacts to a Nokia Phone</title>
      <link>https://dhanoopbhaskar.github.io/blog/2013-02-26-exporting-google-contacts-to-a-nokia-phone/</link>
      <pubDate>Tue, 26 Feb 2013 01:14:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2013-02-26-exporting-google-contacts-to-a-nokia-phone/</guid>
      <description>You can export the Google Contacts to a Nokia phone very easily now!!
Download the low sized application (only 5.7KB) dbVcfSplitter.jar from the sourceforge&amp;hellip;
Follow the below instructions-
  Export the Google contacts in vCard format (with .vcf extension).
  Open a command prompt or terminal.
  &amp;ldquo;cd&amp;rdquo; to the folder or directory where the vCard file resides.
  Type in the command below-
 java -jar dbVcfSplitter.</description>
    </item>
    
    <item>
      <title>A command line SMTP GMailing tool in Java.</title>
      <link>https://dhanoopbhaskar.github.io/blog/2013-01-12-a-command-line-smtp-gmailing-tool-in-java/</link>
      <pubDate>Sat, 12 Jan 2013 01:51:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2013-01-12-a-command-line-smtp-gmailing-tool-in-java/</guid>
      <description>Launched my new project in sourceforge. It is simply a command line SMTP GMailing tool.
I googled a lot in pursuit of Linux/Unix like utilities for my windows machine. Could find some of them (Shared them in my previous post).
Successfully installed and executed some of them :) Came across blat - A Windows (32 &amp;amp; 64 bit) command line SMTP mailer. Installed in my system. Executed - but could not connect to smtp.</description>
    </item>
    
    <item>
      <title>Using Linux Utilities Under Windows</title>
      <link>https://dhanoopbhaskar.github.io/blog/2013-01-05-using-linux-utilities-under-windows/</link>
      <pubDate>Sat, 05 Jan 2013 16:27:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2013-01-05-using-linux-utilities-under-windows/</guid>
      <description>There are many utilities in Linux/Unix which are very useful in our life say for example sed, awk, grep, etc. Some of us might have wished Windows/DOS environment to have similar kind of utilities. Anyway I did. Today I came across some of the open source projects, while googling, which provide some of the utilities in Windows too and thought of sharing :)
The projects are GnuWin and UnxUtils.
Please find below the links to their sourceforge pages GnuWin UnxUtils  </description>
    </item>
    
    <item>
      <title>Talend equivalent for OCONV function in Datastage (Only for time and date)</title>
      <link>https://dhanoopbhaskar.github.io/blog/2012-10-20-talend-equivalent-for-oconv-function-in-datastage-only-for-time-and-date/</link>
      <pubDate>Sat, 20 Oct 2012 15:30:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2012-10-20-talend-equivalent-for-oconv-function-in-datastage-only-for-time-and-date/</guid>
      <description>The function has been developed as a routine in the Talend.
package routines; import java.text.ParseException; public class DateConv { public static String oConv(int secToAdd, String format) throws ParseException { final String date = &amp;#34;31/12/1967&amp;#34;;// 31 Dec 1967  java.util.Date returnDate = null; String returnString = null; java.text.DateFormat sdf = new java.text.SimpleDateFormat(&amp;#34;dd/MM/yyyy&amp;#34;); java.util.Date parsedDate = sdf.parse(date); java.util.Calendar now = java.util.Calendar.getInstance(); now.setTime(parsedDate); if (format.equals(&amp;#34;MT&amp;#34;)) { // 02:46  sdf = new java.text.SimpleDateFormat(&amp;#34;HH:mm&amp;#34;); now.</description>
    </item>
    
    <item>
      <title>Java - removing leading zeroes from a string</title>
      <link>https://dhanoopbhaskar.github.io/blog/2012-10-06-java-removing-leading-zeroes-from-a-string/</link>
      <pubDate>Sat, 06 Oct 2012 00:31:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2012-10-06-java-removing-leading-zeroes-from-a-string/</guid>
      <description>Using Regular Expressions (regex)
String str = &amp;quot;00938&amp;quot;; System.out.println(&amp;quot;*&amp;quot; + str.replaceFirst(&amp;quot;^0+&amp;quot;, &amp;quot;&amp;quot;) + &amp;quot;*&amp;quot;);	//*938*  Suppose the string contains only zeroes, then the output will be a null string.
String str = &amp;quot;0000000&amp;quot;; System.out.println(&amp;quot;*&amp;quot; + str.replaceFirst(&amp;quot;^0+&amp;quot;, &amp;quot;&amp;quot;) + &amp;quot;*&amp;quot;); //**  If you want a zero to remain in the above case use another form -
String str = &amp;quot;0000000&amp;quot;; System.out.println(&amp;quot;*&amp;quot; + str.replaceFirst(&amp;quot;^0+(?!$)&amp;quot;, &amp;quot;&amp;quot;) + &amp;quot;*&amp;quot;); //*0*  The negative lookahead (?</description>
    </item>
    
    <item>
      <title>Microsoft Magic</title>
      <link>https://dhanoopbhaskar.github.io/blog/2011-10-18-microsoft-magic/</link>
      <pubDate>Tue, 18 Oct 2011 17:33:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2011-10-18-microsoft-magic/</guid>
      <description>MAGIC #1
An Indian discovered that nobody can create a FOLDER anywhere on the computer which can be named as &amp;ldquo;CON&amp;rdquo;. This is something pretty cool… and unbelievable… At Microsoft the whole Team, couldn&amp;rsquo;t answer why this happened!
TRY IT NOW, IT WILL NOT CREATE &amp;ldquo;CON&amp;rdquo; FOLDER
MAGIC #2
For those of you using Windows, do the following:
 Open an empty notepad file Type &amp;ldquo;Bush hid the facts&amp;rdquo; (without the quotes) Save it as whatever you want.</description>
    </item>
    
    <item>
      <title>One Of The Best Arguments, I Have Ever Read !!!</title>
      <link>https://dhanoopbhaskar.github.io/blog/2011-10-09-one-of-the-best-arguments-i-have-ever-read/</link>
      <pubDate>Sun, 09 Oct 2011 23:46:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2011-10-09-one-of-the-best-arguments-i-have-ever-read/</guid>
      <description>One Of The Best Arguments.!! I have ever read. Don’t miss even a single word… It’s Too good
An atheist professor of philosophy speaks to his class on the problem science has with God, The Almighty.
He asks one of his new students to stand and…..
Prof: So you believe in God?
Student: Absolutely, sir.
Prof: Is God good?
Student: Sure.
Prof: Is God all-powerful?
Student: Yes..
Prof: My brother died of cancer even though he prayed to God to heal him.</description>
    </item>
    
    <item>
      <title>Dr. A.P.J Abdul Kalam&#39;s Speech: A Must Read</title>
      <link>https://dhanoopbhaskar.github.io/blog/2011-10-09-dr-a-p-j-abdul-kalams-speech-a-must-read/</link>
      <pubDate>Sun, 09 Oct 2011 20:55:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2011-10-09-dr-a-p-j-abdul-kalams-speech-a-must-read/</guid>
      <description>I have three visions for India. In 3000 years of our history people from all over the world have come and invaded us, captured our lands, conquered our minds. From Alexander onwards. The Greeks, the Turks, the Moguls, the Portuguese, the British, the French, the Dutch, all of them came and looted us, took over what was ours. Yet we have not done this to any other nation. We have not conquered anyone.</description>
    </item>
    
    <item>
      <title>Creating a PDF file in Java</title>
      <link>https://dhanoopbhaskar.github.io/blog/2011-10-07-creating-a-pdf-file-in-java/</link>
      <pubDate>Fri, 07 Oct 2011 20:11:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2011-10-07-creating-a-pdf-file-in-java/</guid>
      <description>jPDFCreator.java
import com.itextpdf.text.BaseColor; import com.itextpdf.text.Chapter; import com.itextpdf.text.Document; import com.itextpdf.text.DocumentException; import com.itextpdf.text.Font; import com.itextpdf.text.FontFactory; import com.itextpdf.text.List; import com.itextpdf.text.ListItem; import com.itextpdf.text.PageSize; import com.itextpdf.text.Paragraph; import com.itextpdf.text.Section; import com.itextpdf.text.pdf.PdfWriter; import java.io.FileNotFoundException; import java.io.FileOutputStream; /** * * @author dhanoopbhaskar */ public class jPDFCreator { Document document = null; PdfWriter pdfWriter = null; public jPDFCreator() { /** * Creating an instance of com.itextpdf.text.Document * The arguments * -page size * -left margin * -right margin * -top margin * -bottom margin */ document = new Document(PageSize.</description>
    </item>
    
    <item>
      <title>HTTP POST in Java using URLConnection</title>
      <link>https://dhanoopbhaskar.github.io/blog/2011-10-04-http-post-in-java-using-urlconnection/</link>
      <pubDate>Tue, 04 Oct 2011 16:53:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2011-10-04-http-post-in-java-using-urlconnection/</guid>
      <description>URLPost.java
import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.OutputStreamWriter; import java.io.UnsupportedEncodingException; import java.net.MalformedURLException; import java.net.URL; import java.net.URLConnection; import java.net.URLEncoder; /** * * @author dhanoopbhaskar */ public class URLPost { public URLPost() { } /** * @param args the command line arguments */ public static void main(String[] args) { try { /** * Constructing the data to be sent. * The data is encoded in UTF8 encoding scheme. * For that encode() method in the class java.</description>
    </item>
    
    <item>
      <title>Java - GTalk Client using SMACK XMPP API</title>
      <link>https://dhanoopbhaskar.github.io/blog/2011-09-22-java-gtalk-client-using-smack-xmpp-api/</link>
      <pubDate>Thu, 22 Sep 2011 14:17:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2011-09-22-java-gtalk-client-using-smack-xmpp-api/</guid>
      <description>GtalkClient.java
import java.io.BufferedReader; import java.io.IOException; import java.io.InputStreamReader; import java.util.Collection; import java.util.Iterator; import org.jivesoftware.smack.Chat; import org.jivesoftware.smack.ConnectionConfiguration; import org.jivesoftware.smack.MessageListener; import org.jivesoftware.smack.Roster; import org.jivesoftware.smack.RosterEntry; import org.jivesoftware.smack.XMPPConnection; import org.jivesoftware.smack.XMPPException; import org.jivesoftware.smack.packet.Message; /** * * @author dhanoopbhaskar */ public class GtalkClient implements Runnable, MessageListener { ConnectionConfiguration connConfig = null; XMPPConnection xMPPConnection = null; BufferedReader readFromKeyboard = null; String toAddresss = null; String[] buddies = null; int buddySize = 0; public GtalkClient() { /** * Set the &amp;#39;ConnectionConfiguration&amp;#39; with * -host name * -port number * -service name */ connConfig = new ConnectionConfiguration(&amp;#34;talk.</description>
    </item>
    
    <item>
      <title>Python - First Step Towards Programming</title>
      <link>https://dhanoopbhaskar.github.io/blog/2011-09-20-python-first-step-towards-programming/</link>
      <pubDate>Tue, 20 Sep 2011 18:47:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2011-09-20-python-first-step-towards-programming/</guid>
      <description>Let&amp;rsquo;s start with an example program to find Fibonacci series
&amp;gt;&amp;gt;&amp;gt; # Fibonacci series: ... # the sum of two elements defines the next ... a, b = 0, 1 &amp;gt;&amp;gt;&amp;gt; while b &amp;lt; 10: ... print(b) ... a, b = b, a+b ... 1 1 2 3 5 8  This example introduces several new features.
  The first line contains a multiple assignment: the variables a and b simultaneously get the new values 0 and 1.</description>
    </item>
    
    <item>
      <title>Python - Strings</title>
      <link>https://dhanoopbhaskar.github.io/blog/2011-09-20-python-strings/</link>
      <pubDate>Tue, 20 Sep 2011 17:53:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2011-09-20-python-strings/</guid>
      <description>Besides numbers, Python can also manipulate strings, which can be expressed in several ways. They can be enclosed in single quotes or double quotes:
&amp;gt;&amp;gt;&amp;gt; &amp;#39;spam eggs&amp;#39; &amp;#39;spam eggs&amp;#39; &amp;gt;&amp;gt;&amp;gt; &amp;#39;doesn\&amp;#39;t&amp;#39; &amp;#34;doesn&amp;#39;t&amp;#34; &amp;gt;&amp;gt;&amp;gt; &amp;#34;doesn&amp;#39;t&amp;#34; &amp;#34;doesn&amp;#39;t&amp;#34; &amp;gt;&amp;gt;&amp;gt; &amp;#39;&amp;#34;Yes,&amp;#34; he said.&amp;#39; &amp;#39;&amp;#34;Yes,&amp;#34; he said.&amp;#39; &amp;gt;&amp;gt;&amp;gt; &amp;#34;\&amp;#34;Yes,\&amp;#34;he said.&amp;#34; &amp;#39;&amp;#34;Yes,&amp;#34; he said.&amp;#39; &amp;gt;&amp;gt;&amp;gt; &amp;#39;&amp;#34;Isn\&amp;#39;t,&amp;#34; she said.&amp;#39; &amp;#39;&amp;#34;Isn\&amp;#39;t,&amp;#34; she said.&amp;#39; The interpreter prints the result of string operations in the same way as they are typed for input: inside quotes, and with quotes and other funny characters escaped by backslashes, to show the precise value.</description>
    </item>
    
    <item>
      <title>Java - RSA Algorithm</title>
      <link>https://dhanoopbhaskar.github.io/blog/2011-09-20-java-rsa-algorithm/</link>
      <pubDate>Tue, 20 Sep 2011 16:13:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2011-09-20-java-rsa-algorithm/</guid>
      <description>RSA stands for Rivest, Shamir and Adleman who first publicly described it.
 RSAAlgorithm.java
import java.security.InvalidKeyException; import java.security.KeyPair; import java.security.KeyPairGenerator; import java.security.NoSuchAlgorithmException; import java.security.PrivateKey; import java.security.PublicKey; import javax.crypto.BadPaddingException; import javax.crypto.Cipher; import javax.crypto.IllegalBlockSizeException; import javax.crypto.NoSuchPaddingException; /** * * @author dhanoopbhaskar */ public class RSAAlgorithm { private KeyPairGenerator keyPairGenerator = null; private PrivateKey privateKey = null; private PublicKey publicKey = null; Cipher cipher = null; public RSAAlgorithm() { try { /** * Create RSA key pairs * - private key * - public key */ keyPairGenerator = KeyPairGenerator.</description>
    </item>
    
    <item>
      <title>Java - Data Encryption Standard (DES) Algorithm</title>
      <link>https://dhanoopbhaskar.github.io/blog/2011-09-20-java-data-encryption-standard-des-algorithm/</link>
      <pubDate>Tue, 20 Sep 2011 14:27:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2011-09-20-java-data-encryption-standard-des-algorithm/</guid>
      <description>DESAlgorithm.java
import java.security.InvalidKeyException; import java.security.NoSuchAlgorithmException; import javax.crypto.BadPaddingException; import javax.crypto.Cipher; import javax.crypto.IllegalBlockSizeException; import javax.crypto.KeyGenerator; import javax.crypto.NoSuchPaddingException; import javax.crypto.SecretKey; /** * * @author dhanoopbhaskar */ public class DESAlgorithm { KeyGenerator keyGenerator = null; SecretKey secretKey = null; Cipher cipher = null; public DESAlgorithm() { try { /** * Create a DES key */ keyGenerator = KeyGenerator.getInstance(&amp;#34;DES&amp;#34;); secretKey = keyGenerator.generateKey(); /** * Create an instance of cipher providing the following info * separated by slash.</description>
    </item>
    
    <item>
      <title>Python - An Introduction</title>
      <link>https://dhanoopbhaskar.github.io/blog/2011-09-19-python-an-introduction/</link>
      <pubDate>Mon, 19 Sep 2011 16:31:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2011-09-19-python-an-introduction/</guid>
      <description>In Python, input and output are distinguished by the presence or absence of prompts (&amp;gt;&amp;gt;&amp;gt; and ...). You must type everything after the prompt, when the prompt appears; lines that do not begin with a prompt are output from the interpreter. The comments in Python starts with an hash(#) character and ends when the physical line ends.
# this is the first comment SPAM = 1 # and this is the second comment # .</description>
    </item>
    
    <item>
      <title>Using the Python Interpreter</title>
      <link>https://dhanoopbhaskar.github.io/blog/2011-09-19-using-the-python-interpreter/</link>
      <pubDate>Mon, 19 Sep 2011 15:57:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2011-09-19-using-the-python-interpreter/</guid>
      <description>Invoking the Interpreter
The Python interpreter is usually installed as /usr/local/bin/python3.2 on those machines where it is available; putting /usr/local/bin in your Unix shell’s search path makes it possible to start it by typing the command
python3.2  to the shell. Since the choice of the directory where the interpreter lives is an installation option, other places are possible; check with your local Python guru or system administrator. (E.g., /usr/local/python is a popular alternative location.</description>
    </item>
    
    <item>
      <title>Python Programming Language</title>
      <link>https://dhanoopbhaskar.github.io/blog/2011-09-19-python-programming-language/</link>
      <pubDate>Mon, 19 Sep 2011 15:48:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2011-09-19-python-programming-language/</guid>
      <description>Python is a programming language that lets you work more quickly and integrate your systems more effectively.
 Python runs on Windows, Linux/Unix, Mac OS X, and has been ported to the Java and .NET virtual machines. Python is free to use, even for commercial products, because of its OSI-approved open source license.  Download Python from here &amp;hellip;</description>
    </item>
    
    <item>
      <title>Ruby - Objects</title>
      <link>https://dhanoopbhaskar.github.io/blog/2011-09-16-ruby-objects/</link>
      <pubDate>Fri, 16 Sep 2011 19:28:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2011-09-16-ruby-objects/</guid>
      <description>Creating an object
irb(main):012:0&amp;gt; g = Greeter.new(&amp;quot;Ruby&amp;quot;) =&amp;gt; #&amp;lt;Greeter:0x16cac @name=&amp;quot;Ruby&amp;quot;&amp;gt; irb(main):013:0&amp;gt; g.say_hi Hi Ruby! =&amp;gt; nil irb(main):014:0&amp;gt; g.say_bye Bye Ruby, come back soon =&amp;gt; nil  Once the object g is created, it remembers that the name is Ruby. Hmm, what if we want to get at the name directly?
irb(main):015:0&amp;gt; g.@name SyntaxError: compile error (irb):52: syntax error from (irb):52  Nope, can’t do it.</description>
    </item>
    
    <item>
      <title>Ruby - Classes</title>
      <link>https://dhanoopbhaskar.github.io/blog/2011-09-16-ruby-classes/</link>
      <pubDate>Fri, 16 Sep 2011 19:13:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2011-09-16-ruby-classes/</guid>
      <description>Defining a class
irb(main):001:0&amp;gt; class Greeter irb(main):002:1&amp;gt; def initialize(name = &amp;quot;World&amp;quot;) irb(main):003:2&amp;gt; @name = name irb(main):004:2&amp;gt; end irb(main):005:1&amp;gt; def say_hi irb(main):006:2&amp;gt; puts &amp;quot;Hi #{@name}!&amp;quot; irb(main):007:2&amp;gt; end irb(main):008:1&amp;gt; def say_bye irb(main):009:2&amp;gt; puts &amp;quot;Bye #{@name}, come back soon&amp;quot; irb(main):010:2&amp;gt; end irb(main):011:1&amp;gt; end =&amp;gt; nil  The new keyword here is class. This defines a new class called Greeter and a bunch of methods for that class. Also notice @name. This is an instance variable, and is available to all the methods of the class.</description>
    </item>
    
    <item>
      <title>Ruby- Defining a method</title>
      <link>https://dhanoopbhaskar.github.io/blog/2011-09-16-ruby-defining-a-method/</link>
      <pubDate>Fri, 16 Sep 2011 18:44:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2011-09-16-ruby-defining-a-method/</guid>
      <description>Let&amp;rsquo;s start with an example
irb(main):001:0&amp;gt; def h irb(main):002:1&amp;gt; puts &amp;quot;Ruby Language&amp;quot; irb(main):003:1&amp;gt; end =&amp;gt; nil  The definition of the method starts with keyword def and an identifier to the method (i.e., h). Next comes the actual body of the method and the keyword end as the delimiter.
Running a method
irb(main):004:0&amp;gt; h Ruby Language =&amp;gt; nil irb(main):005:0&amp;gt; h() Ruby Language =&amp;gt; nil  Calling a method in Ruby is as easy as just mentioning its name to Ruby.</description>
    </item>
    
    <item>
      <title>Starting with Ruby!!</title>
      <link>https://dhanoopbhaskar.github.io/blog/2011-09-16-starting-with-ruby/</link>
      <pubDate>Fri, 16 Sep 2011 13:57:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2011-09-16-starting-with-ruby/</guid>
      <description>Interactive Ruby
Ruby comes with a program that will show the results of any Ruby statements you feed it.
Playing with Ruby code in interactive sessions like this is a terrific way to learn the
language.
To print something to the interactive ruby terminal (IRB)
Just type in something enclosed within double quotes and click enter key.
For example type: &amp;ldquo;Ruby Language&amp;rdquo;
irb(main):001:0&amp;gt; &amp;quot;Ruby Language&amp;quot; =&amp;gt; &amp;quot;Ruby Language&amp;quot;  Actually the second line is just IRB’s way of telling us the result of the last expression it evaluated.</description>
    </item>
    
    <item>
      <title>About Ruby Programming Language</title>
      <link>https://dhanoopbhaskar.github.io/blog/2011-09-16-about-ruby-programming-language/</link>
      <pubDate>Fri, 16 Sep 2011 13:43:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2011-09-16-about-ruby-programming-language/</guid>
      <description>Wondering why Ruby is so popular? Its fans call it a beautiful, artful language. And yet, they say it’s handy and practical. What gives?
The Ideals of Ruby’s Creator Ruby is a language of careful balance. Its creator, Yukihiro “matz” Matsumoto, blended parts of his favorite languages (Perl, Smalltalk, Eiffel, Ada, and Lisp) to form a new language that balanced functional programming with imperative programming.
He has often said that he is trying to make Ruby natural, not simple, in a way that mirrors life.</description>
    </item>
    
    <item>
      <title>Java - Creating an MS Excel File using Jakarta POI api</title>
      <link>https://dhanoopbhaskar.github.io/blog/2011-08-11-java-creating-an-ms-excel-file-using-jakarta-poi-api/</link>
      <pubDate>Thu, 11 Aug 2011 20:57:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2011-08-11-java-creating-an-ms-excel-file-using-jakarta-poi-api/</guid>
      <description>CreateXLFile.java
import java.io.FileNotFoundException; import java.io.FileOutputStream; import java.io.IOException; import org.apache.poi.hssf.usermodel.HSSFCell; import org.apache.poi.hssf.usermodel.HSSFRow; import org.apache.poi.hssf.usermodel.HSSFSheet; import org.apache.poi.hssf.usermodel.HSSFWorkbook; /** * * @author dhanoopbhaskar */ public class CreateXLFile { HSSFWorkbook xlWorkbook = null; HSSFSheet xlSheet = null; HSSFRow xlRow = null; HSSFCell xlCell = null; FileOutputStream xlFileOutputStream = null; public CreateXLFile() { /** * creating a new MS Excel work book */ xlWorkbook = new HSSFWorkbook(); /** * creating a new sheet named &amp;#34;my first sheet&amp;#34; in the above created * work book */ xlSheet = xlWorkbook.</description>
    </item>
    
    <item>
      <title>Java -  A simple dictionary using applet</title>
      <link>https://dhanoopbhaskar.github.io/blog/2011-06-27-java-a-simple-dictionary-using-applet/</link>
      <pubDate>Mon, 27 Jun 2011 18:52:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2011-06-27-java-a-simple-dictionary-using-applet/</guid>
      <description>This is a simple dictionary in which you can add words and their meanings and thereafter search for the same.
import java.awt.event.ActionEvent; import javax.swing.JButton; import javax.swing.JTextArea; import javax.swing.JTextField; /* * * @author dhanoopbhaskar */ public class Main extends javax.swing.JApplet implements java.awt.event.ActionListener { JTextField textField = null; JTextArea textArea = null; JButton addButton = null; JButton showButton = null; String[] words = null; String[] meanings = null; int ptr = -1; public Main() { initComponents(); setLayout(null); add(textArea); add(textField); add(addButton); add(showButton); } public void actionPerformed(ActionEvent e) { if(e.</description>
    </item>
    
    <item>
      <title>Java - Writing to serial port using Java Communication API</title>
      <link>https://dhanoopbhaskar.github.io/blog/2011-06-27-java-writing-to-serial-port-using-java-communication-api/</link>
      <pubDate>Mon, 27 Jun 2011 18:42:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2011-06-27-java-writing-to-serial-port-using-java-communication-api/</guid>
      <description>import java.io.IOException; import java.io.OutputStream; import java.util.Enumeration; import javax.comm.CommPortIdentifier; import javax.comm.PortInUseException; import javax.comm.SerialPort; import javax.comm.UnsupportedCommOperationException; /** * * @author dhanoopbhaskar */ public class SerialPortWriter { Enumeration portList; CommPortIdentifier portIdentifier; String message; SerialPort serialPort; OutputStream outputStream; String portName = &amp;#34;&amp;#34;; public SerialPortWriter(String portName) { this.portName = portName; /** * gets a list of ports */ portList = CommPortIdentifier.getPortIdentifiers(); while (portList.hasMoreElements()) { portIdentifier = (CommPortIdentifier) portList.nextElement(); /** * check whether the port is serial */ if (portIdentifier.</description>
    </item>
    
    <item>
      <title>Java - Sum and Average using RMI</title>
      <link>https://dhanoopbhaskar.github.io/blog/2011-03-26-java-sum-and-average-using-rmi/</link>
      <pubDate>Sat, 26 Mar 2011 23:07:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2011-03-26-java-sum-and-average-using-rmi/</guid>
      <description>ServerIntf.java
import java.rmi.*; import java.rmi.server.*; public interface ServerIntf extends Remote { public double sum(double... numbers) throws RemoteException; public double average(double... numbers) throws RemoteException; } ServerImpl.java
import java.rmi.*; import java.rmi.server.*; public class ServerImpl extends UnicastRemoteObject implements ServerIntf { public ServerImpl() throws RemoteException { } public double sum(double... numbers) throws RemoteException { double result = 0; for(double num : numbers) { result += num; } return result; } public double average(double... numbers) throws RemoteException { double result = 0; int n = numbers.</description>
    </item>
    
    <item>
      <title>Java - System time using RMI</title>
      <link>https://dhanoopbhaskar.github.io/blog/2011-03-22-java-system-time-using-rmi/</link>
      <pubDate>Tue, 22 Mar 2011 18:38:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2011-03-22-java-system-time-using-rmi/</guid>
      <description>DateServerIntf.java
import java.rmi.*; import java.rmi.server.*; public interface DateServerIntf extends Remote { public String getSystemDate() throws RemoteException; } DateServerImpl.java
import java.rmi.*; import java.rmi.server.*; import java.util.*; import java.text.*; public class DateServerImpl extends UnicastRemoteObject implements DateServerIntf { public DateServerImpl() throws RemoteException { } public String getSystemDate() throws RemoteException { SimpleDateFormat dateFormat = new SimpleDateFormat(&amp;#34;yyyy-MM-dd hh:mm:ss&amp;#34;); Date date = new Date(); return dateFormat.format(date); } } DateServer.java
import java.rmi.*; import java.rmi.server.*; public class DateServer { public static void main(String[] args) { try { DateServerImpl dateServerImpl = new DateServerImpl(); Naming.</description>
    </item>
    
    <item>
      <title>Java - Mathematical Operations using RMI</title>
      <link>https://dhanoopbhaskar.github.io/blog/2011-03-22-java-mathematical-operations-using-rmi/</link>
      <pubDate>Tue, 22 Mar 2011 18:31:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2011-03-22-java-mathematical-operations-using-rmi/</guid>
      <description>MathServerIntf.java
import java.rmi.*; import java.rmi.server.*; public interface MathServerIntf extends Remote { public int add(int a, int b) throws RemoteException; public int subtract(int a, int b) throws RemoteException; public int multiply(int a, int b) throws RemoteException; public int divide(int a, int b) throws RemoteException; } MathServerImpl.java
import java.rmi.*; import java.rmi.server.*; public class MathServerImpl extends UnicastRemoteObject implements MathServerIntf { public MathServerImpl() throws RemoteException { } public int add(int a, int b) throws RemoteException { return a+b; } public int subtract(int a, int b) throws RemoteException { return a-b; } public int multiply(int a, int b) throws RemoteException { return a*b; } public int divide(int a, int b) throws RemoteException { if(b==0) { return -1; } else { return a/b; } } } MathServer.</description>
    </item>
    
    <item>
      <title>Java - TCP an example - MD, manager and employees</title>
      <link>https://dhanoopbhaskar.github.io/blog/2011-03-22-java-tcp-an-example-md-manager-and-employees/</link>
      <pubDate>Tue, 22 Mar 2011 18:20:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2011-03-22-java-tcp-an-example-md-manager-and-employees/</guid>
      <description>Question:
  Unidirectional data transfer from the Managing Director to the Manager
  Broadcast from the Manager to the Employees
  Public Chat between Employees
  ManagingDirector.java
import java.io.*; import java.net.*; public class ManagingDirector { ServerSocket serverSocket = null; Socket socketToManager = null; PrintWriter toManager = null; BufferedReader fromKeyboard = null; public ManagingDirector() { try { serverSocket = new ServerSocket(9999); System.out.println(&amp;#34;Waiting for a connection...&amp;#34;); socketToManager = serverSocket.</description>
    </item>
    
    <item>
      <title>Java Notes for download</title>
      <link>https://dhanoopbhaskar.github.io/blog/2011-03-18-java-notes-for-download/</link>
      <pubDate>Fri, 18 Mar 2011 17:26:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2011-03-18-java-notes-for-download/</guid>
      <description>Java Notes - From Scribd.com</description>
    </item>
    
    <item>
      <title>Java - Bidirectional data transfer using UDP</title>
      <link>https://dhanoopbhaskar.github.io/blog/2011-03-05-java-bidirectional-data-transfer-using-udp/</link>
      <pubDate>Sat, 05 Mar 2011 21:43:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2011-03-05-java-bidirectional-data-transfer-using-udp/</guid>
      <description>UDPServer.java
import java.io.*; import java.net.*; public class UDPServer implements Runnable { DatagramSocket socket = null; DatagramPacket packetOut = null; DatagramPacket packetIn = null; BufferedReader readFromKeyBoard = null; byte[] dataIn; byte[] dataOut; public UDPServer() { try { readFromKeyBoard = new BufferedReader( new InputStreamReader(System.in)); dataIn = new byte[1024]; dataOut = new byte[1024]; socket = new DatagramSocket(997); new Thread(this).start(); InetAddress inetAddress = InetAddress.getLocalHost(); while (true) { String message = readFromKeyBoard.readLine(); dataIn = message.getBytes(); packetOut = new DatagramPacket(dataIn, message.</description>
    </item>
    
    <item>
      <title>Java - Public chat using GUI</title>
      <link>https://dhanoopbhaskar.github.io/blog/2011-03-05-java-public-chat-using-gui/</link>
      <pubDate>Sat, 05 Mar 2011 21:41:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2011-03-05-java-public-chat-using-gui/</guid>
      <description>Server.java
import java.io.*; import java.net.*; import java.util.*; public class Server implements Runnable { ServerSocket serverSocket = null; Socket socket = null; ArrayList clientHandlerList = new ArrayList(); ClientHandler clientHandler = null; public Server() { try { serverSocket = new ServerSocket(4444); new Thread(this).start(); } catch (Exception exp) { exp.printStackTrace(); } } public void run() { try { while (true) { socket = serverSocket.accept(); clientHandler = new ClientHandler(socket, this); clientHandlerList.add(clientHandler); } } catch (Exception exp) { exp.</description>
    </item>
    
    <item>
      <title>Java - Data broadcasting using GUI</title>
      <link>https://dhanoopbhaskar.github.io/blog/2011-03-05-java-data-broadcasting-using-gui/</link>
      <pubDate>Sat, 05 Mar 2011 21:38:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2011-03-05-java-data-broadcasting-using-gui/</guid>
      <description>Server.java
import java.io.*; import java.net.*; import java.util.*; import javax.swing.*; import java.awt.event.*; import java.awt.*; public class Server extends JFrame implements Runnable, ActionListener { ServerSocket serverSocket = null; Socket socket = null; ArrayList clientHandlerList = new ArrayList(); ClientHandler clientHandler = null; JTextField chatField = null; JTextArea chatArea = null; JButton sendButton = null; public Server() { try { initComponents(); serverSocket = new ServerSocket(4444); new Thread(this).start(); } catch (Exception exp) { exp.printStackTrace(); } } public void initComponents() { setSize(270, 507); setResizable(false); setLayout(null); chatArea = new JTextArea(); chatField = new JTextField(20); chatArea.</description>
    </item>
    
    <item>
      <title>Java - Public chat</title>
      <link>https://dhanoopbhaskar.github.io/blog/2011-03-05-java-public-chat/</link>
      <pubDate>Sat, 05 Mar 2011 21:35:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2011-03-05-java-public-chat/</guid>
      <description>Server.java
import java.io.*; import java.net.*; import java.util.*; public class Server implements Runnable { ServerSocket serverSocket = null; Socket socket = null; ArrayList clientHandlerList = new ArrayList(); ClientHandler clientHandler = null; public Server() { try { serverSocket = new ServerSocket(4444); new Thread(this).start(); } catch (Exception exp) { exp.printStackTrace(); } } public void run() { try { while (true) { socket = serverSocket.accept(); clientHandler = new ClientHandler(socket, this); clientHandlerList.add(clientHandler); } } catch (Exception exp) { exp.</description>
    </item>
    
    <item>
      <title>Java - Data broadcasting</title>
      <link>https://dhanoopbhaskar.github.io/blog/2011-03-05-java-data-broadcasting/</link>
      <pubDate>Sat, 05 Mar 2011 21:33:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2011-03-05-java-data-broadcasting/</guid>
      <description>Server.java
import java.io.*; import java.net.*; import java.util.*; public class Server implements Runnable { ServerSocket serverSocket = null; Socket socket = null; ArrayList clientHandlerList = new ArrayList(); ClientHandler clientHandler = null; BufferedReader readFromKeyboard = null; public Server() { try { serverSocket = new ServerSocket(4444); readFromKeyboard = new BufferedReader( new InputStreamReader(System.in)); new Thread(this).start(); while (true) { String message = readFromKeyboard.readLine(); broadcast(message); } } catch (Exception exp) { exp.printStackTrace(); } } public void run() { try { while (true) { socket = serverSocket.</description>
    </item>
    
    <item>
      <title>Java - Bidirectional Data transfer using TCP</title>
      <link>https://dhanoopbhaskar.github.io/blog/2011-03-05-java-bidirectional-data-transfer-using-tcp/</link>
      <pubDate>Sat, 05 Mar 2011 21:30:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2011-03-05-java-bidirectional-data-transfer-using-tcp/</guid>
      <description>ServerThread.java
import java.io.*; import java.net.*; public class ServerThread implements Runnable { ServerSocket serverSocket = null; Socket socket = null; BufferedReader readFromClient = null; BufferedReader readFromServer = null; PrintWriter writeToClient = null; String message = null; public ServerThread() { try { serverSocket = new ServerSocket(4444); System.out.println(&amp;#34;Waiting for connection...&amp;#34;); socket = serverSocket.accept(); System.out.println(&amp;#34;Connection accepted...&amp;#34;); readFromClient = new BufferedReader( new InputStreamReader( socket.getInputStream())); writeToClient = new PrintWriter( socket.getOutputStream(), true); readFromServer = new BufferedReader( new InputStreamReader( System.</description>
    </item>
    
    <item>
      <title>Java - Select Statament - My SQL</title>
      <link>https://dhanoopbhaskar.github.io/blog/2011-03-05-java-select-statament-my-sql/</link>
      <pubDate>Sat, 05 Mar 2011 21:14:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2011-03-05-java-select-statament-my-sql/</guid>
      <description>String[] names = new String[100]; Connection con = getConnection(); String query = &amp;quot;SELECT name FROM student&amp;quot;; PreparedStatement preparedStatement = con.prepareStatement(query); ResultSet resultSet = preparedStatement.executeQuery(); int i=0; while(resultSet.next()) { names[i] = resultSet.getString(&amp;quot;name&amp;quot;); // name is the field name i++; }  </description>
    </item>
    
    <item>
      <title>Java - Insert Statement - My SQL</title>
      <link>https://dhanoopbhaskar.github.io/blog/2011-03-05-java-insert-statement-my-sql/</link>
      <pubDate>Sat, 05 Mar 2011 21:08:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2011-03-05-java-insert-statement-my-sql/</guid>
      <description>String rollno = &amp;quot;1&amp;quot;; String name = &amp;quot;ABC&amp;quot;; Connection con = getConnection(); String query = &amp;quot;insert into student (rollno, name) values (?,?)&amp;quot;; /*student is the table name, rollno and name are the field names*/ PreparedStatement preparedStatement = con.prepareStatement(query); preparedStatement.setString(1,rollno); preparedStatement.setString(2,name); /* * String query = &amp;quot;insert into student (rollno, name) values (&#39;1&#39;,&#39;ABC&#39;)&amp;quot;; * PreparedStatement preparedStatement = con.prepareStatement(query); * * NB: This is also correct. First format is used if the inputs are from user through JTextField.</description>
    </item>
    
    <item>
      <title>Java - Getting current time and date</title>
      <link>https://dhanoopbhaskar.github.io/blog/2011-03-05-java-getting-current-time-and-date/</link>
      <pubDate>Sat, 05 Mar 2011 20:57:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2011-03-05-java-getting-current-time-and-date/</guid>
      <description>private String getDateTime() { DateFormat dateFormat = new SimpleDateFormat(&amp;quot;yyyy/MM/dd HH:mm:ss&amp;quot;); Date date = new Date(); return dateFormat.format(date); } Date currentDateAndTime = getDateTime();  </description>
    </item>
    
    <item>
      <title>Java - Giving background picture to a JFrame</title>
      <link>https://dhanoopbhaskar.github.io/blog/2011-03-05-java-giving-background-picture-to-a-jframe/</link>
      <pubDate>Sat, 05 Mar 2011 20:54:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2011-03-05-java-giving-background-picture-to-a-jframe/</guid>
      <description>Image bgImage = Toolkit.getDefaultToolkit().createImage(getClass().getResource(&amp;quot;/src/ui/images/abc.jpg&amp;quot;)); public void paintComponent(Graphics g) { g.drawImage(bgImage,0,0,this); }  </description>
    </item>
    
    <item>
      <title>Java - Database connectivity My SQL</title>
      <link>https://dhanoopbhaskar.github.io/blog/2011-03-05-java-database-connectivity-my-sql/</link>
      <pubDate>Sat, 05 Mar 2011 20:50:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2011-03-05-java-database-connectivity-my-sql/</guid>
      <description>public Connection getConnection() { Connection con = null; try { Class.forName(&amp;quot;com.mysql.jdbc.Driver&amp;quot;); con = DriverManager.getConnection( &amp;quot;jdbc:mysql://127.0.0.1/databaseName&amp;quot;, &amp;quot;userName&amp;quot;, &amp;quot;password&amp;quot;); } catch (Exception e) { System.out.println(e); } return con; } </description>
    </item>
    
    <item>
      <title>Java - Getting Computer Name</title>
      <link>https://dhanoopbhaskar.github.io/blog/2011-03-05-java-getting-computer-name/</link>
      <pubDate>Sat, 05 Mar 2011 20:46:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2011-03-05-java-getting-computer-name/</guid>
      <description>public class GetComputerName { public static void main(String args[]) { try { String computerName = InetAddress.getLocalHost().getHostName(); System.out.println(computerName); } catch (Exception e) { System.out.println(&amp;quot;Exception caught =&amp;quot; + e.getMessage()); } } } </description>
    </item>
    
    <item>
      <title>Linux-Shell Programming</title>
      <link>https://dhanoopbhaskar.github.io/blog/2010-12-23-linux-shell-programming/</link>
      <pubDate>Thu, 23 Dec 2010 22:43:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2010-12-23-linux-shell-programming/</guid>
      <description>Write a program to print details of currently logged in users,
print date and calendar?
 #/bin/bash echo &amp;quot;Current login users: `who`&amp;quot; echo &amp;quot;Date: `date`&amp;quot; echo &amp;quot;Calendar: `cal`&amp;quot;    Write a program to define user defined variables &amp;lsquo;x&amp;rsquo; with value
&amp;lsquo;10&amp;rsquo; and &amp;lsquo;y&amp;rsquo; &amp;lsquo;20&amp;rsquo; and print it on screen?
 #/bin/bash a=10 b=20 echo &amp;quot;a = $a , b = $b&amp;quot;    Write a program to print current shell, present working directory,</description>
    </item>
    
    <item>
      <title>Linux-More commands</title>
      <link>https://dhanoopbhaskar.github.io/blog/2010-12-23-linux-more-commands/</link>
      <pubDate>Thu, 23 Dec 2010 22:37:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2010-12-23-linux-more-commands/</guid>
      <description>To show the full path of shell commands found in your path
which &amp;lt;command name&amp;gt; eg: which grep //output like: /bin/grep  To locate the program, source code, and manual page for a command
whereis &amp;lt;command name&amp;gt;  To search for files anywhere on the file system
locate &amp;lt;keyword to search&amp;gt; //find all files and directories that contain the keyword  To search for files matching certain patterns
find &amp;lt;directory name&amp;gt; &amp;lt;pattern to search&amp;gt; eg: find .</description>
    </item>
    
    <item>
      <title>Linux-Working with files</title>
      <link>https://dhanoopbhaskar.github.io/blog/2010-12-23-linux-working-with-files/</link>
      <pubDate>Thu, 23 Dec 2010 22:10:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2010-12-23-linux-working-with-files/</guid>
      <description>To find the type of a file
file &amp;lt;file name&amp;gt;  To create a file
cat &amp;gt; filename.txt //type the contents and press Ctrl+D to exit  To display the contents of a text file
cat &amp;lt;file name&amp;gt;  To view the contents of a file page by page
more &amp;lt;file name&amp;gt; //traversal only in forward direction less &amp;lt;file name&amp;gt; //traversal in both directions  To display first few lines of a file</description>
    </item>
    
    <item>
      <title>Linux-Working with directories</title>
      <link>https://dhanoopbhaskar.github.io/blog/2010-12-23-linux-working-with-directories/</link>
      <pubDate>Thu, 23 Dec 2010 22:02:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2010-12-23-linux-working-with-directories/</guid>
      <description>To print working directory
pwd  To change directory
To return to home directory
cd  To change into specified directory name
cd &amp;lt;directory name&amp;gt;  To change to home or other path relative to home
// ~ is an alias for your home directory cd ~  To move up one directory
cd ..  To return to previous directory
cd -  To list all files in the current directory</description>
    </item>
    
    <item>
      <title>Linux-help commands</title>
      <link>https://dhanoopbhaskar.github.io/blog/2010-12-23-linux-help-commands/</link>
      <pubDate>Thu, 23 Dec 2010 21:44:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2010-12-23-linux-help-commands/</guid>
      <description>To get help on commands
help &amp;lt;command name&amp;gt; eg: help cat &amp;lt;command name&amp;gt; --help eg: grep --help &amp;lt;command name&amp;gt; -h eg: chmod -h whatis &amp;lt;command name&amp;gt; eg: whatis grep  To get man pages
man &amp;lt;command name&amp;gt; eg: man ls  To search for a particular word within a man page type /word
To quit from a man page, just type the Q key
If you don’t remember the actual command:</description>
    </item>
    
    <item>
      <title>Linux-Directory Layout</title>
      <link>https://dhanoopbhaskar.github.io/blog/2010-12-23-linux-directory-layout/</link>
      <pubDate>Thu, 23 Dec 2010 21:42:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2010-12-23-linux-directory-layout/</guid>
      <description>Directory Description       The nameless base of the file system. All other directories, files, drives, and devices are attached to this root. Commonly (but incorrectly) referred to as the “slash” or “/” directory. The “/” is just a directory separator, not a directory itself.   /bin Essential command binaries (programs) are stored here (bash, ls, mount, tar, etc.)   /boot Static files of the boot loader.</description>
    </item>
    
    <item>
      <title>Linux-basics</title>
      <link>https://dhanoopbhaskar.github.io/blog/2010-12-23-linux-basics/</link>
      <pubDate>Thu, 23 Dec 2010 21:40:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2010-12-23-linux-basics/</guid>
      <description>Character Description     \ Escape character. If you want to reference a special character, you must “escape” it with a backslash first. Example: touch /tmp/filename\*   / Directory separator, used to separate a string of directory names. Example: /usr/src/linux   . dot denotes current directory. Can also “hide” files when it is the first character in a filename.   .. 2 dots denote parent directory   ~ User&amp;rsquo;s home directory   * Represents 0 or more characters in a filename, or by itself, all files in a directory.</description>
    </item>
    
    <item>
      <title>Java-Multithreading</title>
      <link>https://dhanoopbhaskar.github.io/blog/2010-12-23-java-multithreading/</link>
      <pubDate>Thu, 23 Dec 2010 00:02:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2010-12-23-java-multithreading/</guid>
      <description>Method 1: Using Thread class
class Threading { public static void main(String[] args) { /*Method No.1*/ Counter ctr = new Counter(); ctr.start(); } } /*Method No.1*/ class Counter extends Thread { public void run() { int ctr = 1; while (ctr &amp;lt;= 10) { System.out.println(ctr++); try { sleep(1000); } catch (InterruptedException ex) {} } } } Method 2: Using Runnable interface
class Threading { public static void main(String[] args) { /*Method No.</description>
    </item>
    
    <item>
      <title>Java-TCP socket programming</title>
      <link>https://dhanoopbhaskar.github.io/blog/2010-12-23-java-tcp-socket-programming/</link>
      <pubDate>Thu, 23 Dec 2010 00:00:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2010-12-23-java-tcp-socket-programming/</guid>
      <description>import java.net.*; import java.io.*; public class Client1 { public static void main(String[] args) throws Exception { String hostAddr = &amp;#34;127.0.0.1&amp;#34;; // Loopback Address 	int hostPort = 8000; System.out.println(&amp;#34;Client requesting for connection...&amp;#34;); Socket clientSideSocket = new Socket(hostAddr, hostPort); System.out.println(&amp;#34;Connection established.&amp;#34;); PrintWriter serverWriter = new PrintWriter( clientSideSocket.getOutputStream(), true); System.out.println(&amp;#34;Key in a message for the server:&amp;#34;); serverWriter.println(new BufferedReader( new InputStreamReader(System.in)).readLine()); System.out.println(&amp;#34;Message sent to server.&amp;#34;); } } import java.net.*; import java.io.*; public class Server1 { public static void main(String[] args) throws Exception { int port = 8000; ServerSocket serverSocket = new ServerSocket(port); System.</description>
    </item>
    
    <item>
      <title>Java-Serialization and De-serialization</title>
      <link>https://dhanoopbhaskar.github.io/blog/2010-12-22-java-serialization-and-de-serialization/</link>
      <pubDate>Wed, 22 Dec 2010 23:57:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2010-12-22-java-serialization-and-de-serialization/</guid>
      <description>Student.java
import java.io.*; public class Student implements Serializable { private int rollNo; private String name; transient int age; public Student(int rollNo, String name, int age) { this.rollNo = rollNo; this.name = name; this.age = age; } public int getRollNo() { return rollNo; } public String getName() { return name; } } TestObjectInputStream.java
import java.io.*; public class TestObjectInputStream { public static void main(String s[]) throws IOException, ClassNotFoundException { /*FileInputStream fileInStream = new FileInputStream(&amp;#34;Student.</description>
    </item>
    
    <item>
      <title>Java-Renaming a file</title>
      <link>https://dhanoopbhaskar.github.io/blog/2010-12-22-java-renaming-a-file/</link>
      <pubDate>Wed, 22 Dec 2010 23:56:00 +0530</pubDate>
      
      <guid>https://dhanoopbhaskar.github.io/blog/2010-12-22-java-renaming-a-file/</guid>
      <description>import java.io.*; class TestFile { public static void main(String[] args) throws Exception { File file = new File(args[0]); System.out.println(file.getAbsolutePath()); File oldFile = new File(&amp;#34;a.txt&amp;#34;); File newFile = new File(&amp;#34;b.txt&amp;#34;); oldFile.renameTo(newFile); if (new File(&amp;#34;a.txt&amp;#34;).renameTo(new File(&amp;#34;b.txt&amp;#34;))) {	} else { } } } </description>
    </item>
    
  </channel>
</rss>